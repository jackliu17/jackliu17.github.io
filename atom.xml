<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cowboy Tech</title>
  <subtitle>The best preparation for tomorrow is doing your best today</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jackliu17.github.io/"/>
  <updated>2016-07-25T11:16:33.000Z</updated>
  <id>http://jackliu17.github.io/</id>
  
  <author>
    <name>Jack Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>美食台系列</title>
    <link href="http://jackliu17.github.io/2016/07/24/%E7%BE%8E%E9%A3%9F%E5%8F%B0%E7%B3%BB%E5%88%97/"/>
    <id>http://jackliu17.github.io/2016/07/24/美食台系列/</id>
    <published>2016-07-24T11:01:05.000Z</published>
    <updated>2016-07-25T11:16:33.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;五花肉&quot;&gt;&lt;a href=&quot;#五花肉&quot; class=&quot;headerlink&quot; title=&quot;五花肉&quot;&gt;&lt;/a&gt;五花肉&lt;/h1&gt;&lt;h2 id=&quot;蒜泥白肉&quot;&gt;&lt;a href=&quot;#蒜泥白肉&quot; class=&quot;headerlink&quot; title=&quot;蒜泥白肉&quot;&gt;&lt;/a&gt;蒜泥白肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/8bIf4ESH1HU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;回锅肉&quot;&gt;&lt;a href=&quot;#回锅肉&quot; class=&quot;headerlink&quot; title=&quot;回锅肉&quot;&gt;&lt;/a&gt;回锅肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/bn5oQLbVCkU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;盐煎肉&quot;&gt;&lt;a href=&quot;#盐煎肉&quot; class=&quot;headerlink&quot; title=&quot;盐煎肉&quot;&gt;&lt;/a&gt;盐煎肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/bn5oQLbVCkU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;滷肉飯&quot;&gt;&lt;a href=&quot;#滷肉飯&quot; class=&quot;headerlink&quot; title=&quot;滷肉飯&quot;&gt;&lt;/a&gt;滷肉飯&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/cVVY9vSWoTw&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;糖醋丸子&quot;&gt;&lt;a href=&quot;#糖醋丸子&quot; class=&quot;headerlink&quot; title=&quot;糖醋丸子&quot;&gt;&lt;/a&gt;糖醋丸子&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/o4guUX24gLY&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;脆漿魚露炒豬肉&quot;&gt;&lt;a href=&quot;#脆漿魚露炒豬肉&quot; class=&quot;headerlink&quot; title=&quot;脆漿魚露炒豬肉&quot;&gt;&lt;/a&gt;脆漿魚露炒豬肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/Cdr0n9LhW5Q&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;猪里脊肉&quot;&gt;&lt;a href=&quot;#猪里脊肉&quot; class=&quot;headerlink&quot; title=&quot;猪里脊肉&quot;&gt;&lt;/a&gt;猪里脊肉&lt;/h1&gt;&lt;h2 id=&quot;京酱肉丝&quot;&gt;&lt;a href=&quot;#京酱肉丝&quot; class=&quot;headerlink&quot; title=&quot;京酱肉丝&quot;&gt;&lt;/a&gt;京酱肉丝&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/3LIRFpkMGss&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;自制肉松&quot;&gt;&lt;a href=&quot;#自制肉松&quot; class=&quot;headerlink&quot; title=&quot;自制肉松&quot;&gt;&lt;/a&gt;自制肉松&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/Ul8y6OI3qdQ&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;魚香肉絲&quot;&gt;&lt;a href=&quot;#魚香肉絲&quot; class=&quot;headerlink&quot; title=&quot;魚香肉絲&quot;&gt;&lt;/a&gt;魚香肉絲&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/R8GhfvkGSg4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;排骨&quot;&gt;&lt;a href=&quot;#排骨&quot; class=&quot;headerlink&quot; title=&quot;排骨&quot;&gt;&lt;/a&gt;排骨&lt;/h1&gt;&lt;h2 id=&quot;豆瓣排骨&quot;&gt;&lt;a href=&quot;#豆瓣排骨&quot; class=&quot;headerlink&quot; title=&quot;豆瓣排骨&quot;&gt;&lt;/a&gt;豆瓣排骨&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/pXPLgTFzdjc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;茄汁排骨&quot;&gt;&lt;a href=&quot;#茄汁排骨&quot; class=&quot;headerlink&quot; title=&quot;茄汁排骨&quot;&gt;&lt;/a&gt;茄汁排骨&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/4mixwX4ZnQk&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;可乐猪手&quot;&gt;&lt;a href=&quot;#可乐猪手&quot; class=&quot;headerlink&quot; title=&quot;可乐猪手&quot;&gt;&lt;/a&gt;可乐猪手&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/6eDfWxjFstw&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;羊肉&quot;&gt;&lt;a href=&quot;#羊肉&quot; class=&quot;headerlink&quot; title=&quot;羊肉&quot;&gt;&lt;/a&gt;羊肉&lt;/h1&gt;&lt;h2 id=&quot;羊肉抓飯&quot;&gt;&lt;a href=&quot;#羊肉抓飯&quot; class=&quot;headerlink&quot; title=&quot;羊肉抓飯&quot;&gt;&lt;/a&gt;羊肉抓飯&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/xy2wOHLlNw4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;牛&quot;&gt;&lt;a href=&quot;#牛&quot; class=&quot;headerlink&quot; title=&quot;牛&quot;&gt;&lt;/a&gt;牛&lt;/h1&gt;&lt;h2 id=&quot;夫妻肺片&quot;&gt;&lt;a href=&quot;#夫妻肺片&quot; class=&quot;headerlink&quot; title=&quot;夫妻肺片&quot;&gt;&lt;/a&gt;夫妻肺片&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/J3m10Rtr93E&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;干炒牛河&quot;&gt;&lt;a href=&quot;#干炒牛河&quot; class=&quot;headerlink&quot; title=&quot;干炒牛河&quot;&gt;&lt;/a&gt;干炒牛河&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/zmLqnJ7aCxc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;果味醬牛肉&quot;&gt;&lt;a href=&quot;#果味醬牛肉&quot; class=&quot;headerlink&quot; title=&quot;果味醬牛肉&quot;&gt;&lt;/a&gt;果味醬牛肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/WUchAc1EMqM&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;牛肉醬&quot;&gt;&lt;a href=&quot;#牛肉醬&quot; class=&quot;headerlink&quot; title=&quot;牛肉醬&quot;&gt;&lt;/a&gt;牛肉醬&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/FjGooH5ujks&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;乾拌牛肉&quot;&gt;&lt;a href=&quot;#乾拌牛肉&quot; class=&quot;headerlink&quot; title=&quot;乾拌牛肉&quot;&gt;&lt;/a&gt;乾拌牛肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/PZYfOp20eqA&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;酸湯肥牛&quot;&gt;&lt;a href=&quot;#酸湯肥牛&quot; class=&quot;headerlink&quot; title=&quot;酸湯肥牛&quot;&gt;&lt;/a&gt;酸湯肥牛&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/8SlM9nacW0g&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;香辣牛肉&quot;&gt;&lt;a href=&quot;#香辣牛肉&quot; class=&quot;headerlink&quot; title=&quot;香辣牛肉&quot;&gt;&lt;/a&gt;香辣牛肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/9UAiNu7-FSs&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;紅燴牛肉&quot;&gt;&lt;a href=&quot;#紅燴牛肉&quot; class=&quot;headerlink&quot; title=&quot;紅燴牛肉&quot;&gt;&lt;/a&gt;紅燴牛肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/ztLroK642yE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;黑椒牛肉粒&quot;&gt;&lt;a href=&quot;#黑椒牛肉粒&quot; class=&quot;headerlink&quot; title=&quot;黑椒牛肉粒&quot;&gt;&lt;/a&gt;黑椒牛肉粒&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/IyRErvUbRD0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;鸡&quot;&gt;&lt;a href=&quot;#鸡&quot; class=&quot;headerlink&quot; title=&quot;鸡&quot;&gt;&lt;/a&gt;鸡&lt;/h1&gt;&lt;h2 id=&quot;泡椒鸡杂&quot;&gt;&lt;a href=&quot;#泡椒鸡杂&quot; class=&quot;headerlink&quot; title=&quot;泡椒鸡杂&quot;&gt;&lt;/a&gt;泡椒鸡杂&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/k-WVBevQ--0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;越式手撕雞&quot;&gt;&lt;a href=&quot;#越式手撕雞&quot; class=&quot;headerlink&quot; title=&quot;越式手撕雞&quot;&gt;&lt;/a&gt;越式手撕雞&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/z2tRhtuZ35g&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;大盤雞&quot;&gt;&lt;a href=&quot;#大盤雞&quot; class=&quot;headerlink&quot; title=&quot;大盤雞&quot;&gt;&lt;/a&gt;大盤雞&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/xXRWhkPEInA&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;手撕椒麻雞&quot;&gt;&lt;a href=&quot;#手撕椒麻雞&quot; class=&quot;headerlink&quot; title=&quot;手撕椒麻雞&quot;&gt;&lt;/a&gt;手撕椒麻雞&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/JlZfDRQT7rU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;宮保雞丁&quot;&gt;&lt;a href=&quot;#宮保雞丁&quot; class=&quot;headerlink&quot; title=&quot;宮保雞丁&quot;&gt;&lt;/a&gt;宮保雞丁&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/1dmVEzyM39Y&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;贵州辣子鸡&quot;&gt;&lt;a href=&quot;#贵州辣子鸡&quot; class=&quot;headerlink&quot; title=&quot;贵州辣子鸡&quot;&gt;&lt;/a&gt;贵州辣子鸡&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/dH5vRoXrcYA&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;胡椒豬肚雞&quot;&gt;&lt;a href=&quot;#胡椒豬肚雞&quot; class=&quot;headerlink&quot; title=&quot;胡椒豬肚雞&quot;&gt;&lt;/a&gt;胡椒豬肚雞&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/9dzS38rbW-U&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;鱼&quot;&gt;&lt;a href=&quot;#鱼&quot; class=&quot;headerlink&quot; title=&quot;鱼&quot;&gt;&lt;/a&gt;鱼&lt;/h1&gt;&lt;h2 id=&quot;照烧三文鱼&quot;&gt;&lt;a href=&quot;#照烧三文鱼&quot; class=&quot;headerlink&quot; title=&quot;照烧三文鱼&quot;&gt;&lt;/a&gt;照烧三文鱼&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/aRusvwikzjI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;糟溜鱼片&quot;&gt;&lt;a href=&quot;#糟溜鱼片&quot; class=&quot;headerlink&quot; title=&quot;糟溜鱼片&quot;&gt;&lt;/a&gt;糟溜鱼片&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/mFUx_lwX-Zg&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;和風秋刀魚&quot;&gt;&lt;a href=&quot;#和風秋刀魚&quot; class=&quot;headerlink&quot; title=&quot;和風秋刀魚&quot;&gt;&lt;/a&gt;和風秋刀魚&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/7ec-s_ZHWP0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;豆醬燜魚&quot;&gt;&lt;a href=&quot;#豆醬燜魚&quot; class=&quot;headerlink&quot; title=&quot;豆醬燜魚&quot;&gt;&lt;/a&gt;豆醬燜魚&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/tGtGYw3quGc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;豆瓣鯽魚&quot;&gt;&lt;a href=&quot;#豆瓣鯽魚&quot; class=&quot;headerlink&quot; title=&quot;豆瓣鯽魚&quot;&gt;&lt;/a&gt;豆瓣鯽魚&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/azlXWCGajr8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;烤三文魚茶泡飯&quot;&gt;&lt;a href=&quot;#烤三文魚茶泡飯&quot; class=&quot;headerlink&quot; title=&quot;烤三文魚茶泡飯&quot;&gt;&lt;/a&gt;烤三文魚茶泡飯&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/ZPp0RO-LNo8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;粵式蒸鱼&quot;&gt;&lt;a href=&quot;#粵式蒸鱼&quot; class=&quot;headerlink&quot; title=&quot;粵式蒸鱼&quot;&gt;&lt;/a&gt;粵式蒸鱼&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/vlI94p6_-GY&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;蛋&quot;&gt;&lt;a href=&quot;#蛋&quot; class=&quot;headerlink&quot; title=&quot;蛋&quot;&gt;&lt;/a&gt;蛋&lt;/h1&gt;&lt;h2 id=&quot;银鱼跑蛋&quot;&gt;&lt;a href=&quot;#银鱼跑蛋&quot; class=&quot;headerlink&quot; title=&quot;银鱼跑蛋&quot;&gt;&lt;/a&gt;银鱼跑蛋&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/V2Sc9vIkXwg&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;兩種滑蛋&quot;&gt;&lt;a href=&quot;#兩種滑蛋&quot; class=&quot;headerlink&quot; title=&quot;兩種滑蛋&quot;&gt;&lt;/a&gt;兩種滑蛋&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/xgfxqK5Ndeg&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;海鲜&quot;&gt;&lt;a href=&quot;#海鲜&quot; class=&quot;headerlink&quot; title=&quot;海鲜&quot;&gt;&lt;/a&gt;海鲜&lt;/h1&gt;&lt;h2 id=&quot;6種常見海鮮的處理方法&quot;&gt;&lt;a href=&quot;#6種常見海鮮的處理方法&quot; class=&quot;headerlink&quot; title=&quot;6種常見海鮮的處理方法&quot;&gt;&lt;/a&gt;6種常見海鮮的處理方法&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/P4z1lP55-E8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;沙薑爆炒八爪魚&quot;&gt;&lt;a href=&quot;#沙薑爆炒八爪魚&quot; class=&quot;headerlink&quot; title=&quot;沙薑爆炒八爪魚&quot;&gt;&lt;/a&gt;沙薑爆炒八爪魚&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/qr9TsIjtRW8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;白灼蝦&quot;&gt;&lt;a href=&quot;#白灼蝦&quot; class=&quot;headerlink&quot; title=&quot;白灼蝦&quot;&gt;&lt;/a&gt;白灼蝦&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/XwIvZp3loBs&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;檸檬葉香辣蝦&quot;&gt;&lt;a href=&quot;#檸檬葉香辣蝦&quot; class=&quot;headerlink&quot; title=&quot;檸檬葉香辣蝦&quot;&gt;&lt;/a&gt;檸檬葉香辣蝦&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/k3C6Kbpz5RQ&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;海鲜都好烧&quot;&gt;&lt;a href=&quot;#海鲜都好烧&quot; class=&quot;headerlink&quot; title=&quot;海鲜都好烧&quot;&gt;&lt;/a&gt;海鲜都好烧&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/b8ds0IaXPwQ&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;酒香蛤蜊&quot;&gt;&lt;a href=&quot;#酒香蛤蜊&quot; class=&quot;headerlink&quot; title=&quot;酒香蛤蜊&quot;&gt;&lt;/a&gt;酒香蛤蜊&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/Ox-oJhmzbe0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;瓜&quot;&gt;&lt;a href=&quot;#瓜&quot; class=&quot;headerlink&quot; title=&quot;瓜&quot;&gt;&lt;/a&gt;瓜&lt;/h1&gt;&lt;h2 id=&quot;苦瓜两吃&quot;&gt;&lt;a href=&quot;#苦瓜两吃&quot; class=&quot;headerlink&quot; title=&quot;苦瓜两吃&quot;&gt;&lt;/a&gt;苦瓜两吃&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/jn4tOFocYY8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;豆及豆腐&quot;&gt;&lt;a href=&quot;#豆及豆腐&quot; class=&quot;headerlink&quot; title=&quot;豆及豆腐&quot;&gt;&lt;/a&gt;豆及豆腐&lt;/h1&gt;&lt;h2 id=&quot;乾煸四季豆&quot;&gt;&lt;a href=&quot;#乾煸四季豆&quot; class=&quot;headerlink&quot; title=&quot;乾煸四季豆&quot;&gt;&lt;/a&gt;乾煸四季豆&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/0Mrnvcejhnc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;鍋塌豆腐&quot;&gt;&lt;a href=&quot;#鍋塌豆腐&quot; class=&quot;headerlink&quot; title=&quot;鍋塌豆腐&quot;&gt;&lt;/a&gt;鍋塌豆腐&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/E8avdm5B4Wg&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;客家釀豆腐&quot;&gt;&lt;a href=&quot;#客家釀豆腐&quot; class=&quot;headerlink&quot; title=&quot;客家釀豆腐&quot;&gt;&lt;/a&gt;客家釀豆腐&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/uoRUZfEKpH4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;面&quot;&gt;&lt;a href=&quot;#面&quot; class=&quot;headerlink&quot; title=&quot;面&quot;&gt;&lt;/a&gt;面&lt;/h1&gt;&lt;h2 id=&quot;香辣涼麵&quot;&gt;&lt;a href=&quot;#香辣涼麵&quot; class=&quot;headerlink&quot; title=&quot;香辣涼麵&quot;&gt;&lt;/a&gt;香辣涼麵&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/BxyQBjxYa4U&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;西兰花明太子意面&quot;&gt;&lt;a href=&quot;#西兰花明太子意面&quot; class=&quot;headerlink&quot; title=&quot;西兰花明太子意面&quot;&gt;&lt;/a&gt;西兰花明太子意面&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/cLrIEpIqLMI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;青红意面酱&quot;&gt;&lt;a href=&quot;#青红意面酱&quot; class=&quot;headerlink&quot; title=&quot;青红意面酱&quot;&gt;&lt;/a&gt;青红意面酱&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/u5jQal7e4Y0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;黑白意面酱&quot;&gt;&lt;a href=&quot;#黑白意面酱&quot; class=&quot;headerlink&quot; title=&quot;黑白意面酱&quot;&gt;&lt;/a&gt;黑白意面酱&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/v75P5GHuUm0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;熬葱油&quot;&gt;&lt;a href=&quot;#熬葱油&quot; class=&quot;headerlink&quot; title=&quot;熬葱油&quot;&gt;&lt;/a&gt;熬葱油&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/UGwgbCzZmg8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;酸辣粉&quot;&gt;&lt;a href=&quot;#酸辣粉&quot; class=&quot;headerlink&quot; title=&quot;酸辣粉&quot;&gt;&lt;/a&gt;酸辣粉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/4SKF1to5upM&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;肉末粉絲煲&quot;&gt;&lt;a href=&quot;#肉末粉絲煲&quot; class=&quot;headerlink&quot; title=&quot;肉末粉絲煲&quot;&gt;&lt;/a&gt;肉末粉絲煲&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/RiSinaoi01c&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;色拉及其他素食&quot;&gt;&lt;a href=&quot;#色拉及其他素食&quot; class=&quot;headerlink&quot; title=&quot;色拉及其他素食&quot;&gt;&lt;/a&gt;色拉及其他素食&lt;/h1&gt;&lt;h2 id=&quot;三款果蔬色拉&quot;&gt;&lt;a href=&quot;#三款果蔬色拉&quot; class=&quot;headerlink&quot; title=&quot;三款果蔬色拉&quot;&gt;&lt;/a&gt;三款果蔬色拉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/XedAXkulCVs&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;四喜烤麩&quot;&gt;&lt;a href=&quot;#四喜烤麩&quot; class=&quot;headerlink&quot; title=&quot;四喜烤麩&quot;&gt;&lt;/a&gt;四喜烤麩&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/aWuAKJSivlk&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;燒椒茄子&quot;&gt;&lt;a href=&quot;#燒椒茄子&quot; class=&quot;headerlink&quot; title=&quot;燒椒茄子&quot;&gt;&lt;/a&gt;燒椒茄子&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/1ePZVtj1O3c&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;蔬菜的8種切法&quot;&gt;&lt;a href=&quot;#蔬菜的8種切法&quot; class=&quot;headerlink&quot; title=&quot;蔬菜的8種切法&quot;&gt;&lt;/a&gt;蔬菜的8種切法&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/LwJuEvg75pk&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;揚州炒飯&quot;&gt;&lt;a href=&quot;#揚州炒飯&quot; class=&quot;headerlink&quot; title=&quot;揚州炒飯&quot;&gt;&lt;/a&gt;揚州炒飯&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/jv72wu0yt_s&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;隔夜漬菜&quot;&gt;&lt;a href=&quot;#隔夜漬菜&quot; class=&quot;headerlink&quot; title=&quot;隔夜漬菜&quot;&gt;&lt;/a&gt;隔夜漬菜&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/nZl6jPx1LQE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;牛油果三吃&quot;&gt;&lt;a href=&quot;#牛油果三吃&quot; class=&quot;headerlink&quot; title=&quot;牛油果三吃&quot;&gt;&lt;/a&gt;牛油果三吃&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/I9MCZRU_oSE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;干锅花菜&quot;&gt;&lt;a href=&quot;#干锅花菜&quot; class=&quot;headerlink&quot; title=&quot;干锅花菜&quot;&gt;&lt;/a&gt;干锅花菜&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/2TURi0VZJj0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;手撕包菜&quot;&gt;&lt;a href=&quot;#手撕包菜&quot; class=&quot;headerlink&quot; title=&quot;手撕包菜&quot;&gt;&lt;/a&gt;手撕包菜&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/G25Iw5tGvK4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;调味料&quot;&gt;&lt;a href=&quot;#调味料&quot; class=&quot;headerlink&quot; title=&quot;调味料&quot;&gt;&lt;/a&gt;调味料&lt;/h1&gt;&lt;h2 id=&quot;自製三種調味醬油&quot;&gt;&lt;a href=&quot;#自製三種調味醬油&quot; class=&quot;headerlink&quot; title=&quot;自製三種調味醬油&quot;&gt;&lt;/a&gt;自製三種調味醬油&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/7-6xOFOBxSU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;高级菜品&quot;&gt;&lt;a href=&quot;#高级菜品&quot; class=&quot;headerlink&quot; title=&quot;高级菜品&quot;&gt;&lt;/a&gt;高级菜品&lt;/h1&gt;&lt;h2 id=&quot;扬州狮子头&quot;&gt;&lt;a href=&quot;#扬州狮子头&quot; class=&quot;headerlink&quot; title=&quot;扬州狮子头&quot;&gt;&lt;/a&gt;扬州狮子头&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/EJGK8GXkjpI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;五花肉&quot;&gt;&lt;a href=&quot;#五花肉&quot; class=&quot;headerlink&quot; title=&quot;五花肉&quot;&gt;&lt;/a&gt;五花肉&lt;/h1&gt;&lt;h2 id=&quot;蒜泥白肉&quot;&gt;&lt;a href=&quot;#蒜泥白肉&quot; class=&quot;headerlink&quot; title=&quot;蒜泥白肉&quot;&gt;&lt;/a&gt;蒜泥白
    
    </summary>
    
      <category term="情感杂谈" scheme="http://jackliu17.github.io/categories/%E6%83%85%E6%84%9F%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="food" scheme="http://jackliu17.github.io/tags/food/"/>
    
  </entry>
  
  <entry>
    <title>LBS兴趣点搜索</title>
    <link href="http://jackliu17.github.io/2016/07/24/LBS%E5%85%B4%E8%B6%A3%E7%82%B9%E6%90%9C%E7%B4%A2/"/>
    <id>http://jackliu17.github.io/2016/07/24/LBS兴趣点搜索/</id>
    <published>2016-07-24T10:42:27.000Z</published>
    <updated>2016-07-24T10:48:35.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;代码设置启动界面&quot;&gt;&lt;a href=&quot;#代码设置启动界面&quot; class=&quot;headerlink&quot; title=&quot;代码设置启动界面&quot;&gt;&lt;/a&gt;代码设置启动界面&lt;/h1&gt;&lt;p&gt;AppDelegate.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
ViewController * viewController = [[ViewController alloc] init];
UINavigationController * navigationController = [[UINavigationController alloc] initWithRootViewController:viewController];
[_window setRootViewController:navigationController];
[_window makeKeyAndVisible];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;颜色创建图片&quot;&gt;&lt;a href=&quot;#颜色创建图片&quot; class=&quot;headerlink&quot; title=&quot;颜色创建图片&quot;&gt;&lt;/a&gt;颜色创建图片&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (UIImage *)createImageFromColor:(UIColor *)color imageSize:(CGSize)size {

CGRect frame = CGRectMake(0, 0, size.width, size.height);
UIGraphicsBeginImageContext(size);
CGContextRef context = UIGraphicsGetCurrentContext();
CGContextSetFillColorWithColor(context, [color CGColor]);
CGContextFillRect(context, frame);
UIImage * image = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();
return image;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;UISearchBar设置背景图片&quot;&gt;&lt;a href=&quot;#UISearchBar设置背景图片&quot; class=&quot;headerlink&quot; title=&quot;UISearchBar设置背景图片&quot;&gt;&lt;/a&gt;UISearchBar设置背景图片&lt;/h1&gt;&lt;p&gt;如果不设置背景图片，SearchBar会有默认的银灰色背景方框&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[_searchBar setBackgroundImage:[self createImageFromColor:[UIColor orangeColor]
                                               imageSize:CGSizeMake(self.view.frame.size.width, 50)]];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;//当用户第一次搜索未完成时，又执行了第二次搜索，这样就需要cancel掉&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if(_localSearch.searching){
    [_localSearch cancel];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;键盘退出&quot;&gt;&lt;a href=&quot;#键盘退出&quot; class=&quot;headerlink&quot; title=&quot;键盘退出&quot;&gt;&lt;/a&gt;键盘退出&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;[_searchBar resignFirstResponder];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;隐藏导航栏&quot;&gt;&lt;a href=&quot;#隐藏导航栏&quot; class=&quot;headerlink&quot; title=&quot;隐藏导航栏&quot;&gt;&lt;/a&gt;隐藏导航栏&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)viewWillAppear:(BOOL)animated {
[super viewWillAppear:animated];
[self.navigationController setNavigationBarHidden:YES];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Cell-配置&quot;&gt;&lt;a href=&quot;#Cell-配置&quot; class=&quot;headerlink&quot; title=&quot;Cell 配置&quot;&gt;&lt;/a&gt;Cell 配置&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
[self.tableView registerClass:[UITableViewCell class] forCellReuseIdentifier:tableViewKey];
}

//这样不需要进行if判断                 
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {  
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:tableViewKey forIndexPath:indexPath];
    NSDictionary *dic = _talbeViewArray[indexPath.row];
    [cell.textLabel setText:dic[@&amp;quot;site&amp;quot;]];
    return cell;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;自定义导航视图返回按钮&quot;&gt;&lt;a href=&quot;#自定义导航视图返回按钮&quot; class=&quot;headerlink&quot; title=&quot;自定义导航视图返回按钮&quot;&gt;&lt;/a&gt;自定义导航视图返回按钮&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
[self setTitle:@&amp;quot;线路导航&amp;quot;];
self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@&amp;quot;返回&amp;quot;
                                                                         style:UIBarButtonItemStylePlain
                                                                        target:self
                                                                        action:@selector(returnPre)];
                                                                        }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;枚举识别数个按钮&quot;&gt;&lt;a href=&quot;#枚举识别数个按钮&quot; class=&quot;headerlink&quot; title=&quot;枚举识别数个按钮&quot;&gt;&lt;/a&gt;枚举识别数个按钮&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;typedef NS_ENUM(NSUInteger, FunctionSelet) {
LBS_GAME = 0,
LBS_EAT,
LBS_REST,
LBSE_BUSSION,
LBS_OTHER,
LBS_OTHER1,
LBS_OTHER2,
LBS_OTHER3,
LBS_OTHER4,
};

NSUInteger dataArr[] = {LBS_GAME,LBS_EAT,LBS_REST,LBSE_BUSSION,LBS_OTHER,LBS_OTHER1,LBS_OTHER2,LBS_OTHER3,LBS_OTHER4};

for .... {
[btn setTag:dataArr[i]];
}

- (void)theBtnPressed:(id)sender { 
UIButton * btn = (UIButton *)sender;
NSString * userSelectString = nil;
switch(btn.tag){
    case LBS_GAME:
        userSelectString = @&amp;quot;游戏&amp;quot;;
        NSLog(@&amp;quot;游戏&amp;quot;);
        break;
    case LBS_EAT:
        userSelectString = @&amp;quot;吃喝&amp;quot;;
        NSLog(@&amp;quot;吃喝&amp;quot;);
        break;
    case LBS_REST:
        userSelectString = @&amp;quot;休息&amp;quot;;
        NSLog(@&amp;quot;休息&amp;quot;);
        break;
    case LBSE_BUSSION:
        userSelectString = @&amp;quot;狂街&amp;quot;;
        NSLog(@&amp;quot;逛街&amp;quot;);
        break;
    default:
        userSelectString = @&amp;quot;other&amp;quot;;
        break;
}

[self gotoShowDataView:userSelectString];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;MKLocalSearch&quot;&gt;&lt;a href=&quot;#MKLocalSearch&quot; class=&quot;headerlink&quot; title=&quot;MKLocalSearch&quot;&gt;&lt;/a&gt;MKLocalSearch&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;MKLocalSearchRequest * searchRequest = [[MKLocalSearchRequest alloc] init];
searchRequest.naturalLanguageQuery = self.searchString;
MKCoordinateRegion region = MKCoordinateRegionMakeWithDistance(CLLocationCoordinate2DMake(-33.96820, 151.11060), 2000, 2000);
searchRequest.region = region;

_localSearch = [[MKLocalSearch alloc] initWithRequest:searchRequest];
[_localSearch startWithCompletionHandler:^(MKLocalSearchResponse *response, NSError *error) {

    [loadingLabel removeFromSuperview];

    if(response.mapItems.count == 0 || error){
        NSLog(@&amp;quot;error:%@&amp;quot;,error);
    }else{
        [_talbeViewArray addObjectsFromArray:response.mapItems];
        self.currentRegion = response.boundingRegion;
        [self.tableView setBounces:YES];
        [self.tableView setSeparatorStyle:UITableViewCellSeparatorStyleSingleLine];
        [self.tableView reloadData];
    }
}];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;实现当前位置到兴趣点的导航路线-略&quot;&gt;&lt;a href=&quot;#实现当前位置到兴趣点的导航路线-略&quot; class=&quot;headerlink&quot; title=&quot;实现当前位置到兴趣点的导航路线 (略)&quot;&gt;&lt;/a&gt;实现当前位置到兴趣点的导航路线 (略)&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;MKMapItem属性介绍&lt;/li&gt;
&lt;li&gt;MKDirectionsRequest属性设置&lt;/li&gt;
&lt;li&gt;MKDirections使用方法&lt;/li&gt;
&lt;li&gt;MKDirectionsResponse返回数据处理&lt;/li&gt;
&lt;li&gt;MKRoute讲解&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代码设置启动界面&quot;&gt;&lt;a href=&quot;#代码设置启动界面&quot; class=&quot;headerlink&quot; title=&quot;代码设置启动界面&quot;&gt;&lt;/a&gt;代码设置启动界面&lt;/h1&gt;&lt;p&gt;AppDelegate.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_window = [[UIWin
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_CoreLocation" scheme="http://jackliu17.github.io/tags/iOS-CoreLocation/"/>
    
      <category term="iOS_MapKit" scheme="http://jackliu17.github.io/tags/iOS-MapKit/"/>
    
  </entry>
  
  <entry>
    <title>CoreLocation框架详解</title>
    <link href="http://jackliu17.github.io/2016/06/10/CoreLocation%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jackliu17.github.io/2016/06/10/CoreLocation框架详解/</id>
    <published>2016-06-10T03:22:28.000Z</published>
    <updated>2016-06-11T06:33:00.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;定位基础及权限详解&quot;&gt;&lt;a href=&quot;#定位基础及权限详解&quot; class=&quot;headerlink&quot; title=&quot;定位基础及权限详解&quot;&gt;&lt;/a&gt;定位基础及权限详解&lt;/h1&gt;&lt;p&gt;Core Location框架为定位用户当前位置和方向（Heading）提供支持。负责从设备硬件收集信息并以异步方式报告给应用程序。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定位方式:Wifi、蜂窝式移动电话基站、GPS卫星&lt;/li&gt;
&lt;li&gt;定位优先级:GPS、Wifi、蜂窝式移动电话基站&lt;/li&gt;
&lt;li&gt;定位准确性:GPS卫星（准确性高，但局限性大，比较耗费设备电量）、Wifi及蜂窝式移动电话基站（Wifi依赖网络，蜂窝取决于基站密度，耗费流量）&lt;/li&gt;
&lt;li&gt;iOS开发中，不能指定使用哪种方式进行定位，iOS系统会根据设备情况和周围环境，采用一套最佳的定位解决方案。&lt;/li&gt;
&lt;li&gt;iOS设备通过定位来确定用户位置信息，因为涉及用户隐私问题，所以在用户使用地图定位功能之前会与用户之间有交互行为。&lt;/li&gt;
&lt;li&gt;服务过程：用户进行定位授权，同意则进行定位操作，反之提示用户无授权无法进行定位操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;通过CoreLocation实现定位功能&quot;&gt;&lt;a href=&quot;#通过CoreLocation实现定位功能&quot; class=&quot;headerlink&quot; title=&quot;通过CoreLocation实现定位功能&quot;&gt;&lt;/a&gt;通过CoreLocation实现定位功能&lt;/h1&gt;&lt;h2 id=&quot;定位权限申请&quot;&gt;&lt;a href=&quot;#定位权限申请&quot; class=&quot;headerlink&quot; title=&quot;定位权限申请&quot;&gt;&lt;/a&gt;定位权限申请&lt;/h2&gt;&lt;p&gt;在info.plist文件里设置以下属性，对应的string值将会显示在弹出的对话框&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSLocationAlwaysUsageDescription
NSLocationWhenInUseUsageDescription
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;定位权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if([_locationManager respondsToSelector:@selector(requestWhenInUseAuthorization)]){
    [_locationManager requestWhenInUseAuthorization];
    [_locationManager requestAlwaysAuthorization];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CLLocation01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;位置管理器CLLocationManager&quot;&gt;&lt;a href=&quot;#位置管理器CLLocationManager&quot; class=&quot;headerlink&quot; title=&quot;位置管理器CLLocationManager&quot;&gt;&lt;/a&gt;位置管理器CLLocationManager&lt;/h2&gt;&lt;p&gt;ViewController &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController () &amp;lt;CLLocationManagerDelegate,MKMapViewDelegate&amp;gt;

@property (nonatomic, strong) MKMapView * mapView;
@property (nonatomic, strong) CLLocationManager * locationManager;

@end

@implementation ViewController
- (void)viewDidLoad {
[super viewDidLoad];
_mapView = [[MKMapView alloc] initWithFrame:self.view.bounds];
[_mapView setDelegate:self];

//允许显示用户位置
[_mapView setShowsUserLocation:YES];
[_mapView setMapType:MKMapTypeStandard];
[self.view addSubview:_mapView];

//检测定位功能是否开启
if([CLLocationManager locationServicesEnabled]){        
    if(!_locationManager){       
        _locationManager = [[CLLocationManager alloc] init];

        //定位权限
        if([_locationManager respondsToSelector:@selector(requestWhenInUseAuthorization)]){
            [_locationManager requestWhenInUseAuthorization];
            [_locationManager requestAlwaysAuthorization];
        }

        //设置代理
        [_locationManager setDelegate:self];
        //设置定位精度
        [_locationManager setDesiredAccuracy:kCLLocationAccuracyBest];
        //设置距离筛选
        [_locationManager setDistanceFilter:100];
        //开始定位
        [_locationManager startUpdatingLocation];
        //设置开始识别方向
        //[_locationManager startUpdatingHeading];
    }       
}else{

    UIAlertView * alertView = [[UIAlertView alloc] initWithTitle:nil
                                                         message:@&amp;quot;您没有开启定位功能&amp;quot;
                                                        delegate:nil
                                               cancelButtonTitle:@&amp;quot;确定&amp;quot;
                                               otherButtonTitles:nil, nil];
    [alertView show];
}

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;CLLocationManagerDelegate&quot;&gt;&lt;a href=&quot;#CLLocationManagerDelegate&quot; class=&quot;headerlink&quot; title=&quot;CLLocationManagerDelegate&quot;&gt;&lt;/a&gt;CLLocationManagerDelegate&lt;/h2&gt;&lt;h3 id=&quot;授权状态发生改变的时候执行&quot;&gt;&lt;a href=&quot;#授权状态发生改变的时候执行&quot; class=&quot;headerlink&quot; title=&quot;授权状态发生改变的时候执行&quot;&gt;&lt;/a&gt;授权状态发生改变的时候执行&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- (void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status {

switch(status){

    case kCLAuthorizationStatusDenied:
    {
        UIAlertView * alertView = [[UIAlertView alloc] initWithTitle:nil
                                                             message:@&amp;quot;定位功能没有开启&amp;quot; delegate:nil
                                                   cancelButtonTitle:@&amp;quot;确定&amp;quot; otherButtonTitles:nil,nil];
        [alertView show];
    }
        break;
    default:
        break;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;定位成功以后调用&quot;&gt;&lt;a href=&quot;#定位成功以后调用&quot; class=&quot;headerlink&quot; title=&quot;定位成功以后调用&quot;&gt;&lt;/a&gt;定位成功以后调用&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations {

//[_locationManager stopUpdatingLocation];
CLLocation * location = locations.lastObject;

MKCoordinateRegion coordinateRegion = MKCoordinateRegionMake(CLLocationCoordinate2DMake(location.coordinate.latitude, location.coordinate.longitude), MKCoordinateSpanMake(0.1, 0.1));

[_mapView setRegion:[_mapView regionThatFits:coordinateRegion] animated:YES];

//[self reverseGeocoder:location];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;定位失败&quot;&gt;&lt;a href=&quot;#定位失败&quot; class=&quot;headerlink&quot; title=&quot;定位失败&quot;&gt;&lt;/a&gt;定位失败&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error {
NSLog(@&amp;quot;error:%@&amp;quot;,error);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;CLGeocoder&quot;&gt;&lt;a href=&quot;#CLGeocoder&quot; class=&quot;headerlink&quot; title=&quot;CLGeocoder&quot;&gt;&lt;/a&gt;CLGeocoder&lt;/h1&gt;&lt;h2 id=&quot;地理编码-地址转经纬度&quot;&gt;&lt;a href=&quot;#地理编码-地址转经纬度&quot; class=&quot;headerlink&quot; title=&quot;地理编码 - 地址转经纬度&quot;&gt;&lt;/a&gt;地理编码 - 地址转经纬度&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;CLGeocoder * geocoder = [[CLGeocoder alloc] init];
[geocoder geocodeAddressString:str completionHandler:^(NSArray *placemarks, NSError *error) {

    if(error || placemarks.count == 0){
        NSLog(@&amp;quot;error&amp;quot;);
    }else{

        CLPlacemark * placemark = placemarks.firstObject;

        //设置显示区域
        MKCoordinateRegion coordinateRegion = MKCoordinateRegionMake(CLLocationCoordinate2DMake(placemark.location.coordinate.latitude, placemark.location.coordinate.longitude), MKCoordinateSpanMake(0.1, 0.1));
        [_mapView setRegion:[_mapView regionThatFits:coordinateRegion] animated:YES];

        //设置标注
        MKPointAnnotation * pointAnnotation = [[MKPointAnnotation alloc] init];
        [pointAnnotation setTitle:placemark.name];
        [pointAnnotation setCoordinate:CLLocationCoordinate2DMake(placemark.location.coordinate.latitude, placemark.location.coordinate.longitude)];
        [_mapView addAnnotation:pointAnnotation];
    }  
}];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;反地理编码-经纬度转地址&quot;&gt;&lt;a href=&quot;#反地理编码-经纬度转地址&quot; class=&quot;headerlink&quot; title=&quot;反地理编码 - 经纬度转地址&quot;&gt;&lt;/a&gt;反地理编码 - 经纬度转地址&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;CLGeocoder * geocoder = [[CLGeocoder alloc] init];
[geocoder reverseGeocodeLocation:currentLocation completionHandler:^(NSArray *placemarks, NSError *error) {

    if(error || placemarks.count == 0){
        NSLog(@&amp;quot;error&amp;quot;);
    }else{

        CLPlacemark * placemark = placemarks.firstObject;

         //设置标注
        MKPointAnnotation * pointAnnotation = [[MKPointAnnotation alloc] init];
        [pointAnnotation setTitle:placemark.name];
        [pointAnnotation setCoordinate:CLLocationCoordinate2DMake(placemark.location.coordinate.latitude, placemark.location.coordinate.longitude)];
        [_mapView addAnnotation:pointAnnotation];

        //设置显示区域
        MKCoordinateRegion coordinateRegion = MKCoordinateRegionMake(CLLocationCoordinate2DMake(placemark.location.coordinate.latitude, placemark.location.coordinate.longitude), MKCoordinateSpanMake(0.1, 0.1));   
        [_mapView setRegion:[_mapView regionThatFits:coordinateRegion] animated:YES];

        NSLog(@&amp;quot;placemark:%@&amp;quot;,[[placemark addressDictionary] objectForKey:@&amp;quot;City&amp;quot;]);
    }

}];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;CLPlacemark存储地址信息&quot;&gt;&lt;a href=&quot;#CLPlacemark存储地址信息&quot; class=&quot;headerlink&quot; title=&quot;CLPlacemark存储地址信息&quot;&gt;&lt;/a&gt;CLPlacemark存储地址信息&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;NSLog(@&amp;quot;placemark:%@&amp;quot;,[[placemark addressDictionary] objectForKey:@&amp;quot;City&amp;quot;]);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;屏幕触摸实现地理位置选择&quot;&gt;&lt;a href=&quot;#屏幕触摸实现地理位置选择&quot; class=&quot;headerlink&quot; title=&quot;屏幕触摸实现地理位置选择&quot;&gt;&lt;/a&gt;屏幕触摸实现地理位置选择&lt;/h1&gt;&lt;h2 id=&quot;长按设置坐标点&quot;&gt;&lt;a href=&quot;#长按设置坐标点&quot; class=&quot;headerlink&quot; title=&quot;长按设置坐标点&quot;&gt;&lt;/a&gt;长按设置坐标点&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;UILongPressGestureRecognizer * longpressGestureRecognizer = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(longPressed:)];
[_mapView addGestureRecognizer:longpressGestureRecognizer];


- (void)longPressed:(UILongPressGestureRecognizer *)recognizer {

if(recognizer.state == UIGestureRecognizerStateBegan){


    CGPoint point = [recognizer locationInView:_mapView];
    CLLocationCoordinate2D coordinate2D = [_mapView convertPoint:point toCoordinateFromView:_mapView];

    [_mapView removeAnnotations:_mapView.annotations];

    CLLocation * location = [[CLLocation alloc] initWithLatitude:coordinate2D.latitude longitude:coordinate2D.longitude];

    [self reverseGeocoder:location];

}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;获取地图界面点&quot;&gt;&lt;a href=&quot;#获取地图界面点&quot; class=&quot;headerlink&quot; title=&quot;获取地图界面点&quot;&gt;&lt;/a&gt;获取地图界面点&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;CGPoint point = [recognizer locationInView:_mapView];
CLLocationCoordinate2D coordinate2D = [_mapView convertPoint:point toCoordinateFromView:_mapView];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;移除原有的标注&quot;&gt;&lt;a href=&quot;#移除原有的标注&quot; class=&quot;headerlink&quot; title=&quot;移除原有的标注&quot;&gt;&lt;/a&gt;移除原有的标注&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;[_mapView removeAnnotations:_mapView.annotations];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;自定义标注&quot;&gt;&lt;a href=&quot;#自定义标注&quot; class=&quot;headerlink&quot; title=&quot;自定义标注&quot;&gt;&lt;/a&gt;自定义标注&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id&amp;lt;MKAnnotation&amp;gt;)annotation{
static NSString * key = @&amp;quot;key&amp;quot;;
MKPinAnnotationView * pinAnnotationView = (MKPinAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:key];

if(pinAnnotationView == nil){
    pinAnnotationView = [[MKPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:key];
    [pinAnnotationView setCanShowCallout:YES];
}

if([annotation isKindOfClass:[MKUserLocation class]]){
    [pinAnnotationView setPinColor:MKPinAnnotationColorRed];
    [((MKUserLocation *)annotation) setTitle:_titleString];
}else{
    [pinAnnotationView setPinColor:MKPinAnnotationColorPurple];
}
return pinAnnotationView;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认的是个蓝色闪烁点，如果自定义的话，就是插个大头针&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[_mapView setShowsUserLocation:YES];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;CoreLocation相关功能补充&quot;&gt;&lt;a href=&quot;#CoreLocation相关功能补充&quot; class=&quot;headerlink&quot; title=&quot;CoreLocation相关功能补充&quot;&gt;&lt;/a&gt;CoreLocation相关功能补充&lt;/h1&gt;&lt;p&gt;CLHeading介绍&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//设置开始识别方向
[_locationManager startUpdatingHeading];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;位置更新&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//定位成功以后就停止位置更新
- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations {
......
[_locationManager stopUpdatingLocation];

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h1&gt;&lt;h2 id=&quot;文本框键盘退出&quot;&gt;&lt;a href=&quot;#文本框键盘退出&quot; class=&quot;headerlink&quot; title=&quot;文本框键盘退出&quot;&gt;&lt;/a&gt;文本框键盘退出&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;[_textField resignFirstResponder];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;文本框输入的判断&quot;&gt;&lt;a href=&quot;#文本框输入的判断&quot; class=&quot;headerlink&quot; title=&quot;文本框输入的判断&quot;&gt;&lt;/a&gt;文本框输入的判断&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;if([_textField.text length] == 0){

    return;
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定位基础及权限详解&quot;&gt;&lt;a href=&quot;#定位基础及权限详解&quot; class=&quot;headerlink&quot; title=&quot;定位基础及权限详解&quot;&gt;&lt;/a&gt;定位基础及权限详解&lt;/h1&gt;&lt;p&gt;Core Location框架为定位用户当前位置和方向（Heading）提供支持。负
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_CoreLocation" scheme="http://jackliu17.github.io/tags/iOS-CoreLocation/"/>
    
  </entry>
  
  <entry>
    <title>MapKit地图应用基础</title>
    <link href="http://jackliu17.github.io/2016/06/08/MapKit%E5%9C%B0%E5%9B%BE%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%80/"/>
    <id>http://jackliu17.github.io/2016/06/08/MapKit地图应用基础/</id>
    <published>2016-06-08T05:38:00.000Z</published>
    <updated>2016-06-08T07:06:54.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;MapKit基础讲解&quot;&gt;&lt;a href=&quot;#MapKit基础讲解&quot; class=&quot;headerlink&quot; title=&quot;MapKit基础讲解&quot;&gt;&lt;/a&gt;MapKit基础讲解&lt;/h1&gt;&lt;p&gt;Map Kit（地图套件）提供了一个接口，可以将地图直接嵌入到自己的视图中。通过Map Kit框架，可以在iOS应用程序中显示地图以及当前位置。通过属性的设定，可以轻松实现位置显示、添加地图注释，通过给定信息查找确定地标信息等相关功能。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MKMapView：提供了一个可嵌入应用的地图界面。&lt;/li&gt;
&lt;li&gt;MKCoordinateRegin：设置地图显示区域。&lt;/li&gt;
&lt;li&gt;MKPointAnnotation：提供了在指定点添加注释的功能，不能自定义该类。&lt;/li&gt;
&lt;li&gt;MKPinAnnotation：通过此类可以对地图标注进行配置。&lt;/li&gt;
&lt;li&gt;MKAnnotationView：通过此类实现自定义地图标注功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_MapKitBasic02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;创建地图应用&quot;&gt;&lt;a href=&quot;#创建地图应用&quot; class=&quot;headerlink&quot; title=&quot;创建地图应用&quot;&gt;&lt;/a&gt;创建地图应用&lt;/h1&gt;&lt;h2 id=&quot;添加MKMapView到视图&quot;&gt;&lt;a href=&quot;#添加MKMapView到视图&quot; class=&quot;headerlink&quot; title=&quot;添加MKMapView到视图&quot;&gt;&lt;/a&gt;添加MKMapView到视图&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;MKMapView * mapView = [[MKMapView alloc] initWithFrame:self.view.bounds];
[self.view addSubview:mapView];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;MKMapView相关属性&quot;&gt;&lt;a href=&quot;#MKMapView相关属性&quot; class=&quot;headerlink&quot; title=&quot;MKMapView相关属性&quot;&gt;&lt;/a&gt;MKMapView相关属性&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;[mapView setDelegate:self];
[mapView setMapType:MKMapTypeStandard]; //有卫星，标准地图等
[mapView setZoomEnabled:YES];  //设置地图缩放
[mapView setScrollEnabled:YES]; //设置地图移动
[mapView setRotateEnabled:YES]; //设置地图旋转
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;地图的显示区域&quot;&gt;&lt;a href=&quot;#地图的显示区域&quot; class=&quot;headerlink&quot; title=&quot;地图的显示区域&quot;&gt;&lt;/a&gt;地图的显示区域&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//Method.1 -- 通过跨度来设置地图的显示区域
//MKCoordinateRegion region = MKCoordinateRegionMake(CLLocationCoordinate2DMake(-37.855339, 145.153377), MKCoordinateSpanMake(0.1, 0.1));

//Method.2 -- 通过距离来设置地图显示区域
MKCoordinateRegion region = MKCoordinateRegionMakeWithDistance(CLLocationCoordinate2DMake(-37.855339, 145.153377),100 ,100);

[mapView setRegion:[mapView regionThatFits:region]];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;添加地图标注&quot;&gt;&lt;a href=&quot;#添加地图标注&quot; class=&quot;headerlink&quot; title=&quot;添加地图标注&quot;&gt;&lt;/a&gt;添加地图标注&lt;/h1&gt;&lt;h2 id=&quot;设置地点坐标&quot;&gt;&lt;a href=&quot;#设置地点坐标&quot; class=&quot;headerlink&quot; title=&quot;设置地点坐标&quot;&gt;&lt;/a&gt;设置地点坐标&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//Method.1
CLLocationCoordinate2D coordinate2D = CLLocationCoordinate2DMake(39.936846 , 116.503729);

//Method.2
CLLocationCoordinate2D coordinate2D;
coordinate2D.latitude = 39.936846;
coordinate2D.longitude = 116.503729;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;指定坐标点添加标注&quot;&gt;&lt;a href=&quot;#指定坐标点添加标注&quot; class=&quot;headerlink&quot; title=&quot;指定坐标点添加标注&quot;&gt;&lt;/a&gt;指定坐标点添加标注&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;MKPointAnnotation * pointAnntation1 = [[MKPointAnnotation alloc] init];
[pointAnntation1 setTitle:@&amp;quot;当前位置&amp;quot;];
[pointAnntation1 setSubtitle:@&amp;quot;位置说明&amp;quot;];
[pointAnntation1 setCoordinate:coordinate2D];
[mapView addAnnotation:pointAnntation1];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;添加多个标注&quot;&gt;&lt;a href=&quot;#添加多个标注&quot; class=&quot;headerlink&quot; title=&quot;添加多个标注&quot;&gt;&lt;/a&gt;添加多个标注&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//标注一
MKPointAnnotation * pointAnntation1 = [[MKPointAnnotation alloc] init];
[pointAnntation1 setTitle:@&amp;quot;当前位置&amp;quot;];
[pointAnntation1 setSubtitle:@&amp;quot;位置说明&amp;quot;];
[pointAnntation1 setCoordinate:coordinate2D];

//标注二
MKPointAnnotation * pointAnntation2 = [[MKPointAnnotation alloc] init];
[pointAnntation2 setTitle:@&amp;quot;当前位置&amp;quot;];
[pointAnntation2 setSubtitle:@&amp;quot;位置说明&amp;quot;];
[pointAnntation2 setCoordinate:coordinate2d];

NSArray * arrAnnitations = @[pointAnntation1,pointAnntation2];
[mapView addAnnotations:arrAnnitations];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;地图启动时显示标注气泡&quot;&gt;&lt;a href=&quot;#地图启动时显示标注气泡&quot; class=&quot;headerlink&quot; title=&quot;地图启动时显示标注气泡&quot;&gt;&lt;/a&gt;地图启动时显示标注气泡&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;[mapView selectAnnotation:pointAnntation1 animated:YES];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;设置标注样式&quot;&gt;&lt;a href=&quot;#设置标注样式&quot; class=&quot;headerlink&quot; title=&quot;设置标注样式&quot;&gt;&lt;/a&gt;设置标注样式&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id&amp;lt;MKAnnotation&amp;gt;)annotation{

static NSString * pinIdentifier = @&amp;quot;pin&amp;quot;;

MKPinAnnotationView * pintAnntation = (MKPinAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:pinIdentifier];

if(!pintAnntation){

        pintAnntation = [[MKPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:pinIdentifier];
        [pintAnntation setPinColor:MKPinAnnotationColorPurple];
        [pintAnntation setAnimatesDrop:YES];
        [pintAnntation setCanShowCallout:YES];
}

return pintAnntation;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;自定义标注视图&quot;&gt;&lt;a href=&quot;#自定义标注视图&quot; class=&quot;headerlink&quot; title=&quot;自定义标注视图&quot;&gt;&lt;/a&gt;自定义标注视图&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;创建annotation object,并实现MKAnnotation协议&lt;/li&gt;
&lt;li&gt;创建自定义标注视图，继承自MKAnnotationView&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
...............
CLLocationCoordinate2D coordinate2D = CLLocationCoordinate2DMake(39.936846, 116.503729);
CustomAnnotation * customAnnotation = [[CustomAnnotation alloc] initWithCoordinate2D:coordinate2D];
[customAnnotation setTitle:@&amp;quot;我的位置&amp;quot;];
[customAnnotation setSubTitle:@&amp;quot;具体说明&amp;quot;];
[mapView addAnnotation:customAnnotation];    
}


- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id&amp;lt;MKAnnotation&amp;gt;)annotation{
static NSString * customIdentifier = @&amp;quot;customView&amp;quot;;

CustomAnnotationView * customAnnotationView = (CustomAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:customIdentifier];
if(!customAnnotationView){
    customAnnotationView = [[CustomAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:customIdentifier];
    [customAnnotationView setImage:[UIImage imageNamed:@&amp;quot;an&amp;quot;]];
    }
    return customAnnotationView;    
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CustomAnnotation&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface CustomAnnotation : NSObject&amp;lt;MKAnnotation&amp;gt;{
CLLocationCoordinate2D coord;
}

@property (nonatomic, readonly) CLLocationCoordinate2D coord;

@property (nonatomic, copy) NSString * title;
@property (nonatomic, copy) NSString * subTitle;

- (instancetype)initWithCoordinate2D:(CLLocationCoordinate2D)coordinate2D;

@end

@implementation CustomAnnotation
@synthesize coord;
@synthesize title,subTitle;

- (instancetype)initWithCoordinate2D:(CLLocationCoordinate2D)coordinate2D{
self = [super init];
if(self){
    coord = coordinate2D;
}

return self;
}

- (CLLocationCoordinate2D)coordinate{
return coord;
}

- (NSString *)title{
return title;
}

- (NSString *)subtitle{
return subTitle;
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CustomAnnotationView&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface CustomAnnotationView : MKAnnotationView

@end

@interface CustomAnnotationView()

@property (nonatomic, strong) CustomAnnotation * customAnnotation;
@property (nonatomic, strong) UIView *infoView;

@end

@implementation CustomAnnotationView

- (instancetype)initWithAnnotation:(id&amp;lt;MKAnnotation&amp;gt;)annotation reuseIdentifier:(NSString *)reuseIdentifier{
self = [super initWithAnnotation:annotation reuseIdentifier:reuseIdentifier];
if(self){
    self.customAnnotation = annotation;
}

return self;
}

- (void)setSelected:(BOOL)selected animated:(BOOL)animated{
[super setSelected:selected animated:animated];
if(selected){
    self.infoView = [[UIView alloc] initWithFrame:CGRectMake(-(150-50)/2, -30, 150, 30)];
    [_infoView.layer setBorderColor:[UIColor blackColor].CGColor];
    [_infoView.layer setBorderWidth:1.f];
    [_infoView.layer setCornerRadius:5.f];
    [self.infoView setBackgroundColor:[UIColor whiteColor]];
    [self addSubview:self.infoView];

    UILabel * label = [[UILabel alloc] initWithFrame:_infoView.bounds];
    [label setFont:[UIFont systemFontOfSize:12]];
    [label setTextAlignment:NSTextAlignmentCenter];
    [label setText:[NSString stringWithFormat:@&amp;quot;%f %f&amp;quot;,_customAnnotation.coordinate.latitude,_customAnnotation.coordinate.longitude]];
    [_infoView addSubview:label];

    CGFloat scale = 0.001f;

    [_infoView setTransform:CGAffineTransformMake(scale, 0, 0, scale, 0, 0)];
    [UIView animateWithDuration:0.15 delay:0 options:UIViewAnimationOptionCurveEaseOut animations:^{
        CGFloat scale = 1.1f;
        [_infoView setTransform:CGAffineTransformMake(scale, 0, 0, scale, 0, 2)];
    } completion:^(BOOL finished) {
        [UIView animateWithDuration:0.1 delay:0 options:UIViewAnimationOptionCurveEaseOut animations:^{
            CGFloat scale = 0.9;
            [_infoView setTransform:CGAffineTransformMake(scale, 0, 0, scale, 0, -2)];
        } completion:^(BOOL finished) {
            [UIView animateWithDuration:0.075 delay:0 options:UIViewAnimationOptionCurveEaseInOut animations:^{
                CGFloat scale = 1.0f;
                [_infoView setTransform:CGAffineTransformMake(scale, 0, 0, scale, 0, 0)];
            } completion:^(BOOL finished) {}];
        }];
    }];


}else{
    [UIView animateWithDuration:0.2 animations:^{
        [_infoView setAlpha:0.1];
    } completion:^(BOOL finished) {
        [_infoView removeFromSuperview];
    }];
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;选中标注时执行&quot;&gt;&lt;a href=&quot;#选中标注时执行&quot; class=&quot;headerlink&quot; title=&quot;选中标注时执行&quot;&gt;&lt;/a&gt;选中标注时执行&lt;/h2&gt;&lt;p&gt;MKAnnotationView &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)setSelected:(BOOL)selected animated:(BOOL)animated{


}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;MKMapView代理方法讲解&quot;&gt;&lt;a href=&quot;#MKMapView代理方法讲解&quot; class=&quot;headerlink&quot; title=&quot;MKMapView代理方法讲解&quot;&gt;&lt;/a&gt;MKMapView代理方法讲解&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)mapViewWillStartLoadingMap:(MKMapView *)mapView{
    //地图将要载入执行
}

- (void)mapViewDidFinishLoadingMap:(MKMapView *)mapView{
    //地图载入完成以后执行
}

- (void)mapViewDidFailLoadingMap:(MKMapView *)mapView withError:(NSError *)error{
    //地图载入失败执行
    NSLog(@&amp;quot;error:%@&amp;quot;,[error description]);
}

- (void)mapView:(MKMapView *)mapView regionWillChangeAnimated:(BOOL)animated{
    //地图显示区域将要发生改变时执行
        UIAlertView * alertView = [[UIAlertView alloc] initWithTitle:@&amp;quot;提示&amp;quot; message:@&amp;quot;地图位置将要改变&amp;quot; delegate:nil cancelButtonTitle:nil otherButtonTitles:@&amp;quot;确定&amp;quot;, nil];
        [alertView show];
}

- (void)mapView:(MKMapView *)mapView regionDidChangeAnimated:(BOOL)animated{
    //地图显示区域改变以后执行
            UIAlertView * alertView = [[UIAlertView alloc] initWithTitle:@&amp;quot;提示&amp;quot; message:@&amp;quot;地图位置已经改变&amp;quot; delegate:nil cancelButtonTitle:nil otherButtonTitles:@&amp;quot;确定&amp;quot;, nil];
            [alertView show];

}

//添加标注时调用
- (void)mapView:(MKMapView *)mapView didAddAnnotationViews:(NSArray *)views{

}

//标注被选中时执行此方法
- (void)mapView:(MKMapView *)mapView didSelectAnnotationView:(MKAnnotationView *)view{

}

//标注失去焦点时执行
- (void)mapView:(MKMapView *)mapView didDeselectAnnotationView:(MKAnnotationView *)view{

}

//添加左右配件控件时才会调用
- (void)mapView:(MKMapView *)mapView annotationView:(MKAnnotationView *)view calloutAccessoryControlTapped:(UIControl *)control {

}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MapKit基础讲解&quot;&gt;&lt;a href=&quot;#MapKit基础讲解&quot; class=&quot;headerlink&quot; title=&quot;MapKit基础讲解&quot;&gt;&lt;/a&gt;MapKit基础讲解&lt;/h1&gt;&lt;p&gt;Map Kit（地图套件）提供了一个接口，可以将地图直接嵌入到自己的视图中。
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_MapKit" scheme="http://jackliu17.github.io/tags/iOS-MapKit/"/>
    
  </entry>
  
  <entry>
    <title>iOS推送通知流程</title>
    <link href="http://jackliu17.github.io/2016/06/07/iOS%E6%8E%A8%E9%80%81%E9%80%9A%E7%9F%A5%E6%B5%81%E7%A8%8B/"/>
    <id>http://jackliu17.github.io/2016/06/07/iOS推送通知流程/</id>
    <published>2016-06-07T08:46:28.000Z</published>
    <updated>2016-06-07T08:47:20.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_pushNotificationProcess.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_pushNotificationProcess.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目20-Swift实现PM2.5显示</title>
    <link href="http://jackliu17.github.io/2016/06/07/iOS%E9%A1%B9%E7%9B%AE20-Swift%E5%AE%9E%E7%8E%B0PM2-5%E6%98%BE%E7%A4%BA/"/>
    <id>http://jackliu17.github.io/2016/06/07/iOS项目20-Swift实现PM2-5显示/</id>
    <published>2016-06-07T08:34:45.000Z</published>
    <updated>2016-06-07T09:13:32.000Z</updated>
    
    <content type="html">&lt;pre&gt;&lt;code&gt;func loadPM25Data(){

msgLabel.text = &amp;quot;Loding...&amp;quot;

    NSURLConnection.sendAsynchronousRequest(NSURLRequest(URL: NSURL(string:&amp;quot;http://aqicn.org/publishingdata/json&amp;quot;)!), queue: NSOperationQueue.mainQueue()) { (resp:NSURLResponse?, data:NSData?, error:NSError?) in

        do {let jsonArr = try NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments)
        let firstData = (jsonArr as! NSArray).objectAtIndex(0)
        let pollutants = firstData.valueForKey(&amp;quot;pollutants&amp;quot;)
            let pm2_5 = (pollutants as! NSArray).objectAtIndex(0)
            let theValue = pm2_5.valueForKey(&amp;quot;value&amp;quot;)

            self.msgLabel.text = &amp;quot;PM2.5:\(theValue!)&amp;quot;


        }catch{

        print(&amp;quot;Hello&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;func loadPM25Data(){

msgLabel.text = &amp;quot;Loding...&amp;quot;

    NSURLConnection.sendAsynchronousRequest(NSURLRequest(URL: NSURL(
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目19-Swift实现天气预报</title>
    <link href="http://jackliu17.github.io/2016/06/07/iOS%E9%A1%B9%E7%9B%AE19-Swift%E5%AE%9E%E7%8E%B0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/"/>
    <id>http://jackliu17.github.io/2016/06/07/iOS项目19-Swift实现天气预报/</id>
    <published>2016-06-07T08:11:07.000Z</published>
    <updated>2016-06-07T08:13:02.000Z</updated>
    
    <content type="html">&lt;pre&gt;&lt;code&gt;import UIKit

class ViewController: UIViewController {

@IBOutlet var tv:UITextView?

@IBAction func btnPressed(sender:AnyObject){

    loadWeather()
}

override func viewDidLoad() {
    super.viewDidLoad()

     loadWeather()
}


func loadWeather(){

    let url = NSURL(string: &amp;quot;http://www.weather.com.cn/data/sk/101010100.html&amp;quot;)

    let weatherData = NSData(contentsOfURL: url!)

    do {

let json =  try NSJSONSerialization.JSONObjectWithData(weatherData!, options: NSJSONReadingOptions.AllowFragments) as! NSDictionary

        let weatherInfo = json.objectForKey(&amp;quot;weatherinfo&amp;quot;)
        let city = weatherInfo!.objectForKey(&amp;quot;city&amp;quot;)
        let temp = weatherInfo!.objectForKey(&amp;quot;temp&amp;quot;)
        let wind = weatherInfo!.objectForKey(&amp;quot;WD&amp;quot;)
        let ws : AnyObject! = weatherInfo!.objectForKey(&amp;quot;WS&amp;quot;)
        tv!.text = &amp;quot;城市：\(city)\n温度：\(temp)\n风：\(wind)\n风级：\(ws)&amp;quot;
    } catch {
        print(&amp;quot;Hello&amp;quot;)
    }
}
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;import UIKit

class ViewController: UIViewController {

@IBOutlet var tv:UITextView?

@IBAction func btnPressed(sender:AnyObject)
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-中介者</title>
    <link href="http://jackliu17.github.io/2016/06/06/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85/"/>
    <id>http://jackliu17.github.io/2016/06/06/iOS设计模式-中介者/</id>
    <published>2016-06-06T06:54:09.000Z</published>
    <updated>2016-06-07T03:38:25.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;中介模式&quot;&gt;&lt;a href=&quot;#中介模式&quot; class=&quot;headerlink&quot; title=&quot;中介模式&quot;&gt;&lt;/a&gt;中介模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;中介者模式：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。&lt;/li&gt;
&lt;li&gt;中介者模式解决的问题:解耦 / 降低复杂度，从混乱的网状结构变成线状 / 增加程序可维护性&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;情形1:&lt;/th&gt;
&lt;th&gt;情形2:&lt;/th&gt;
&lt;th&gt;情形3:&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;B:9500&lt;/td&gt;
&lt;td&gt;B:8000&lt;/td&gt;
&lt;td&gt;B:11000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D:9000&lt;/td&gt;
&lt;td&gt;D:8000&lt;/td&gt;
&lt;td&gt;D:11000 &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternMediator02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternMediator03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternMediator01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;AbstractMediator&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface AbstractMediator : NSObject &amp;lt;ColleagueDelegate&amp;gt;

@end

@implementation AbstractMediator

- (void)colleagueEvent:(AbstractColleague *)event {

}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;AbstractColleague&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@class AbstractColleague;

@protocol ColleagueDelegate &amp;lt;NSObject&amp;gt;

@optional

//colleague对象的交互
- (void)colleagueEvent:(AbstractColleague *)event;

@end

@interface AbstractColleague : NSObject

@property (nonatomic, weak) id &amp;lt;ColleagueDelegate&amp;gt; delegate;

@end
@implementation AbstractColleague

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;MVC与中介者&quot;&gt;&lt;a href=&quot;#MVC与中介者&quot; class=&quot;headerlink&quot; title=&quot;MVC与中介者&quot;&gt;&lt;/a&gt;MVC与中介者&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;MVC中的控制器viewController就相当于中介&lt;/li&gt;
&lt;li&gt;为何要使用中介者：解决复杂的交互问题，对象之间有大量的交互逻辑，彼此互相关联&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternMediator04.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designpatternMediator05.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Colleague&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Colleague : AbstractColleague

@property (nonatomic) CGFloat value;

- (void)changeValue:(CGFloat)value;

@end

@implementation Colleague

- (void)changeValue:(CGFloat)value {

self.value = value;

if (self.delegate &amp;amp;&amp;amp; [self.delegate respondsToSelector:@selector(colleagueEvent:)]) {

    [self.delegate colleagueEvent:self];
}
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;TypeOneMediator&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface TypeOneMediator : AbstractMediator

@property (nonatomic, strong) Colleague  *colleagueA;
@property (nonatomic, strong) Colleague  *colleagueB;
@property (nonatomic, strong) Colleague  *colleagueC;

- (NSDictionary *)values;

@end

@implementation TypeOneMediator

- (void)colleagueEvent:(AbstractColleague *)event {

if ([event isEqual:self.colleagueA]) {

    self.colleagueB.value = self.colleagueA.value * 2;
    self.colleagueC.value = self.colleagueA.value * 4;

} else if ([event isEqual:self.colleagueB]) {

    self.colleagueA.value = self.colleagueB.value / 2.f;
    self.colleagueC.value = self.colleagueB.value * 2.f;

} else {

    self.colleagueA.value = self.colleagueC.value / 4.f;
    self.colleagueB.value = self.colleagueC.value / 2.f;
}
}

- (NSDictionary *)values {

return @{@&amp;quot;A&amp;quot; : @(self.colleagueA.value),
         @&amp;quot;B&amp;quot; : @(self.colleagueB.value),
         @&amp;quot;C&amp;quot; : @(self.colleagueC.value)};
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()
@property (nonatomic, strong) TypeTwoMediator  *mediator;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

self.mediator = [TypeTwoMediator new];

Colleague *colleagueA = [Colleague new];
Colleague *colleagueB = [Colleague new];
Colleague *colleagueC = [Colleague new];

self.mediator.colleagueA = colleagueA;
self.mediator.colleagueB = colleagueB;
self.mediator.colleagueC = colleagueC;

colleagueA.delegate = self.mediator;
colleagueB.delegate = self.mediator;
colleagueC.delegate = self.mediator;

[colleagueA changeValue:2.f];
NSLog(@&amp;quot;%@&amp;quot;, [self.mediator values]);

[colleagueA changeValue:1.f];
NSLog(@&amp;quot;%@&amp;quot;, [self.mediator values]);

[colleagueA changeValue:3.f];
NSLog(@&amp;quot;%@&amp;quot;, [self.mediator values]);
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;中介模式&quot;&gt;&lt;a href=&quot;#中介模式&quot; class=&quot;headerlink&quot; title=&quot;中介模式&quot;&gt;&lt;/a&gt;中介模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;中介者模式：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-责任链</title>
    <link href="http://jackliu17.github.io/2016/06/06/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE/"/>
    <id>http://jackliu17.github.io/2016/06/06/iOS设计模式-责任链/</id>
    <published>2016-06-06T03:33:31.000Z</published>
    <updated>2016-06-06T06:44:52.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;快递分拣中心&quot;&gt;&lt;a href=&quot;#快递分拣中心&quot; class=&quot;headerlink&quot; title=&quot;快递分拣中心&quot;&gt;&lt;/a&gt;快递分拣中心&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;传送带 —&amp;gt; 线性表&lt;/li&gt;
&lt;li&gt;包裹   —&amp;gt; 符合某种规范的物品&lt;/li&gt;
&lt;li&gt;货物种类 —&amp;gt; 特定种类的货物&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;特点:提升效率&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternChains01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;责任链模式&quot;&gt;&lt;a href=&quot;#责任链模式&quot; class=&quot;headerlink&quot; title=&quot;责任链模式&quot;&gt;&lt;/a&gt;责任链模式&lt;/h1&gt;&lt;p&gt;定义:责任链模式是一种设计模式。在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。&lt;/p&gt;
&lt;p&gt;步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将责任抽象成对象&lt;/li&gt;
&lt;li&gt;将责任对象链接起来&lt;/li&gt;
&lt;li&gt;处理输入的事件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternChains02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;ChainProtocol&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;protocol ChainProtocol &amp;lt;NSObject&amp;gt;

//设置继任者
- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor;

//获取继任者
- (id &amp;lt;ChainProtocol&amp;gt;)successor;

//处理请求
- (void)handleRequest:(id)request;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;对输入文本进行类别检测&quot;&gt;&lt;a href=&quot;#对输入文本进行类别检测&quot; class=&quot;headerlink&quot; title=&quot;对输入文本进行类别检测&quot;&gt;&lt;/a&gt;对输入文本进行类别检测&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;职能分解,有电话号码检测，邮箱检测，用户名检测。类似不同种类的包裹&lt;/li&gt;
&lt;li&gt;设定共有的接口。比如不同种类的产品都能装入一个纸箱&lt;/li&gt;
&lt;li&gt;严格说来还要设定一个尾节点，处理什么都不是的情况&lt;/li&gt;
&lt;li&gt;如果用if else的话，就不能进行拆解&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternChains03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;ChainProtocol&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol ChainProtocol &amp;lt;NSObject&amp;gt;
- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor;
- (id &amp;lt;ChainProtocol&amp;gt;)successor;
- (void)handleRequest:(id)request;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;EmailChain&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface EmailChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface EmailChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation EmailChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

NSString *string = request;

BOOL isMatch = [string isMatch:RX(@&amp;quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}&amp;quot;)];
if (isMatch == NO) {

    [self.nextSuccessor handleRequest:string];

} else {

    NSLog(@&amp;quot;%@ 是邮箱&amp;quot;, string);
}
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PhoneNumChain&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface PhoneNumChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface PhoneNumChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation PhoneNumChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

NSString *string = request;

BOOL isMatch = [string isMatch:RX(@&amp;quot;^((13[0-9])|(15[^4,\\D])|(18[0,0-9]))\\d{8}$&amp;quot;)];
if (isMatch == NO) {

    [self.nextSuccessor handleRequest:string];

} else {

    NSLog(@&amp;quot;%@ 是电话号码&amp;quot;, string);
}
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;UserNameChain&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface UserNameChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface UserNameChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation UserNameChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

NSString *string = request;

BOOL isMatch = [string isMatch:RX(@&amp;quot;^[A-Za-z0-9]{6,20}+$&amp;quot;)];
if (isMatch == NO) {

    [self.nextSuccessor handleRequest:string];

} else {

    NSLog(@&amp;quot;%@ 是用户名&amp;quot;, string);
}
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;HeadChain&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface HeadChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface HeadChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation HeadChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

    self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

    return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

    [self.nextSuccessor handleRequest:request];
}


@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()
@property (nonatomic, strong) HeadChain      *head;
@property (nonatomic, strong) PhoneNumChain  *phoneNum;
@property (nonatomic, strong) EmailChain     *email;
@property (nonatomic, strong) UserNameChain  *userName;
@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    // 创建责任对象
    self.head     = [HeadChain new];
    self.phoneNum = [PhoneNumChain new];
    self.email    = [EmailChain new];
    self.userName = [UserNameChain new];

    // 链接责任链对象
    self.head.successor     = self.phoneNum;
    self.phoneNum.successor = self.email;
    self.email.successor    = self.userName;

    // 处理请求
    [self.head handleRequest:@&amp;quot;349323YX&amp;quot;];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;对输入文本进行”全类别”检测&quot;&gt;&lt;a href=&quot;#对输入文本进行”全类别”检测&quot; class=&quot;headerlink&quot; title=&quot;对输入文本进行”全类别”检测&quot;&gt;&lt;/a&gt;对输入文本进行”全类别”检测&lt;/h1&gt;&lt;p&gt;ChainProtocol&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol ChainProtocol &amp;lt;NSObject&amp;gt;
- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor;
- (id &amp;lt;ChainProtocol&amp;gt;)successor;
- (void)handleRequest:(id)request;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;HeadChain &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface HeadChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface HeadChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation HeadChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

[self.nextSuccessor handleRequest:request];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;RequestEvent&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface RequestEvent : NSObject

@property (nonatomic, strong) NSString            *string;
@property (nonatomic, strong) NSMutableDictionary *infomation;

@end

@implementation RequestEvent

- (instancetype)init {

    self = [super init];

    if (self) {

        self.infomation = [NSMutableDictionary dictionary];
    }

    return self;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;EmailChain    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface EmailChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface EmailChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation EmailChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

RequestEvent *event = request;

BOOL isMatch = [event.string isMatch:RX(@&amp;quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}&amp;quot;)];
if (isMatch == NO) {

    event.infomation[@&amp;quot;Email&amp;quot;] = @(NO);

} else {

    event.infomation[@&amp;quot;Email&amp;quot;] = @(YES);
}

[self.nextSuccessor handleRequest:request];
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PhoneNumChain&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface PhoneNumChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface PhoneNumChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation PhoneNumChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

RequestEvent *event = request;

BOOL isMatch = [event.string isMatch:RX(@&amp;quot;^((13[0-9])|(15[^4,\\D])|(18[0,0-9]))\\d{8}$&amp;quot;)];
if (isMatch == NO) {

    event.infomation[@&amp;quot;PhoneNumber&amp;quot;] = @(NO);

} else {

    event.infomation[@&amp;quot;PhoneNumber&amp;quot;] = @(YES);
}

[self.nextSuccessor handleRequest:request];
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;UserNameChain&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface UserNameChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface UserNameChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation UserNameChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

RequestEvent *event = request;

BOOL isMatch = [event.string isMatch:RX(@&amp;quot;^[A-Za-z0-9]{6,20}+$&amp;quot;)];
if (isMatch == NO) {

    event.infomation[@&amp;quot;UserName&amp;quot;] = @(NO);

} else {

    event.infomation[@&amp;quot;UserName&amp;quot;] = @(YES);
}

[self.nextSuccessor handleRequest:request];
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()
@property (nonatomic, strong) HeadChain      *head;
@property (nonatomic, strong) PhoneNumChain  *phoneNum;
@property (nonatomic, strong) EmailChain     *email;
@property (nonatomic, strong) UserNameChain  *userName;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

// 创建责任对象
self.head     = [HeadChain new];
self.phoneNum = [PhoneNumChain new];
self.email    = [EmailChain new];
self.userName = [UserNameChain new];

// 链接责任链对象
self.head.successor     = self.phoneNum;
self.phoneNum.successor = self.email;
self.email.successor    = self.userName;

RequestEvent *event = [RequestEvent new];
event.string        = @&amp;quot;349323YX@qq.com&amp;quot;;

// 处理请求
[self.head handleRequest:event];

NSLog(@&amp;quot;%@&amp;quot;, event.infomation);

}
@end
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;快递分拣中心&quot;&gt;&lt;a href=&quot;#快递分拣中心&quot; class=&quot;headerlink&quot; title=&quot;快递分拣中心&quot;&gt;&lt;/a&gt;快递分拣中心&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;传送带 —&amp;gt; 线性表&lt;/li&gt;
&lt;li&gt;包裹   —&amp;gt; 符合某种规范的物品&lt;/li&gt;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-模板</title>
    <link href="http://jackliu17.github.io/2016/06/05/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF/"/>
    <id>http://jackliu17.github.io/2016/06/05/iOS设计模式-模板/</id>
    <published>2016-06-05T06:12:40.000Z</published>
    <updated>2016-06-05T08:38:53.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;请客吃饭与模板模式&quot;&gt;&lt;a href=&quot;#请客吃饭与模板模式&quot; class=&quot;headerlink&quot; title=&quot;请客吃饭与模板模式&quot;&gt;&lt;/a&gt;请客吃饭与模板模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;张三李四王五，都实现了请客吃饭的流程，但具体实现是不一样的方法，比如有的用QQ，有的用手机        &lt;/li&gt;
&lt;li&gt;联系朋友，预订酒店，点菜，虽然有差异，但本质上都是按照这三个流程进行，&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternTemplate01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;模板模式特点&quot;&gt;&lt;a href=&quot;#模板模式特点&quot; class=&quot;headerlink&quot; title=&quot;模板模式特点&quot;&gt;&lt;/a&gt;模板模式特点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;过程殊途同归 &lt;/li&gt;
&lt;li&gt;将共同行为/流程抽象成算法的骨架&lt;/li&gt;
&lt;li&gt;利用OO的多态，让子类继承重写&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternTemplate02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Cocoa-框架中用到的模板模式-Override&quot;&gt;&lt;a href=&quot;#Cocoa-框架中用到的模板模式-Override&quot; class=&quot;headerlink&quot; title=&quot;Cocoa 框架中用到的模板模式(Override)&quot;&gt;&lt;/a&gt;Cocoa 框架中用到的模板模式(Override)&lt;/h1&gt;&lt;p&gt;CustomCell&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface CustomCell : UITableViewCell

- (void)setupCell;
- (void)buildSubView;
@end
----------------------------------------
@implementation CustomCell

- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {

if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]) {

    [self setupCell];

    [self buildSubView];
}

return self;
}

- (void)setupCell {

}

- (void)buildSubView {

}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ModelCell&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ModelCell : CustomCell

@end

@implementation ModelCell

- (void)setupCell {

// setup cell.
}

- (void)buildSubView {

// build subView.
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;游戏从开始到结束的各个阶段详解&quot;&gt;&lt;a href=&quot;#游戏从开始到结束的各个阶段详解&quot; class=&quot;headerlink&quot; title=&quot;游戏从开始到结束的各个阶段详解&quot;&gt;&lt;/a&gt;游戏从开始到结束的各个阶段详解&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;各个阶段的分解&lt;/li&gt;
&lt;li&gt;将分解出来的阶段模板化    &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Game&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Game : NSObject
- (void)initGame;
- (void)pause;
- (void)save;
- (void)exitGame;
- (void)startPlay;
@end

@implementation Game

- (void)initGame {
}

- (void)pause {
}

- (void)save {
}

- (void)exitGame {
}

- (void)startPlay {
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Chess&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Chess : Game

@end

@implementation Chess

- (void)initGame {

NSLog(@&amp;quot;init chess game.&amp;quot;);
}

- (void)pause {

NSLog(@&amp;quot;pasue chess game.&amp;quot;);
}

- (void)save {

NSLog(@&amp;quot;save chess game.&amp;quot;);
}

- (void)exitGame {

NSLog(@&amp;quot;exit chess game.&amp;quot;);
}

- (void)startPlay {

NSLog(@&amp;quot;play chess game.&amp;quot;);
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Football&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Football : Game

@end
@implementation Football

- (void)initGame {

NSLog(@&amp;quot;init football game.&amp;quot;);
}

- (void)pause {

NSLog(@&amp;quot;pasue football game.&amp;quot;);
}

- (void)save {

NSLog(@&amp;quot;save football game.&amp;quot;);
}

- (void)exitGame {

NSLog(@&amp;quot;exit football game.&amp;quot;);
}

- (void)startPlay {

NSLog(@&amp;quot;play football game.&amp;quot;);
}

@end
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;请客吃饭与模板模式&quot;&gt;&lt;a href=&quot;#请客吃饭与模板模式&quot; class=&quot;headerlink&quot; title=&quot;请客吃饭与模板模式&quot;&gt;&lt;/a&gt;请客吃饭与模板模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;张三李四王五，都实现了请客吃饭的流程，但具体实现是不一样的方法，比如有的
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-享元</title>
    <link href="http://jackliu17.github.io/2016/06/05/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83/"/>
    <id>http://jackliu17.github.io/2016/06/05/iOS设计模式-享元/</id>
    <published>2016-06-05T05:43:19.000Z</published>
    <updated>2016-06-05T05:45:09.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h1&gt;&lt;p&gt;交叉的圆环，提取出公共部分进行复用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义:享元模式（英语：Flyweight Pattern）是一种软件设计模式。它使用共享物件，用来尽可能减少内存使用量以及分享资讯给尽可能多的相似物件；它适合用于只是因重复而导致使用无法令人接受的大量内存的大量物件。通常物件中的部分状态是可以分享。常见做法是把它们放在外部数据结构，当需要使用时再将它们传递给享元。&lt;/li&gt;
&lt;li&gt;步骤: 共享物件的提取 —&amp;gt; 管理共享对象 —&amp;gt; 获取共享对象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternFlyweight02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternFlyweight01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()

@property(nonatomic,strong) NSMutableDictionary *flyweightFactory;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

self.flyweightFactory = [NSMutableDictionary dictionary];

[self.flyweightFactory setObject:[Model new] forKey:@&amp;quot;A&amp;quot;];

//方式一: 直接提取
//    NSLog(@&amp;quot;%@&amp;quot;,self.flyweightFactory[@&amp;quot;A&amp;quot;]);
//    NSLog(@&amp;quot;%@&amp;quot;,self.flyweightFactory[@&amp;quot;A&amp;quot;]);


//方式二: 享元模式(有,则返回，无则创建返回)
NSLog(@&amp;quot;%@&amp;quot;,[self ModelWithName:@&amp;quot;A&amp;quot;]);
NSLog(@&amp;quot;%@&amp;quot;,[self ModelWithName:@&amp;quot;A&amp;quot;]);
}

- (id)ModelWithName:(NSString *)name {

if (self.flyweightFactory[name]==nil) {

    self.flyweightFactory[name] = [Model new];

    return self.flyweightFactory[name];

}else{

    return self.flyweightFactory[name];

}       
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;咖啡厅案例&quot;&gt;&lt;a href=&quot;#咖啡厅案例&quot; class=&quot;headerlink&quot; title=&quot;咖啡厅案例&quot;&gt;&lt;/a&gt;咖啡厅案例&lt;/h1&gt;&lt;p&gt;分析创建咖啡菜单，相当于一个池子，将所有的享元咖啡存储在里面&lt;/p&gt;
&lt;p&gt;共享同种类的对象,三种对象:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;咖啡店&lt;/li&gt;
&lt;li&gt;咖啡table&lt;/li&gt;
&lt;li&gt;咖啡清单&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternFlyweight03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternFlyweight04.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;CoffeeFlavor&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface CoffeeFlavor : NSObject
@property (nonatomic, strong) NSString *flavor;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Menu (相当于一个池子，将所有的享元咖啡存储在里面)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Menu : NSObject

//获取指定味道的咖啡（如果没有则创建）
- (CoffeeFlavor *)lookupWithFlavor:(NSString *)flavor;
@end

@interface Menu ()
@property (nonatomic, strong) NSMutableDictionary &amp;lt;NSString *, CoffeeFlavor *&amp;gt;  *flavors;
@end

@implementation Menu

- (instancetype)init {   
    self = [super init];  
    if (self) {  
        self.flavors = [NSMutableDictionary dictionary];
    }   
    return self;
}

- (CoffeeFlavor *)lookupWithFlavor:(NSString *)flavor {
    NSParameterAssert(flavor);
    if ([self.flavors objectForKey:flavor] == nil) {       
        CoffeeFlavor *coffeeFlavor = [[CoffeeFlavor alloc] init];
        coffeeFlavor.flavor        = flavor;     
        self.flavors[flavor] = coffeeFlavor;
    }  
    return [self.flavors objectForKey:flavor];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CoffeeShop&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface CoffeeShop : NSObject
- (void)takeOrder:(NSString *)flavor table:(int)table;
- (void)serve;
@end

@interface CoffeeShop ()

@property (nonatomic, strong) NSMutableDictionary &amp;lt;NSNumber *, CoffeeFlavor *&amp;gt;  *orders;
@property (nonatomic, strong) Menu *menu;

@end

@implementation CoffeeShop

- (instancetype)init {  
    self = [super init];
    if (self) { 
        self.orders = [NSMutableDictionary dictionary];
        self.menu   = [[Menu alloc] init];
    }
    return self;
}

- (void)takeOrder:(NSString *)flavor table:(int)table {
    [self.orders setObject:[self.menu lookupWithFlavor:flavor]
                    forKey:@(table)];
}

- (void)serve {
    NSArray *allKeys = self.orders.allKeys;
    for (id key in allKeys) {  
        NSLog(@&amp;quot;[%@] Serving %@ to table %@&amp;quot;, [self.orders objectForKey:key], [self.orders objectForKey:key].flavor, key);
    }
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()
@property (nonatomic, strong) CoffeeShop *coffeeShop;
@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // 创建咖啡厅
    self.coffeeShop = [[CoffeeShop alloc] init];
    // 相同类型的数据公用
    [self.coffeeShop takeOrder:@&amp;quot;Cappuccino&amp;quot; table:1];
    [self.coffeeShop takeOrder:@&amp;quot;Frappe&amp;quot;     table:10];
    [self.coffeeShop takeOrder:@&amp;quot;Cappuccino&amp;quot; table:6];
    [self.coffeeShop takeOrder:@&amp;quot;Espresso&amp;quot;   table:9];
    [self.coffeeShop takeOrder:@&amp;quot;Frappe&amp;quot;     table:8];

    // 开始服务
    [self.coffeeShop serve];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;字典属性&quot;&gt;&lt;a href=&quot;#字典属性&quot; class=&quot;headerlink&quot; title=&quot;字典属性&quot;&gt;&lt;/a&gt;字典属性&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;@property (nonatomic, strong) NSMutableDictionary &amp;lt;NSString *, CoffeeFlavor *&amp;gt;  *flavors;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h1&gt;&lt;p&gt;交叉的圆环，提取出公共部分进行复用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义:享元模式（英语：Flyweight Pattern）是
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-迭代器</title>
    <link href="http://jackliu17.github.io/2016/06/05/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://jackliu17.github.io/2016/06/05/iOS设计模式-迭代器/</id>
    <published>2016-06-05T01:10:44.000Z</published>
    <updated>2016-06-05T01:14:00.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;定义:线性表中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的&lt;/li&gt;
&lt;li&gt;种类:链表，栈，队列&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternIterator02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternIterator03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;单链表&quot;&gt;&lt;a href=&quot;#单链表&quot; class=&quot;headerlink&quot; title=&quot;单链表&quot;&gt;&lt;/a&gt;单链表&lt;/h1&gt;&lt;p&gt;Node&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Node : NSObject
//指向下一个节点
@property (nonatomic, strong) Node  *nextNode;
//节点挂载的对象
@property (nonatomic, strong) id     item;
//便利构造器
+ (instancetype)nodeWithItem:(id)item;
@end
---------------------------------------------------
@implementation Node

+ (instancetype)nodeWithItem:(id)item {

Node *node = [[[self class] alloc] init];
node.item  = item;

return node;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;LinkedList&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface LinkedList : NSObject

//头节点
@property (nonatomic, strong, readonly) Node *headNode;

//有几个节点

@property (nonatomic, readonly) NSInteger  numberOfNodes;

//节点挂载的对象
- (void)addItem:(id)item;

@end
----------------------------------------------------------

@interface LinkedList ()

@property (nonatomic, strong) Node       *headNode;
@property (nonatomic)         NSInteger   numberOfNodes;

@end

@implementation LinkedList

- (void)addItem:(id)item {

if (self.headNode == nil) {

    // 创建头结点
    self.headNode = [Node nodeWithItem:item];

} else {

    [self addItem:item node:self.headNode];
}

self.numberOfNodes++;
}

#pragma mark - 私有方法
- (void)addItem:(id)item node:(Node *)node {

if (node.nextNode == nil) {

    node.nextNode = [Node nodeWithItem:item];

} else {

    [self addItem:item node:node.nextNode];
}
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;系统迭代器-NSEnumerator&quot;&gt;&lt;a href=&quot;#系统迭代器-NSEnumerator&quot; class=&quot;headerlink&quot; title=&quot;系统迭代器: NSEnumerator&quot;&gt;&lt;/a&gt;系统迭代器: NSEnumerator&lt;/h1&gt;&lt;p&gt;迭代器模式（Iterator），提供一种方法顺序访问一个聚合对象中的各种元素，而又不暴露该对象的内部表示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternIter04.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 创建集合对象, 可以是数组，字典，集合等..
NSArray *datas = @[@&amp;quot;A&amp;quot;, @&amp;quot;B&amp;quot;, @&amp;quot;C&amp;quot;, @&amp;quot;D&amp;quot;];

// 从集合对象创建迭代器
NSEnumerator *iterator = [datas objectEnumerator];

// 从集合对象中访问元素, 头元素已经实现了空实现
id arrayObj = nil;
while (arrayObj = [iterator nextObject]) {
    NSLog(@&amp;quot;%@&amp;quot;, arrayObj);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;迭代器模式&quot;&gt;&lt;a href=&quot;#迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式&quot;&gt;&lt;/a&gt;迭代器模式&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternIterator01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;LinkedList:头元素必须已经实现了空实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (instancetype)init{

self = [super init];
if (self) {

    self.headNode = [Node new];
}

return self;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;IteratorProtocol&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol IteratorProtocol &amp;lt;NSObject&amp;gt;

@required
//下一个对象
- (id)nextObject;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;LinkedListIterator&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface LinkedListIterator : NSObject &amp;lt;IteratorProtocol&amp;gt;
+ (instancetype)linkedListIteratorWithLinkedList:(LinkedList *)linkedList;

@end

@interface LinkedListIterator ()

@property (nonatomic, strong) LinkedList *linkedList;
@property (nonatomic, strong) Node       *currentNode;

@end

@implementation LinkedListIterator

+ (instancetype)linkedListIteratorWithLinkedList:(LinkedList *)linkedList {

LinkedListIterator *linkedListIterator = [LinkedListIterator new];
linkedListIterator.linkedList  = linkedList;
linkedListIterator.currentNode = linkedList.headNode;    
return linkedListIterator;
}

- (id)nextObject {
self.currentNode = self.currentNode.nextNode;
return self.currentNode;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()
@property (nonatomic, strong) LinkedList *list;
@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

// 创建集合对象
self.list = [[LinkedList alloc] init];
[self.list addItem:@&amp;quot;A&amp;quot;];
[self.list addItem:@&amp;quot;B&amp;quot;];
[self.list addItem:@&amp;quot;C&amp;quot;];
[self.list addItem:@&amp;quot;D&amp;quot;];

// 从集合对象创建迭代器
LinkedListIterator *linkedIterator = [LinkedListIterator linkedListIteratorWithLinkedList:self.list];

// 从集合对象中访问元素
Node *node = nil;
while (node = [linkedIterator nextObject]) {    
    NSLog(@&amp;quot;%@&amp;quot;, node.item);
}

}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;实现组合对象的迭代器&quot;&gt;&lt;a href=&quot;#实现组合对象的迭代器&quot; class=&quot;headerlink&quot; title=&quot;实现组合对象的迭代器&quot;&gt;&lt;/a&gt;实现组合对象的迭代器&lt;/h1&gt;&lt;p&gt;Node&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Node : NSObject
@property (nonatomic, strong) Node  *nextNode;

//节点挂载的对象, 注意这里是weak，因为customView已经持有那些对象了
@property (nonatomic, weak)   id     item;

+ (instancetype)nodeWithItem:(id)item;
@end

--------------------------------------------

@implementation Node

+ (instancetype)nodeWithItem:(id)item {

    Node *node = [[[self class] alloc] init];
    node.item  = item;

    return node;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;LinkedList    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface LinkedList : NSObject
@property (nonatomic, strong, readonly) Node *headNode;
@property (nonatomic, readonly) NSInteger  numberOfNodes;
- (void)addItem:(id)item;
@end

@interface LinkedList ()
@property (nonatomic, strong) Node       *headNode;
@property (nonatomic)         NSInteger   numberOfNodes;
@end

@implementation LinkedList

- (instancetype)init{

self = [super init];
if (self) {

    self.headNode = [Node new];
}

return self;
}

- (void)addItem:(id)item {

if (self.headNode == nil) {

    // 创建头结点
    self.headNode = [Node nodeWithItem:item];

} else {

    [self addItem:item node:self.headNode];
}

self.numberOfNodes++;
}

#pragma mark - 私有方法
- (void)addItem:(id)item node:(Node *)node {

if (node.nextNode == nil) {

    node.nextNode = [Node nodeWithItem:item];

} else {

    [self addItem:item node:node.nextNode];
}
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;IteratorProtocol&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol IteratorProtocol &amp;lt;NSObject&amp;gt;

- (id)nextObject;
- (void)resetIterator;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CustomView&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface CustomView : UIView &amp;lt;IteratorProtocol&amp;gt;

@end

@interface CustomView ()
@property (nonatomic, strong) UIButton    *button;
@property (nonatomic, strong) UILabel     *label;
@property (nonatomic, strong) UITextField *field;
@property (nonatomic, strong) LinkedList  *list;
@property (nonatomic, strong) Node        *currentNode;

@end

@implementation CustomView

- (instancetype)initWithFrame:(CGRect)frame{

    self = [super initWithFrame:frame];
    if (self) {

        self.button = [[UIButton alloc] initWithFrame:self.bounds];
        self.label  = [[UILabel alloc] initWithFrame:self.bounds];
        self.field  = [[UITextField alloc] initWithFrame:self.bounds];

        [self addSubview:self.button];
        [self addSubview:self.label];
        [self addSubview:self.field];

        self.list = [[LinkedList alloc] init];
        [self.list addItem:self.button];
        [self.list addItem:self.label];
        [self.list addItem:self.field];

        self.currentNode = self.list.headNode;
    }

    return self;
}

- (id)nextObject {

    self.currentNode = self.currentNode.nextNode;
    return self.currentNode;
}

- (void)resetIterator {

    self.currentNode = self.list.headNode;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

CustomView *customView = [[CustomView alloc] initWithFrame:self.view.bounds];

Node *node = nil;

[customView resetIterator];
while (node = [customView nextObject]) {

    NSLog(@&amp;quot;%@&amp;quot;, node.item);
}

[customView resetIterator];
while (node = [customView nextObject]) {

    NSLog(@&amp;quot;%@&amp;quot;, node.item);
}

}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;最小知识原则&quot;&gt;&lt;a href=&quot;#最小知识原则&quot; class=&quot;headerlink&quot; title=&quot;最小知识原则&quot;&gt;&lt;/a&gt;最小知识原则&lt;/h1&gt;&lt;p&gt;让使用者不用了解过多的细节，暴露在.h的文件越少越好，如果可以写在.m里最好&lt;/p&gt;
&lt;h1 id=&quot;迭代器筛选&quot;&gt;&lt;a href=&quot;#迭代器筛选&quot; class=&quot;headerlink&quot; title=&quot;迭代器筛选&quot;&gt;&lt;/a&gt;迭代器筛选&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;[customView resetIterator];
while (node = [customView nextObject]) {

    NSLog(@&amp;quot;%@&amp;quot;, node.item);

    if ([node.item isKindOfClass:[UIButton class]]){

    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;定义:线性表中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的&lt;/li&gt;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-组合</title>
    <link href="http://jackliu17.github.io/2016/06/04/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88/"/>
    <id>http://jackliu17.github.io/2016/06/04/iOS设计模式-组合/</id>
    <published>2016-06-04T07:56:46.000Z</published>
    <updated>2016-06-04T08:01:22.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;树形结构&quot;&gt;&lt;a href=&quot;#树形结构&quot; class=&quot;headerlink&quot; title=&quot;树形结构&quot;&gt;&lt;/a&gt;树形结构&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;层次嵌套&lt;/li&gt;
&lt;li&gt;外层和内层具有相似的结构&lt;/li&gt;
&lt;li&gt;可以递归的表示&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternComposite01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternComposite02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;简易的二叉树&quot;&gt;&lt;a href=&quot;#简易的二叉树&quot; class=&quot;headerlink&quot; title=&quot;简易的二叉树&quot;&gt;&lt;/a&gt;简易的二叉树&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternComposite04.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Node&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Node : NSObject

@property (nonatomic, strong) NSString *nodeName;
@property (nonatomic, strong) Node *leftNode;
@property (nonatomic, strong) Node *rightNode;
+ (instancetype)nodeWithName:(NSString *)nodeName;

@implementation Node
+ (instancetype)nodeWithName:(NSString *)nodeName {

//这里用self,因为它可能会被子类继承
Node *node    = [[[self class] alloc] init];
node.nodeName = nodeName;

return node;
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()

@property (nonatomic, strong) Node *rootNode;
@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

self.rootNode = [Node nodeWithName:@&amp;quot;A&amp;quot;];

// 插入节点
[self insertNodeTree:self.rootNode node:[Node nodeWithName:@&amp;quot;B&amp;quot;]];
[self insertNodeTree:self.rootNode node:[Node nodeWithName:@&amp;quot;C&amp;quot;]];
[self insertNodeTree:self.rootNode node:[Node nodeWithName:@&amp;quot;D&amp;quot;]];
[self insertNodeTree:self.rootNode node:[Node nodeWithName:@&amp;quot;E&amp;quot;]];
[self insertNodeTree:self.rootNode node:[Node nodeWithName:@&amp;quot;F&amp;quot;]];

// 遍历二叉树
[self treeInfomationWithNode:self.rootNode];
}


//往根节点上插入节点

- (void)insertNodeTree:(Node *)tree node:(Node *)node {

if (tree.leftNode == nil) {
    tree.leftNode = node;
    return;
}

if (tree.rightNode == nil) {
    tree.rightNode = node;
    return;
}

[self insertNodeTree:tree.leftNode node:node];
}

// 遍历二叉树
- (void)treeInfomationWithNode:(Node *)node {

if (node.leftNode) {
    [self treeInfomationWithNode:node.leftNode];
}

NSLog(@&amp;quot;%@&amp;quot;, node.nodeName);

if (node.rightNode) {
    [self treeInfomationWithNode:node.rightNode];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;#组合模式&quot; class=&quot;headerlink&quot; title=&quot;组合模式&quot;&gt;&lt;/a&gt;组合模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;组合模式，将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。&lt;/li&gt;
&lt;li&gt;掌握组合模式的重点是要理解清楚 “部分/整体” 还有 ”单个对象“ 与 “组合对象” 的含义。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternComposite03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternComposite05.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Node &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Node : NSObject

@property (nonatomic, strong) NSString *nodeName;

//便利构造器
+ (instancetype)nodeWithNodeName:(NSString *)nodeName;

//子节点集合
@property (nonatomic, strong, readonly) NSMutableArray &amp;lt;Node *&amp;gt;  *childNodes;

//添加子节点
- (void)addNode:(Node *)node;

//删除子节点
- (void)removeNode:(Node *)node;

//获取子节点
- (Node *)nodeAtIndex:(NSInteger)index;

//打印Node
- (void)operation;
@end

//------------------------------------------------------------------------
@interface Node ()
@property (nonatomic, strong) NSMutableArray &amp;lt;Node *&amp;gt;  *childNodes;
@end

@implementation Node

- (instancetype)init {
self = [super init];
if (self) {  
    self.childNodes = [NSMutableArray array];
}
return self;
}

+ (instancetype)nodeWithNodeName:(NSString *)nodeName {
Node *node    = [[[self class] alloc] init];
node.nodeName = nodeName;
return node;
}

- (void)addNode:(Node *)node {
[self.childNodes addObject:node];
}

- (void)removeNode:(Node *)node {
[self.childNodes removeObject:node];
}

- (Node *)nodeAtIndex:(NSInteger)index {
if (index &amp;gt;= self.childNodes.count) {     
    return nil;  
} else {
    return self.childNodes[index];
}
}

- (void)operation {
NSLog(@&amp;quot;nodeName --&amp;gt; %@&amp;quot;, self.nodeName);
}

- (NSString *)description {
return [NSString stringWithFormat:@&amp;quot;[Node] - %@&amp;quot;, self.nodeName];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()
@property (nonatomic, strong) Node  *rootNode;
@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

// 创建根节点
self.rootNode = [Node nodeWithNodeName:@&amp;quot;A&amp;quot;];

// 创建第一级子节点(A -&amp;gt; B,C,D)
[self.rootNode addNode:[Node nodeWithNodeName:@&amp;quot;B&amp;quot;]];
Node *c = [Node nodeWithNodeName:@&amp;quot;C&amp;quot;];
[self.rootNode addNode:c];
[self.rootNode addNode:[Node nodeWithNodeName:@&amp;quot;D&amp;quot;]];

// 创建第二级子节点(C -&amp;gt; E,F)
[c addNode:[Node nodeWithNodeName:@&amp;quot;E&amp;quot;]];
[c addNode:[Node nodeWithNodeName:@&amp;quot;F&amp;quot;]];

NSLog(@&amp;quot;%@&amp;quot;, self.rootNode.childNodes);
NSLog(@&amp;quot;%@&amp;quot;, c.childNodes);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;编写文件夹系统&quot;&gt;&lt;a href=&quot;#编写文件夹系统&quot; class=&quot;headerlink&quot; title=&quot;编写文件夹系统&quot;&gt;&lt;/a&gt;编写文件夹系统&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternComposite06.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;File&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef enum : NSUInteger {
kFile,   // 文件
kFolder, // 文件夹   
} EFile;

@interface File : NSObject

//文件夹或者文件的名字,根据EFile类别来区分
@property (nonatomic, strong) NSString *name;

//文件类型
@property (nonatomic) EFile             fileType;

//子文件集合
@property (nonatomic, strong, readonly) NSMutableArray &amp;lt;File *&amp;gt;  *childFiles;

//添加文件
- (void)addFile:(File *)file;

//便利构造器
+ (instancetype)fileWithFileType:(EFile)fileType fileName:(NSString *)name;
@end

-------------------------------------------------------------

@interface File ()
@property (nonatomic, strong) NSMutableArray &amp;lt;File *&amp;gt;  *childFiles;
@end

@implementation File

- (instancetype)init {
self = [super init];
if (self) {
    self.childFiles = [NSMutableArray array];
}
return self;
}

- (void)addFile:(File *)file {
NSParameterAssert(file);
[self.childFiles addObject:file];
}

+ (instancetype)fileWithFileType:(EFile)fileType fileName:(NSString *)name {
File *file    = [[[self class] alloc] init];
file.fileType = fileType;
file.name     = name;
return file;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;FileCell&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface FileCell : UITableViewCell

@property (nonatomic, weak) id                data;
@property (nonatomic, weak) NSIndexPath      *indexPath;
@property (nonatomic, weak) UITableView      *tableView;
@property (nonatomic, weak) UIViewController *controller;

- (void)loadContent;

@end
---------------------------------------------------------------------
@interface FileCell ()

@property (nonatomic, strong) UIImageView  *fileImageView;
@property (nonatomic, strong) UIImageView  *folderImageView;
@property (nonatomic, strong) UILabel      *iconNameLabel;
@property (nonatomic, strong) UIButton     *button;
@property (nonatomic, strong) UILabel      *nameLabel;

@end

@implementation FileCell

- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {

if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]) {

    self.selectionStyle = UITableViewCellSelectionStyleNone;

    [self buildView];
}

return self;
}

- (void)buildView {

UIView *line         = [[UIView alloc] initWithFrame:CGRectMake(0, 79.5f, 500, 0.5f)];
line.backgroundColor = [[UIColor grayColor] colorWithAlphaComponent:0.25f];
[self addSubview:line];

self.fileImageView   = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&amp;quot;File&amp;quot;]];
self.folderImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&amp;quot;Folder&amp;quot;]];
self.fileImageView.center   = CGPointMake(40, 50);
self.folderImageView.center = CGPointMake(40, 50);
[self addSubview:self.folderImageView];
[self addSubview:self.fileImageView];

self.iconNameLabel               = [[UILabel alloc] initWithFrame:CGRectMake(0, 13, 80, 20)];
self.iconNameLabel.font          = [UIFont fontWithName:@&amp;quot;AppleSDGothicNeo-Light&amp;quot; size:12.f];
self.iconNameLabel.textAlignment = NSTextAlignmentCenter;
[self addSubview:self.iconNameLabel];

self.nameLabel      = [[UILabel alloc] initWithFrame:CGRectMake(80, 10, 200, 60)];
self.nameLabel.font = [UIFont fontWithName:@&amp;quot;Avenir-Book&amp;quot; size:12.f];
[self addSubview:self.nameLabel];

self.button = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 500, 80)];
[self.button addTarget:self
                action:@selector(buttonEvent)
      forControlEvents:UIControlEventTouchUpInside];
[self addSubview:self.button];
}    

- (void)loadContent {

File *file = self.data; 
self.nameLabel.text = file.name;
if (file.fileType == kFolder) { 
    [self changeToFolderState];
} else if (file.fileType == kFile) {
    [self changeToFileState];
}
}

//切换到文件夹状态
- (void)changeToFolderState {
self.fileImageView.hidden    = YES;
self.folderImageView.hidden  = NO;
self.iconNameLabel.textColor = [UIColor blackColor];
self.nameLabel.textColor     = [UIColor blackColor];
self.iconNameLabel.text      = @&amp;quot;Folder&amp;quot;;
}

//切换到文件状态
- (void)changeToFileState {
self.fileImageView.hidden    = NO;
self.folderImageView.hidden  = YES;
self.iconNameLabel.textColor = [UIColor grayColor];
self.nameLabel.textColor     = [UIColor grayColor];
self.iconNameLabel.text      = @&amp;quot;File&amp;quot;;
}

- (void)buttonEvent {
File *file = self.data;
if (file.fileType == kFolder) {    
    FileViewController *fvc = [[FileViewController alloc] init];
    fvc.rootFile            = file;
    [self.controller.navigationController pushViewController:fvc
                                                    animated:YES];
}
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;FileViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface FileViewController : UIViewController

@property (nonatomic, strong) File  *rootFile;

@end

-----------------------------------------------------------------

@interface FileViewController () &amp;lt;UITableViewDelegate, UITableViewDataSource&amp;gt;

@property (nonatomic, strong) UITableView *tableView;

@end

@implementation FileViewController

- (void)viewDidLoad {

[super viewDidLoad];

self.title = self.rootFile.name;

[self initTableView];
}

#pragma mark - tableView相关
- (void)initTableView {

self.tableView = [[UITableView alloc] initWithFrame:self.view.bounds style:UITableViewStylePlain];

self.tableView.delegate       = self;
self.tableView.dataSource     = self;
self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;

[self.tableView registerClass:[FileCell class] forCellReuseIdentifier:@&amp;quot;fileCell&amp;quot;];

[self.view addSubview:self.tableView];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {

return self.rootFile.childFiles.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {

FileCell *cell  = [tableView dequeueReusableCellWithIdentifier:@&amp;quot;fileCell&amp;quot;];
cell.indexPath  = indexPath;
cell.tableView  = tableView;
cell.controller = self;

// 传入节点File
cell.data       = self.rootFile.childFiles[indexPath.row];

[cell loadContent];

return cell;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {

return 80.f;
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()&amp;lt;UITableViewDelegate, UITableViewDataSource&amp;gt;
@property (nonatomic, strong) UITableView *tableView;
@property (nonatomic, strong) File        *root;
@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.
self.title = @&amp;quot;Root&amp;quot;;

// 创建根节点
self.root = [File fileWithFileType:kFolder fileName:@&amp;quot;root&amp;quot;];

// 创建第一级文件
File *folder_A_1 = [File fileWithFileType:kFolder fileName:@&amp;quot;Folder-A-1&amp;quot;];
File *file_A_2   = [File fileWithFileType:kFile fileName:@&amp;quot;File-A-2&amp;quot;];
File *file_A_3   = [File fileWithFileType:kFile fileName:@&amp;quot;File-A-3&amp;quot;];
File *file_A_4   = [File fileWithFileType:kFile fileName:@&amp;quot;File-A-4&amp;quot;];

// 创建第二级文件
File *folder_B_1 = [File fileWithFileType:kFolder fileName:@&amp;quot;Folder-B-1&amp;quot;];
File *file_B_2   = [File fileWithFileType:kFile fileName:@&amp;quot;File-B-2&amp;quot;];
File *file_B_3   = [File fileWithFileType:kFile fileName:@&amp;quot;File-B-3&amp;quot;];
File *folder_B_2 = [File fileWithFileType:kFolder fileName:@&amp;quot;Folder-B-2&amp;quot;];

// 创建第三级文件
File *folder_C_1 = [File fileWithFileType:kFolder fileName:@&amp;quot;Folder-C-1&amp;quot;];
File *file_C_1   = [File fileWithFileType:kFile fileName:@&amp;quot;File-C-1&amp;quot;];
File *file_C_2   = [File fileWithFileType:kFile fileName:@&amp;quot;File-C-2&amp;quot;];

[self.root addFile:folder_A_1];
[self.root addFile:file_A_2];
[self.root addFile:file_A_3];
[self.root addFile:file_A_4];

[folder_A_1 addFile:folder_B_1];
[folder_A_1 addFile:file_B_2];
[folder_A_1 addFile:file_B_3];
[folder_A_1 addFile:folder_B_2];

[folder_B_1 addFile:folder_C_1];
[folder_B_1 addFile:file_C_1];
[folder_B_2 addFile:file_C_2];

[self initTableView];
}

#pragma mark - tableView相关
- (void)initTableView {

self.tableView = [[UITableView alloc] initWithFrame:self.view.bounds style:UITableViewStylePlain];

self.tableView.delegate       = self;
self.tableView.dataSource     = self;
self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;

[self.tableView registerClass:[FileCell class] forCellReuseIdentifier:@&amp;quot;fileCell&amp;quot;];

[self.view addSubview:self.tableView];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {

return self.root.childFiles.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {

FileCell *cell  = [tableView dequeueReusableCellWithIdentifier:@&amp;quot;fileCell&amp;quot;];
cell.indexPath  = indexPath;
cell.tableView  = tableView;
cell.controller = self;

// 传入节点File
cell.data       = self.root.childFiles[indexPath.row];

[cell loadContent];

return cell;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {

return 80.f;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Node类里含有Node的属性&quot;&gt;&lt;a href=&quot;#Node类里含有Node的属性&quot; class=&quot;headerlink&quot; title=&quot;Node类里含有Node的属性&quot;&gt;&lt;/a&gt;Node类里含有Node的属性&lt;/h1&gt;&lt;p&gt;Node.h&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@property (nonatomic, strong) Node *leftNode;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Node.h&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@property (nonatomic, strong) NSMutableArray &amp;lt;Node *&amp;gt;  *childNodes;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;便利构造器里调用alloc-init方法&quot;&gt;&lt;a href=&quot;#便利构造器里调用alloc-init方法&quot; class=&quot;headerlink&quot; title=&quot;便利构造器里调用alloc init方法&quot;&gt;&lt;/a&gt;便利构造器里调用alloc init方法&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;+ (instancetype)nodeWithNodeName:(NSString *)nodeName {

//使用self class以便子类继承

Node *node    = [[[self class] alloc] init];
node.nodeName = nodeName;
return node;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Override-init-method&quot;&gt;&lt;a href=&quot;#Override-init-method&quot; class=&quot;headerlink&quot; title=&quot;Override init method&quot;&gt;&lt;/a&gt;Override init method&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (instancetype)init { 
self = [super init];
if (self) {
    self.childNodes = [NSMutableArray array];
}
return self;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;调用description显示对象的打印结果&quot;&gt;&lt;a href=&quot;#调用description显示对象的打印结果&quot; class=&quot;headerlink&quot; title=&quot;调用description显示对象的打印结果&quot;&gt;&lt;/a&gt;调用description显示对象的打印结果&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (NSString *)description {
return [NSString stringWithFormat:@&amp;quot;[Node] - %@&amp;quot;, self.nodeName];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;枚举类型的属性和参数&quot;&gt;&lt;a href=&quot;#枚举类型的属性和参数&quot; class=&quot;headerlink&quot; title=&quot;枚举类型的属性和参数&quot;&gt;&lt;/a&gt;枚举类型的属性和参数&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;typedef enum : NSUInteger {  
kFile,   // 文件
kFolder, // 文件夹  
} EFile;

@property (nonatomic) EFile             fileType;

+ (instancetype)fileWithFileType:(EFile)fileType fileName:(NSString *)name;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;表视图间隔灰线&quot;&gt;&lt;a href=&quot;#表视图间隔灰线&quot; class=&quot;headerlink&quot; title=&quot;表视图间隔灰线&quot;&gt;&lt;/a&gt;表视图间隔灰线&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;UIView *line         = [[UIView alloc] initWithFrame:CGRectMake(0, 79.5f, 500, 0.5f)];
line.backgroundColor = [[UIColor grayColor] colorWithAlphaComponent:0.25f];
[self addSubview:line];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;以中心定位某视图&quot;&gt;&lt;a href=&quot;#以中心定位某视图&quot; class=&quot;headerlink&quot; title=&quot;以中心定位某视图&quot;&gt;&lt;/a&gt;以中心定位某视图&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;self.fileImageView.center   = CGPointMake(40, 50);
self.folderImageView.center = CGPointMake(40, 50);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;视图导航栏的标签设定&quot;&gt;&lt;a href=&quot;#视图导航栏的标签设定&quot; class=&quot;headerlink&quot; title=&quot;视图导航栏的标签设定&quot;&gt;&lt;/a&gt;视图导航栏的标签设定&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];

self.title = self.rootFile.name; 

[self initTableView];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;代码创建tableView&quot;&gt;&lt;a href=&quot;#代码创建tableView&quot; class=&quot;headerlink&quot; title=&quot;代码创建tableView&quot;&gt;&lt;/a&gt;代码创建tableView&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)initTableView {

self.tableView = [[UITableView alloc] initWithFrame:self.view.bounds style:UITableViewStylePlain];

self.tableView.delegate       = self;
self.tableView.dataSource     = self;
self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;

[self.tableView registerClass:[FileCell class] forCellReuseIdentifier:@&amp;quot;fileCell&amp;quot;];

[self.view addSubview:self.tableView];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;代码创建tableViewCell&quot;&gt;&lt;a href=&quot;#代码创建tableViewCell&quot; class=&quot;headerlink&quot; title=&quot;代码创建tableViewCell&quot;&gt;&lt;/a&gt;代码创建tableViewCell&lt;/h1&gt;&lt;p&gt;FileCell&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {
if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]) {
    self.selectionStyle = UITableViewCellSelectionStyleNone;      
    [self buildView];
}   
return self;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
FileCell *cell  = [tableView dequeueReusableCellWithIdentifier:@&amp;quot;fileCell&amp;quot;];
cell.indexPath  = indexPath;
cell.tableView  = tableView;
cell.controller = self;   
// 传入节点File
cell.data       = self.root.childFiles[indexPath.row];

[cell loadContent];

return cell;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Self-class&quot;&gt;&lt;a href=&quot;#Self-class&quot; class=&quot;headerlink&quot; title=&quot;[Self class]&quot;&gt;&lt;/a&gt;[Self class]&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;File *file    = [[[self class] alloc] init];
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;树形结构&quot;&gt;&lt;a href=&quot;#树形结构&quot; class=&quot;headerlink&quot; title=&quot;树形结构&quot;&gt;&lt;/a&gt;树形结构&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;层次嵌套&lt;/li&gt;
&lt;li&gt;外层和内层具有相似的结构&lt;/li&gt;
&lt;li&gt;可以递归的表示&lt;/li&gt;
&lt;/ol&gt;
&lt;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-命令</title>
    <link href="http://jackliu17.github.io/2016/06/03/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4/"/>
    <id>http://jackliu17.github.io/2016/06/03/iOS设计模式-命令/</id>
    <published>2016-06-03T00:14:07.000Z</published>
    <updated>2016-06-03T09:05:19.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;电视机、遥控器与接收器之间的关系&quot;&gt;&lt;a href=&quot;#电视机、遥控器与接收器之间的关系&quot; class=&quot;headerlink&quot; title=&quot;电视机、遥控器与接收器之间的关系&quot;&gt;&lt;/a&gt;电视机、遥控器与接收器之间的关系&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;遥控器与接收器并非必要的设备，比如手动调节电视机的音量也可以&lt;/li&gt;
&lt;li&gt;接收器转换遥控器的信号&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternCommand01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternCommand02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot;命令模式&quot;&gt;&lt;/a&gt;命令模式&lt;/h1&gt;&lt;p&gt;在软件系统中，“行为请求者”与“行为实现者”通常呈现一种“紧耦合”。但在某些场合，比如要对行为进行“记录、撤销/重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将“行为请求者”与“行为实现者”解耦？将一组行为抽象为对象，实现二者之间的松耦合。这就是命令模式（Command Pattern）。命令的执行者和命令的发起者是解耦的，比如最后一个实例中的command的和view是没有直接关联，命令模式能执行回退，撤销，重做等操作，这是最大的用途&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client:可以有多个实体，client即使没有receiver，自身也能操作。&lt;/li&gt;
&lt;li&gt;Receiver: 持有了client的引用,将遥控器的指令翻译成电视机能接收的,它的方法就是针对client的操作。&lt;/li&gt;
&lt;li&gt;CommandProtocol:所有对象必须遵循的规范。&lt;/li&gt;
&lt;li&gt;Command: 每个命令抽象成一个对象，且必须遵循命令协议。好比遥控器上的每个按钮。&lt;/li&gt;
&lt;li&gt;Invoker:单例，存储命令的地方。好比一个含有很多按钮的遥控器。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;CommandProtocol&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol CommandProtocol &amp;lt;NSObject&amp;gt;

@required

//命令的执行
- (void)excute;

//与接收器绑定并设置参数
- (void)initWithReceiver:(Receiver *)receiver paramter:(id)paramter;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Invoker ： &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Invoker : NSObject

//回退操作
- (void)rollBack;

//添加指令操作
- (void)addAndExcute:(id &amp;lt;CommandProtocol&amp;gt;)command;
@end

@interface Invoker ()

@property (nonatomic, strong) NSMutableArray  *queue;
@end

@implementation Invoker

+ (instancetype)shareInstance {

static Invoker *shareInstanceValue = nil;
static dispatch_once_t oncePredicate;

dispatch_once(&amp;amp;oncePredicate, ^{

    shareInstanceValue       = [[Invoker alloc] init];
    shareInstanceValue.queue = [NSMutableArray array];
});

return shareInstanceValue;
}

- (void)rollBack {

// todo
}

- (void)addAndExcute:(id &amp;lt;CommandProtocol&amp;gt;)command {

NSParameterAssert(command);

[self.queue addObject:command];
[command excute];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Receiver &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Receiver : NSObject
//被服务对象
@property (nonatomic, strong) id client;
//增加频道
- (void)addNum:(NSNumber *)num;
//减少频道
- (void)delNum:(NSNumber *)num;

@end

@implementation Receiver

- (void)addNum:(NSNumber *)num {

// todo
}

- (void)delNum:(NSNumber *)num {

// todo
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;改变一个视图的明暗程度&quot;&gt;&lt;a href=&quot;#改变一个视图的明暗程度&quot; class=&quot;headerlink&quot; title=&quot;改变一个视图的明暗程度&quot;&gt;&lt;/a&gt;改变一个视图的明暗程度&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternCommand03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef enum : NSUInteger {

kAddButtonTag = 10, // 增加按钮枚举值
kDelButtonTag,      // 减少按钮枚举值
kRolButtonTag,      // 回退按钮枚举值

} ViewControllerEnumValue;

@interface ViewController ()

@property (nonatomic, strong) UIButton *addButton;
@property (nonatomic, strong) UIButton *delButton;
@property (nonatomic, strong) UIButton *rolButton;
@property (nonatomic, strong) Receiver *receiver;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

// 接收器
self.receiver            = [[Receiver alloc] init];
self.receiver.clientView = self.view;

// 初始化按钮
[self initButtons];
}

- (void)buttonsEvent:(UIButton *)button {

if (button.tag == kAddButtonTag) {

    NSLog(@&amp;quot;增加操作&amp;quot;);
    LighterCommond *commond = [[LighterCommond alloc] initWithReceiver:self.receiver paramter:0.1];
    [[Invoker shareInstance] addAndExcute:commond];

} else if (button.tag == kDelButtonTag) {

    NSLog(@&amp;quot;减少操作&amp;quot;);
    DarkerCommand *commond = [[DarkerCommand alloc] initWithReceiver:self.receiver paramter:0.1];
    [[Invoker shareInstance] addAndExcute:commond];

} else if (button.tag == kRolButtonTag) {

    NSLog(@&amp;quot;回退操作&amp;quot;);
    [[Invoker shareInstance] rollBack];
}
}

#pragma mark - 无关初始化
- (void)initButtons {

// delButton
self.delButton     = [[UIButton alloc] initWithFrame:CGRectMake(10, 25, 30, 30)];

self.delButton.tag               = kDelButtonTag;
self.delButton.layer.borderWidth = 1.f;

[self.delButton setTitle:@&amp;quot;-&amp;quot;
                forState:UIControlStateNormal];

[self.delButton setTitleColor:[UIColor redColor]
                     forState:UIControlStateNormal];

[self.delButton addTarget:self
                   action:@selector(buttonsEvent:)
         forControlEvents:UIControlEventTouchUpInside];

[self.view addSubview:self.delButton];

// addButton
self.addButton     = [[UIButton alloc] initWithFrame:CGRectMake(10 + 40, 25, 30, 30)];

self.addButton.tag               = kAddButtonTag;
self.addButton.layer.borderWidth = 1.f;

[self.addButton setTitle:@&amp;quot;+&amp;quot;
                forState:UIControlStateNormal];

[self.addButton setTitleColor:[UIColor redColor]
                     forState:UIControlStateNormal];

[self.addButton addTarget:self
                   action:@selector(buttonsEvent:)
         forControlEvents:UIControlEventTouchUpInside];

[self.view addSubview:self.addButton];

// rolButton
self.rolButton     = [[UIButton alloc] initWithFrame:CGRectMake(10 + 80, 25, 90, 30)];

self.rolButton.tag               = kRolButtonTag;
self.rolButton.layer.borderWidth = 1.f;

[self.rolButton setTitle:@&amp;quot;rollBack&amp;quot;
                forState:UIControlStateNormal];

[self.rolButton setTitleColor:[UIColor redColor]
                     forState:UIControlStateNormal];

[self.rolButton addTarget:self
                   action:@selector(buttonsEvent:)
         forControlEvents:UIControlEventTouchUpInside];

[self.view addSubview:self.rolButton];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CommandProtocol&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol CommandProtocol &amp;lt;NSObject&amp;gt;

@required

//执行命令
- (void)excute;
//撤销命令
- (void)rollBackExcute;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;DarkerCommand&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface DarkerCommand : NSObject &amp;lt;CommandProtocol&amp;gt;
//与接收器绑定并设置参数
- (instancetype)initWithReceiver:(Receiver *)receiver paramter:(CGFloat)paramter;

@end

@interface DarkerCommand ()

@property (nonatomic, weak) Receiver *receiver;
@property (nonatomic)       CGFloat   paramter;

@end

@implementation DarkerCommand

- (instancetype)initWithReceiver:(Receiver *)receiver paramter:(CGFloat)paramter {

self = [super init];
if (self) {

    self.receiver = receiver;
    self.paramter = paramter;
}

return self;
}

- (void)excute {

[self.receiver makeDarker:self.paramter];
}

- (void)rollBackExcute {

[self.receiver makeLighter:self.paramter];
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;LighterCommond &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface LighterCommond : NSObject &amp;lt;CommandProtocol&amp;gt;

//与接收器绑定并设置参数
- (instancetype)initWithReceiver:(Receiver *)receiver paramter:(CGFloat)paramter;
@end


@interface LighterCommond ()

@property (nonatomic, weak) Receiver *receiver;
@property (nonatomic)       CGFloat   paramter;

@end

@implementation LighterCommond

- (instancetype)initWithReceiver:(Receiver *)receiver paramter:(CGFloat)paramter {

    self = [super init];
    if (self) {

        self.receiver = receiver;
        self.paramter = paramter;
    }

    return self;
}

- (void)excute {

    [self.receiver makeLighter:self.paramter];
}

- (void)rollBackExcute {

    [self.receiver makeDarker:self.paramter];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Invoker &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Invoker : NSObject

+ (instancetype)shareInstance;
//回退操作
- (void)rollBack;

//添加指令操作
- (void)addAndExcute:(id &amp;lt;CommandProtocol&amp;gt;)command;

@end

@interface Invoker ()

@property (nonatomic, strong) NSMutableArray  *queue;

@end

@implementation Invoker

+ (instancetype)shareInstance {

static Invoker *shareInstanceValue = nil;
static dispatch_once_t oncePredicate;

dispatch_once(&amp;amp;oncePredicate, ^{

    shareInstanceValue       = [[Invoker alloc] init];
    shareInstanceValue.queue = [NSMutableArray array];
});

return shareInstanceValue;
}

- (void)rollBack {

id &amp;lt;CommandProtocol&amp;gt; command = self.queue.lastObject;
[command rollBackExcute];

[self.queue removeLastObject];
}

- (void)addAndExcute:(id &amp;lt;CommandProtocol&amp;gt;)command {

NSParameterAssert(command);

[self.queue addObject:command];
[command excute];
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Receiver&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Receiver : NSObject {

CGFloat _hud;
CGFloat _saturation;
CGFloat _brightness;
CGFloat _alpha;
}

//被服务对象
@property (nonatomic, weak) UIView  *clientView;
//变暗
- (void)makeDarker:(CGFloat)pamameter;
//变亮
- (void)makeLighter:(CGFloat)pamameter;
@end

@implementation Receiver

//根据传入的UIView，获取各个维度的值

- (void)setClientView:(UIView *)clientView {

_clientView    = clientView;
UIColor *color = _clientView.backgroundColor;

//获取背景色各个维度的值
[color getHue:&amp;amp;_hud
   saturation:&amp;amp;_saturation
   brightness:&amp;amp;_brightness
        alpha:&amp;amp;_alpha];
    }

    - (void)makeDarker:(CGFloat)pamameter {

_brightness -= pamameter;
_brightness  = MAX(0, _brightness);

_clientView.backgroundColor = [UIColor colorWithHue:_hud
                                         saturation:_saturation
                                         brightness:_brightness
                                              alpha:_alpha];
                                          }

- (void)makeLighter:(CGFloat)pamameter {

_brightness += pamameter;
_brightness  = MIN(1, _brightness);

_clientView.backgroundColor = [UIColor colorWithHue:_hud
                                         saturation:_saturation
                                         brightness:_brightness
                                              alpha:_alpha];
                                          }

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Tag-for-Button&quot;&gt;&lt;a href=&quot;#Tag-for-Button&quot; class=&quot;headerlink&quot; title=&quot;Tag for Button&quot;&gt;&lt;/a&gt;Tag for Button&lt;/h1&gt;&lt;p&gt;通过设定tag值，来调用相对应的button&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef enum : NSUInteger {

kAddButtonTag = 10, // 增加按钮枚举值
kDelButtonTag,      // 减少按钮枚举值
kRolButtonTag,      // 回退按钮枚举值

} ViewControllerEnumValue;

..........

self.delButton.tag = kDelButtonTag;
self.addButton.tag = kAddButtonTag;
self.rolButton.tag = kRolButtonTag;

..........

if (button.tag == kAddButtonTag) {


} else if (button.tag == kDelButtonTag) {


} else if (button.tag == kRolButtonTag) {


}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;协议&quot;&gt;&lt;a href=&quot;#协议&quot; class=&quot;headerlink&quot; title=&quot;协议&quot;&gt;&lt;/a&gt;协议&lt;/h1&gt;&lt;p&gt;协议就是抽象归纳出某一类对象共同拥有的特性&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;电视机、遥控器与接收器之间的关系&quot;&gt;&lt;a href=&quot;#电视机、遥控器与接收器之间的关系&quot; class=&quot;headerlink&quot; title=&quot;电视机、遥控器与接收器之间的关系&quot;&gt;&lt;/a&gt;电视机、遥控器与接收器之间的关系&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;遥控器与接收器并
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-生成器</title>
    <link href="http://jackliu17.github.io/2016/06/02/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>http://jackliu17.github.io/2016/06/02/iOS设计模式-生成器/</id>
    <published>2016-06-02T00:58:50.000Z</published>
    <updated>2016-06-02T10:52:30.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;生成器与建造房子&quot;&gt;&lt;a href=&quot;#生成器与建造房子&quot; class=&quot;headerlink&quot; title=&quot;生成器与建造房子&quot;&gt;&lt;/a&gt;生成器与建造房子&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;起房子的步骤可以对应三个抽象类:打地基类 / 建造类 / 装修类&lt;/li&gt;
&lt;li&gt;建造过程的模块化处理,不同模块找不同的承包商&lt;/li&gt;
&lt;li&gt;生成器的优点:你不需要知道细节 / 模块化处理 / 很好的组合特性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternGenerator01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternGenerator02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;生成器模式实例&quot;&gt;&lt;a href=&quot;#生成器模式实例&quot; class=&quot;headerlink&quot; title=&quot;生成器模式实例&quot;&gt;&lt;/a&gt;生成器模式实例&lt;/h1&gt;&lt;p&gt;需要注意的是，这里有两个协议需要具体承包商来遵循&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;总协议.对所有模块承包商的要求 (BuilderProtocol)&lt;/li&gt;
&lt;li&gt;类别协议。分别对各自类别的承包商要求 (AbstractPartOne , AbstractPartTwo)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;AbstractPartOne&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol AbstractPartOne &amp;lt;NSObject&amp;gt;
@required
- (void)partOneBuilder;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;AbstractPartTwo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol AbstractPartTwo &amp;lt;NSObject&amp;gt;
@required
- (void)buildTree;
- (void)buildSoureWithNumber;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;BuilderProtocol&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol BuilderProtocol &amp;lt;NSObject&amp;gt;

@required
- (id)build;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Builder&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Builder : NSObject
@property (nonatomic, strong) id &amp;lt;BuilderProtocol, AbstractPartOne&amp;gt; partOne;
@property (nonatomic, strong) id &amp;lt;BuilderProtocol, AbstractPartTwo&amp;gt; partTwo;

- (id)builderAll;

@end

@implementation Builder

- (id)builderAll {

Builder *builder = [[[self class] alloc] init];
[builder.partOne build];
[builder.partOne build];

return builder;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;生成器与生产汽车&quot;&gt;&lt;a href=&quot;#生成器与生产汽车&quot; class=&quot;headerlink&quot; title=&quot;生成器与生产汽车&quot;&gt;&lt;/a&gt;生成器与生产汽车&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternGenerator03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;装配车间和组装产品-总指挥&quot;&gt;&lt;a href=&quot;#装配车间和组装产品-总指挥&quot; class=&quot;headerlink&quot; title=&quot;装配车间和组装产品(总指挥)&quot;&gt;&lt;/a&gt;装配车间和组装产品(总指挥)&lt;/h2&gt;&lt;p&gt;BuilderProtocol （这是对所有承包商的要求）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol BuilderProtocol &amp;lt;NSObject&amp;gt;

@required
- (id)build;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Builder&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Builder : NSObject

@property (nonatomic, strong) id &amp;lt;BuilderProtocol, AbstractEngine&amp;gt; engine;
@property (nonatomic, strong) id &amp;lt;BuilderProtocol, AbstractWheels&amp;gt; wheels;
@property (nonatomic, strong) id &amp;lt;BuilderProtocol, AbstractDoor&amp;gt;   door;
@property (nonatomic, strong) NSDictionary *productsInfo;

- (void)buildAllParts;

@end

@implementation Builder

- (void)buildAllParts {

// 创建所有部件
[self.engine build];
[self.wheels build];
[self.door build];

NSMutableDictionary *dataDic = [NSMutableDictionary dictionary];

// 组装产品
dataDic[@&amp;quot;engine&amp;quot;] = [self.engine infomation];
dataDic[@&amp;quot;wheels&amp;quot;] = [self.wheels infomation];
dataDic[@&amp;quot;door&amp;quot;]   = [self.door infomation];

self.productsInfo = dataDic;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;设计各个部件的生成器-模块承包&quot;&gt;&lt;a href=&quot;#设计各个部件的生成器-模块承包&quot; class=&quot;headerlink&quot; title=&quot;设计各个部件的生成器(模块承包)&quot;&gt;&lt;/a&gt;设计各个部件的生成器(模块承包)&lt;/h2&gt;&lt;p&gt;AbstractDoor （对门模块承包商的要求）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol AbstractDoor &amp;lt;NSObject&amp;gt;
@required
- (void)doorColor:(UIColor *)color;
- (NSString *)infomation;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;AbstractEngine （对引擎模块承包商的要求）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol AbstractEngine &amp;lt;NSObject&amp;gt;

@required
- (void)engineScale:(CGFloat)scale;
- (void)engineWeight:(CGFloat)kg;
- (NSString *)infomation;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;AbstractWheels （对轮子模块承包商的要求）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol AbstractWheels &amp;lt;NSObject&amp;gt;

@required
- (void)wheelsNumber:(NSNumber *)number;
- (NSString *)infomation;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;产品制造-具体施工队&quot;&gt;&lt;a href=&quot;#产品制造-具体施工队&quot; class=&quot;headerlink&quot; title=&quot;产品制造(具体施工队)&quot;&gt;&lt;/a&gt;产品制造(具体施工队)&lt;/h2&gt;&lt;p&gt;Door &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Door : NSObject &amp;lt;AbstractDoor, BuilderProtocol&amp;gt;

@end

- (void)doorColor:(UIColor *)color {
// todo
}

- (NSString *)infomation {
return @&amp;quot;X1-door, color : red&amp;quot;;
}

- (id)build {
// todo
return nil;
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Engine&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Engine : NSObject &amp;lt;AbstractEngine, BuilderProtocol&amp;gt;

@end

@implementation Engine

- (void)engineScale:(CGFloat)scale {
// todo
}

- (void)engineWeight:(CGFloat)kg {
// todo
}

- (NSString *)infomation {
return @&amp;quot;X1-Engine, scale : 10, weight : 100&amp;quot;;
}

- (id)build {
// todo   
return nil;
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Wheels&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Wheels : NSObject &amp;lt;BuilderProtocol, AbstractWheels&amp;gt;

@end

@implementation Wheels

- (void)wheelsNumber:(NSNumber *)number {
// todo
}

- (NSString *)infomation {
return @&amp;quot;X1-wheels, number : 4&amp;quot;;
}

- (id)build {  
// todo  
return nil;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;YEngine(替换Engine)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface YEngine : NSObject &amp;lt;AbstractEngine, BuilderProtocol&amp;gt;

@end

@implementation YEngine

- (void)engineScale:(CGFloat)scale {    
// todo
}

- (void)engineWeight:(CGFloat)kg {   
// todo
}

- (NSString *)infomation {  
return @&amp;quot;Y-Engine, scale : 20, weight : 58&amp;quot;;
}

- (id)build {   
// todo   
return nil;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;开始生产&quot;&gt;&lt;a href=&quot;#开始生产&quot; class=&quot;headerlink&quot; title=&quot;开始生产&quot;&gt;&lt;/a&gt;开始生产&lt;/h2&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()

@property (nonatomic, strong) Builder *builder;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

// 创建组装者
self.builder = [[Builder alloc] init];

// 指定承包商
self.builder.engine = [[YEngine alloc] init];
self.builder.wheels = [[Wheels alloc] init];
self.builder.door   = [[Door alloc] init];

// 构建所有的部件
[self.builder buildAllParts];

// 获取产品
NSLog(@&amp;quot;%@&amp;quot;, self.builder.productsInfo);
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;什么时候用protocol&quot;&gt;&lt;a href=&quot;#什么时候用protocol&quot; class=&quot;headerlink&quot; title=&quot;什么时候用protocol&quot;&gt;&lt;/a&gt;什么时候用protocol&lt;/h1&gt;&lt;p&gt;1.对持有的属性有一定的要求，比如要求该属性必须实现某种方法。这时可以要求它遵循一个或多个协议，比如:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@property (nonatomic, strong) id &amp;lt;BuilderProtocol, AbstractPartOne&amp;gt; partOne;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.对传入的值对象有一定的要求，比如比如要求它必须实现某种方法或返回某种类型。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;生成器与建造房子&quot;&gt;&lt;a href=&quot;#生成器与建造房子&quot; class=&quot;headerlink&quot; title=&quot;生成器与建造房子&quot;&gt;&lt;/a&gt;生成器与建造房子&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;起房子的步骤可以对应三个抽象类:打地基类 / 建造类 / 装修类&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-备忘录</title>
    <link href="http://jackliu17.github.io/2016/06/01/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>http://jackliu17.github.io/2016/06/01/iOS设计模式-备忘录/</id>
    <published>2016-06-01T01:01:54.000Z</published>
    <updated>2016-06-01T02:07:19.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;备忘录模式&quot;&gt;&lt;a href=&quot;#备忘录模式&quot; class=&quot;headerlink&quot; title=&quot;备忘录模式&quot;&gt;&lt;/a&gt;备忘录模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;备忘录模式，什么都可以存！&lt;/li&gt;
&lt;li&gt;先设计抽象接口，再去考虑实现细节&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternMemo01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternmMemo02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternmMemo03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;设计存储中心&quot;&gt;&lt;a href=&quot;#设计存储中心&quot; class=&quot;headerlink&quot; title=&quot;设计存储中心&quot;&gt;&lt;/a&gt;设计存储中心&lt;/h2&gt;&lt;p&gt;MementoCenter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (void)saveMementoObject:(id &amp;lt;MementoCenterProtocol&amp;gt;)object withKey:(NSString *)key;

+ (id)mementoObjectWithKey:(NSString *)key;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;指定存储接口-编码-amp-解码&quot;&gt;&lt;a href=&quot;#指定存储接口-编码-amp-解码&quot; class=&quot;headerlink&quot; title=&quot;指定存储接口(编码&amp;amp;解码)&quot;&gt;&lt;/a&gt;指定存储接口(编码&amp;amp;解码)&lt;/h2&gt;&lt;p&gt;MementoCenterProtocol&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol MementoCenterProtocol &amp;lt;NSObject&amp;gt;

@required

//编码
- (id)currentState;

//解码
- (void)recoverFromState:(id)state;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;p&gt;Apple&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Apple : NSObject &amp;lt;MementoCenterProtocol&amp;gt;
@property (nonatomic, strong) NSString *name;
@property (nonatomic, strong) NSNumber *age;
@end
@implementation Apple

//编码
- (id)currentState {
return @{@&amp;quot;name&amp;quot;: self.name,
         @&amp;quot;age&amp;quot; : self.age};
     }


//解码
- (void)recoverFromState:(id)state {

NSDictionary *data = state;
self.name = data[@&amp;quot;name&amp;quot;];
self.age  = data[@&amp;quot;age&amp;quot;];
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;实现存储机制&quot;&gt;&lt;a href=&quot;#实现存储机制&quot; class=&quot;headerlink&quot; title=&quot;实现存储机制&quot;&gt;&lt;/a&gt;实现存储机制&lt;/h2&gt;&lt;p&gt;MementoCenter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (void)saveMementoObject:(id &amp;lt;MementoCenterProtocol&amp;gt;)object withKey:(NSString *)key {

NSParameterAssert(object);
NSParameterAssert(key);

// 获取data
id      data    = [object currentState];
NSData *tmpData = [FastCoder dataWithRootObject:data];

// 进行存储
if (tmpData) {

    [[NSUserDefaults standardUserDefaults] setObject:tmpData
                                              forKey:key];
}
}


+ (id)mementoObjectWithKey:(NSString *)key {

NSParameterAssert(key);

id      data    = nil;
NSData *tmpData = [[NSUserDefaults standardUserDefaults] objectForKey:key];

if (tmpData) {

    data = [FastCoder objectWithData:tmpData];
}

return data;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;存储与获取&quot;&gt;&lt;a href=&quot;#存储与获取&quot; class=&quot;headerlink&quot; title=&quot;存储与获取&quot;&gt;&lt;/a&gt;存储与获取&lt;/h2&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];

Apple *apple = [[Apple alloc] init];
apple.name = @&amp;quot;JiKeXueYuan&amp;quot;;
apple.age  = @(30);

// save state
[MementoCenter saveMementoObject:apple withKey:@&amp;quot;Apple&amp;quot;];

// get state
[apple recoverFromState:[MementoCenter mementoObjectWithKey:@&amp;quot;Apple&amp;quot;]];

NSLog(@&amp;quot;name:%@ age:%@&amp;quot;, apple.name, apple.age);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;通过category优化&quot;&gt;&lt;a href=&quot;#通过category优化&quot; class=&quot;headerlink&quot; title=&quot;通过category优化&quot;&gt;&lt;/a&gt;通过category优化&lt;/h2&gt;&lt;p&gt;NSObject + MementoCenter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@implementation NSObject (MementoCenter)

- (void)saveStateWithKey:(NSString *)key {

NSParameterAssert(key);

id &amp;lt;MementoCenterProtocol&amp;gt; obj = (id &amp;lt;MementoCenterProtocol&amp;gt;)self;

if ([obj respondsToSelector:@selector(currentState)]) {

    [MementoCenter saveMementoObject:obj withKey:key];
}
}


- (void)recoverFromStateWithKey:(NSString *)key {

NSParameterAssert(key);

id                         state = [MementoCenter mementoObjectWithKey:key];

id &amp;lt;MementoCenterProtocol&amp;gt; obj   = (id &amp;lt;MementoCenterProtocol&amp;gt;)self;

if ([obj respondsToSelector:@selector(recoverFromStateWithKey:)]) {

    [obj recoverFromState:state];
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;传递协议对象所必须的判断&quot;&gt;&lt;a href=&quot;#传递协议对象所必须的判断&quot; class=&quot;headerlink&quot; title=&quot;传递协议对象所必须的判断&quot;&gt;&lt;/a&gt;传递协议对象所必须的判断&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;id &amp;lt;MementoCenterProtocol&amp;gt; obj = (id &amp;lt;MementoCenterProtocol&amp;gt;)self;

if ([obj respondsToSelector:@selector(currentState)]) {
[MementoCenter saveMementoObject:obj withKey:key];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;优化后的存储与获取&quot;&gt;&lt;a href=&quot;#优化后的存储与获取&quot; class=&quot;headerlink&quot; title=&quot;优化后的存储与获取&quot;&gt;&lt;/a&gt;优化后的存储与获取&lt;/h2&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];

Apple *apple = [[Apple alloc] init];
apple.name = @&amp;quot;JiKeXueYuan&amp;quot;;
apple.age  = @(30);

[apple saveStateWithKey:@&amp;quot;Ben&amp;quot;];
[apple recoverFromStateWithKey:@&amp;quot;Ben&amp;quot;];

NSLog(@&amp;quot;name:%@ age:%@&amp;quot;, apple.name, apple.age);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;备忘录模式恢复UIView状态&quot;&gt;&lt;a href=&quot;#备忘录模式恢复UIView状态&quot; class=&quot;headerlink&quot; title=&quot;备忘录模式恢复UIView状态&quot;&gt;&lt;/a&gt;备忘录模式恢复UIView状态&lt;/h1&gt;&lt;p&gt;使用场景:UIView有NSCoding协议，意味着可以本地存储，但没有NSCopying，意味着如果要将一个view完整的复制过来，那是一个棘手的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个对象状态的存储并不是要整个对象，也有可能是其部分的属性,由需求来定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DemoView&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface DemoView : UIView &amp;lt;MementoCenterProtocol&amp;gt;

@end

@implementation DemoView

- (id)currentState {
return @{@&amp;quot;frame&amp;quot; : NSStringFromCGRect(self.frame)};
}

- (void)recoverFromState:(id)state {
NSDictionary *data = state;
self.frame         = CGRectFromString(data[@&amp;quot;frame&amp;quot;]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {

[super viewDidLoad];

DemoView *demoView = [[DemoView alloc] init];
demoView.frame     = CGRectMake(100, 100, 100, 100);
[demoView saveStateWithKey:@&amp;quot;A&amp;quot;];

[demoView recoverFromStateWithKey:@&amp;quot;A&amp;quot;];
NSLog(@&amp;quot;%@&amp;quot;, demoView);
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;备忘录模式&quot;&gt;&lt;a href=&quot;#备忘录模式&quot; class=&quot;headerlink&quot; title=&quot;备忘录模式&quot;&gt;&lt;/a&gt;备忘录模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;备忘录模式，什么都可以存！&lt;/li&gt;
&lt;li&gt;先设计抽象接口，再去考虑实现细节&lt;/li&gt;
&lt;/ol&gt;
&lt;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-单例</title>
    <link href="http://jackliu17.github.io/2016/05/30/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B/"/>
    <id>http://jackliu17.github.io/2016/05/30/iOS设计模式-单例/</id>
    <published>2016-05-30T09:09:56.000Z</published>
    <updated>2016-05-31T03:47:34.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;共享信息，管理中心&lt;/li&gt;
&lt;li&gt;单例类基本是用来管理某种资源的，而这种资源是可以全局共享的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;只有一个实例&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternSingleton01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Cocoa系统中的单例应用&quot;&gt;&lt;a href=&quot;#Cocoa系统中的单例应用&quot; class=&quot;headerlink&quot; title=&quot;Cocoa系统中的单例应用&quot;&gt;&lt;/a&gt;Cocoa系统中的单例应用&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;[[UIApplication sharedApplication]statusBarStyle];

[[NSNotificationCenter defaultCenter]addObserver:&amp;lt;#(nonnull id)#&amp;gt;
                                        selector:&amp;lt;#(nonnull SEL)#&amp;gt;
                                            name:&amp;lt;#(nullable NSString *)#&amp;gt;
                                          object:&amp;lt;#(nullable id)#&amp;gt;];


[[NSUserDefaults standardUserDefaults]setObject:&amp;lt;#(nullable id)#&amp;gt;
                                         forKey:&amp;lt;#(nonnull NSString *)#&amp;gt;];


[NSFileManager defaultManager];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;单例创建的三种方法&quot;&gt;&lt;a href=&quot;#单例创建的三种方法&quot; class=&quot;headerlink&quot; title=&quot;单例创建的三种方法&quot;&gt;&lt;/a&gt;单例创建的三种方法&lt;/h1&gt;&lt;p&gt;UserInfoManagerCenter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface UserInfoManagerCenter : NSObject

@property (nonatomic, strong) NSString *name;
@property (nonatomic, strong) NSNumber *age;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;方法1. 任何类调用其他方法前，先调用此方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (void)initialize {

static UserInfoManagerCenter *center = nil;

if (self == [UserInfoManagerCenter class]) {

    center = [[UserInfoManagerCenter alloc] init];
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;方法2. 有弊端。如果AppDelegate里，也同时以此方法创建单例，程序就会奔溃&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (instancetype)managerCenter {

static UserInfoManagerCenter *center = nil;

if (center == nil) {

    center = [[UserInfoManagerCenter alloc] init];
}

return center;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;方法3. 最佳&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (instancetype)managerCenter {

static UserInfoManagerCenter *center = nil;

static dispatch_once_t predicate;
dispatch_once(&amp;amp;predicate, ^{

    center = [[UserInfoManagerCenter alloc] init];
});

return center;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;单例数据共享&quot;&gt;&lt;a href=&quot;#单例数据共享&quot; class=&quot;headerlink&quot; title=&quot;单例数据共享&quot;&gt;&lt;/a&gt;单例数据共享&lt;/h1&gt;&lt;p&gt;AppDelegate: 在此创建单例并赋值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
// Override point for customization after application launch.
UserInfoManagerCenter *center = [UserInfoManagerCenter managerCenter];
center.name = @&amp;quot;极客学院&amp;quot;;

return YES;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController: 在此获取单例的数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UserInfoManagerCenter *center = [UserInfoManagerCenter managerCenter];
NSLog(@&amp;quot;%@&amp;quot;, center.name);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;编写严格的单例&quot;&gt;&lt;a href=&quot;#编写严格的单例&quot; class=&quot;headerlink&quot; title=&quot;编写严格的单例&quot;&gt;&lt;/a&gt;编写严格的单例&lt;/h1&gt;&lt;h2 id=&quot;防止子类继承&quot;&gt;&lt;a href=&quot;#防止子类继承&quot; class=&quot;headerlink&quot; title=&quot;防止子类继承&quot;&gt;&lt;/a&gt;防止子类继承&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;@implementation UserInfoManagerCenter

+ (instancetype)managerCenter {

static dispatch_once_t predicate;
dispatch_once(&amp;amp;predicate, ^{

    center = [[UserInfoManagerCenter alloc] init];
});

// 防止子类使用
NSString *classString = NSStringFromClass([self class]);
if ([classString isEqualToString:@&amp;quot;UserInfoManagerCenter&amp;quot;] == NO) {

    NSParameterAssert(nil);
}

return center;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;确保实例对象只有一个&quot;&gt;&lt;a href=&quot;#确保实例对象只有一个&quot; class=&quot;headerlink&quot; title=&quot;确保实例对象只有一个&quot;&gt;&lt;/a&gt;确保实例对象只有一个&lt;/h2&gt;&lt;p&gt;因为单例管理的是系统资源，一个对象非常耗资源，所以要避免不能用alloc init方法创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;UserInfoManagerCenter.h&amp;quot;
static UserInfoManagerCenter *center = nil;
@implementation UserInfoManagerCenter

+ (instancetype)managerCenter {

static dispatch_once_t predicate;
dispatch_once(&amp;amp;predicate, ^{

    center = (UserInfoManagerCenter *)@&amp;quot;UserInfoManagerCenter&amp;quot;;
    center = [[UserInfoManagerCenter alloc] init];
});

// 防止子类使用
NSString *classString = NSStringFromClass([self class]);
if ([classString isEqualToString:@&amp;quot;UserInfoManagerCenter&amp;quot;] == NO) {

    NSParameterAssert(nil);
}

return center;
}

- (instancetype)init {

NSString *string = (NSString *)center;
if ([string isKindOfClass:[NSString class]] == YES &amp;amp;&amp;amp; [string isEqualToString:@&amp;quot;UserInfoManagerCenter&amp;quot;]) {

    self = [super init];
    if (self) {

        // 防止子类使用
        NSString *classString = NSStringFromClass([self class]);
        if ([classString isEqualToString:@&amp;quot;UserInfoManagerCenter&amp;quot;] == NO) {

            NSParameterAssert(nil);
        }
    }

    return self;

} else {

    return nil;
}
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;防止调用alloc-init细节阐述&quot;&gt;&lt;a href=&quot;#防止调用alloc-init细节阐述&quot; class=&quot;headerlink&quot; title=&quot;防止调用alloc init细节阐述&quot;&gt;&lt;/a&gt;防止调用alloc init细节阐述&lt;/h2&gt;&lt;p&gt;首先center的实际值设为一个字符串&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;center = (UserInfoManagerCenter *)@&amp;quot;UserInfoManagerCenter&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在随后调用的init里进行判断，只有经历过 + managerCenter方法的才能创建实例，如果直接调用allo init的，那返回是空值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (instancetype)init {

NSString *string = (NSString *)center;
if ([string isKindOfClass:[NSString class]] == YES &amp;amp;&amp;amp; [string isEqualToString:@&amp;quot;UserInfoManagerCenter&amp;quot;]) {

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;单例模式优化本地存储&quot;&gt;&lt;a href=&quot;#单例模式优化本地存储&quot; class=&quot;headerlink&quot; title=&quot;单例模式优化本地存储&quot;&gt;&lt;/a&gt;单例模式优化本地存储&lt;/h1&gt;&lt;h2 id=&quot;第三方库-FastCoding&quot;&gt;&lt;a href=&quot;#第三方库-FastCoding&quot; class=&quot;headerlink&quot; title=&quot;第三方库:FastCoding&quot;&gt;&lt;/a&gt;第三方库:FastCoding&lt;/h2&gt;&lt;p&gt;替换NSCoding协议, plist, JSON等，直接将数据存为NSData类型&lt;/p&gt;
&lt;p&gt;下载地址:&lt;a href=&quot;https://github.com/nicklockwood/FastCoding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FastCoding&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;关闭ARC&quot;&gt;&lt;a href=&quot;#关闭ARC&quot; class=&quot;headerlink&quot; title=&quot;关闭ARC&quot;&gt;&lt;/a&gt;关闭ARC&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternSingleton02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;用单例设计存储数据接口&quot;&gt;&lt;a href=&quot;#用单例设计存储数据接口&quot; class=&quot;headerlink&quot; title=&quot;用单例设计存储数据接口&quot;&gt;&lt;/a&gt;用单例设计存储数据接口&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (void)storeValue:(id)value withKey:(NSString *)key;
- (id)valueWithKey:(NSString *)key;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;用单例接口隔离实现细节&quot;&gt;&lt;a href=&quot;#用单例接口隔离实现细节&quot; class=&quot;headerlink&quot; title=&quot;用单例接口隔离实现细节&quot;&gt;&lt;/a&gt;用单例接口隔离实现细节&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (void)storeValue:(id)value withKey:(NSString *)key {

NSParameterAssert(value);
NSParameterAssert(key);

NSData *data = [FastCoder dataWithRootObject:value];
if (data) {

    [[NSUserDefaults standardUserDefaults] setObject:data forKey:key];
}
}



- (id)valueWithKey:(NSString *)key {

NSParameterAssert(key);

NSData *data = [[NSUserDefaults standardUserDefaults] valueForKey:key];

return [FastCoder objectWithData:data];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;在单例提供接口的基础上进行上层封装&quot;&gt;&lt;a href=&quot;#在单例提供接口的基础上进行上层封装&quot; class=&quot;headerlink&quot; title=&quot;在单例提供接口的基础上进行上层封装&quot;&gt;&lt;/a&gt;在单例提供接口的基础上进行上层封装&lt;/h2&gt;&lt;h2 id=&quot;封装前&quot;&gt;&lt;a href=&quot;#封装前&quot; class=&quot;headerlink&quot; title=&quot;封装前&quot;&gt;&lt;/a&gt;封装前&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;StudentModel *student = [[StudentModel alloc] init];
student.name          = @&amp;quot;A&amp;quot;;
NSArray *array        = @[[InfoModel new], [InfoModel new], [InfoModel new]];
student.datas         = array;

//每次都要得到这个单例
[[StoreValue sharedInstance] storeValue:student withKey:@&amp;quot;FastCoding&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;封装后&quot;&gt;&lt;a href=&quot;#封装后&quot; class=&quot;headerlink&quot; title=&quot;封装后&quot;&gt;&lt;/a&gt;封装后&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;StudentModel *student = [[StudentModel alloc] init];
student.name          = @&amp;quot;A&amp;quot;;
NSArray *array        = @[[InfoModel new], [InfoModel new], [InfoModel new]];
student.datas         = array;
[student storeValueWithKey:@&amp;quot;FastCoding&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;如何封装&quot;&gt;&lt;a href=&quot;#如何封装&quot; class=&quot;headerlink&quot; title=&quot;如何封装&quot;&gt;&lt;/a&gt;如何封装&lt;/h2&gt;&lt;p&gt;新建category: StoreValue&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@implementation NSObject (StoreValue)

//这样student对象就可以直接调用该方法来存储

- (void)storeValueWithKey:(NSString *)key {
[[StoreValue sharedInstance] storeValue:self withKey:key];
}

//studentModel可以直接调用类方法来存储

+ (id)valueByKey:(NSString *)key {
return [[StoreValue sharedInstance] valueWithKey:key];
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;共享信息，管理中心&lt;/li&gt;
&lt;li&gt;单例类基本是用来管理某种资源的，而这种资源是可以全局共享的&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-代理</title>
    <link href="http://jackliu17.github.io/2016/05/30/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86/"/>
    <id>http://jackliu17.github.io/2016/05/30/iOS设计模式-代理/</id>
    <published>2016-05-30T05:12:37.000Z</published>
    <updated>2016-05-30T05:14:50.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;代理模式的原理&quot;&gt;&lt;a href=&quot;#代理模式的原理&quot; class=&quot;headerlink&quot; title=&quot;代理模式的原理&quot;&gt;&lt;/a&gt;代理模式的原理&lt;/h1&gt;&lt;p&gt;一个对象和另一个对象耦合，代理模式是为了降低耦合度&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPattern_Delegate01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Customer-amp-使用代理的注意事项&quot;&gt;&lt;a href=&quot;#Customer-amp-使用代理的注意事项&quot; class=&quot;headerlink&quot; title=&quot;Customer  &amp;amp; 使用代理的注意事项&quot;&gt;&lt;/a&gt;Customer  &amp;amp; 使用代理的注意事项&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;@class, 提示协议方法有该类的引用&lt;/li&gt;
&lt;li&gt;weak 防止循环引用&lt;/li&gt;
&lt;li&gt;@required or @Optional 要写清楚&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Customer&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@class Customer;

@protocol CustomerDelegate &amp;lt;NSObject&amp;gt;

@required
- (void)custmer:(Customer *)custmer buyItemCount:(NSInteger)count;
@end

@interface Customer : NSObject

// 经销商
@property (nonatomic, weak) id &amp;lt;CustomerDelegate&amp;gt; delegate;

// 顾客买卖行为
- (void)buyItemCount:(NSInteger)count;
@end

- (void)buyItemCount:(NSInteger)count {
    if (self.delegate &amp;amp;&amp;amp; [self.delegate respondsToSelector:@selector(custmer:buyItemCount:)]) {   
        [self.delegate custmer:self buyItemCount:count];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;ViewController&quot;&gt;&lt;a href=&quot;#ViewController&quot; class=&quot;headerlink&quot; title=&quot;ViewController&quot;&gt;&lt;/a&gt;ViewController&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;
#import &amp;quot;Customer.h&amp;quot;

// 经销商
@interface ViewController ()&amp;lt;CustomerDelegate&amp;gt;

- (void)viewDidLoad {
[super viewDidLoad];

Customer *customer  = [[Customer alloc] init];
customer.delegate   = self;  
[customer buyItemCount:5];
}

- (void)custmer:(Customer *)custmer buyItemCount:(NSInteger)count {   
NSLog(@&amp;quot;%ld&amp;quot;, (long)count);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;使用场景：用于类与类之间的值传递&quot;&gt;&lt;a href=&quot;#使用场景：用于类与类之间的值传递&quot; class=&quot;headerlink&quot; title=&quot;使用场景：用于类与类之间的值传递&quot;&gt;&lt;/a&gt;使用场景：用于类与类之间的值传递&lt;/h2&gt;&lt;p&gt;Customer设定消息接受方的遵循条件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@required
- (void)custmer:(Customer *)custmer buyItemCount:(NSInteger)count;
@end

@interface Customer : NSObject

// 经销商
@property (nonatomic, weak) id &amp;lt;CustomerDelegate&amp;gt; delegate;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Customer发送消息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)buyItemCount:(NSInteger)count {

    //代理存在，并且代理能响应这个方法

    if (self.delegate &amp;amp;&amp;amp; [self.delegate respondsToSelector:@selector(custmer:buyItemCount:)]) {   
        [self.delegate custmer:self buyItemCount:count];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController准备接收&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()&amp;lt;CustomerDelegate&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController获得所传递的消息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Customer *customer  = [[Customer alloc] init];
customer.delegate   = self;  
[customer buyItemCount:5];
}

- (void)custmer:(Customer *)custmer buyItemCount:(NSInteger)count {   
NSLog(@&amp;quot;%ld&amp;quot;, (long)count);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;代理使用验证&quot;&gt;&lt;a href=&quot;#代理使用验证&quot; class=&quot;headerlink&quot; title=&quot;代理使用验证&quot;&gt;&lt;/a&gt;代理使用验证&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//代理存在，并且代理能响应这个方法

if (self.delegate &amp;amp;&amp;amp; [self.delegate respondsToSelector:@selector(custmer:buyItemCount:)]) {   
    [self.delegate custmer:self buyItemCount:count];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;协议使用场景&quot;&gt;&lt;a href=&quot;#协议使用场景&quot; class=&quot;headerlink&quot; title=&quot;协议使用场景&quot;&gt;&lt;/a&gt;协议使用场景&lt;/h1&gt;&lt;p&gt;约束对象，筛选对象。比如传递的对象，必须实现某种方法&lt;/p&gt;
&lt;h2 id=&quot;协议&quot;&gt;&lt;a href=&quot;#协议&quot; class=&quot;headerlink&quot; title=&quot;协议&quot;&gt;&lt;/a&gt;协议&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;@protocol TCPProtocol &amp;lt;NSObject&amp;gt;
@required
// 获取源端口号
- (NSInteger)sourcePort;
// 获取目的地端口号
- (NSInteger)destinationPort;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;遵循协议的类&quot;&gt;&lt;a href=&quot;#遵循协议的类&quot; class=&quot;headerlink&quot; title=&quot;遵循协议的类&quot;&gt;&lt;/a&gt;遵循协议的类&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;@interface Model : NSObject &amp;lt;TCPProtocol&amp;gt;
// 获取源端口号
- (NSInteger)sourcePort {
return 10;
}

// 获取目的地端口号
- (NSInteger)destinationPort {
return 20;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;传递遵循协议的对象&quot;&gt;&lt;a href=&quot;#传递遵循协议的对象&quot; class=&quot;headerlink&quot; title=&quot;传递遵循协议的对象&quot;&gt;&lt;/a&gt;传递遵循协议的对象&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (void)accessTCPData:(id &amp;lt;TCPProtocol&amp;gt;)data { 
self.sourcePort      = [data sourcePort];
self.destinationPort = [data destinationPort];
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代理模式的原理&quot;&gt;&lt;a href=&quot;#代理模式的原理&quot; class=&quot;headerlink&quot; title=&quot;代理模式的原理&quot;&gt;&lt;/a&gt;代理模式的原理&lt;/h1&gt;&lt;p&gt;一个对象和另一个对象耦合，代理模式是为了降低耦合度&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-桥接</title>
    <link href="http://jackliu17.github.io/2016/05/29/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5/"/>
    <id>http://jackliu17.github.io/2016/05/29/iOS设计模式-桥接/</id>
    <published>2016-05-29T09:20:04.000Z</published>
    <updated>2016-05-29T09:21:49.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;遥控器和电视机&quot;&gt;&lt;a href=&quot;#遥控器和电视机&quot; class=&quot;headerlink&quot; title=&quot;遥控器和电视机&quot;&gt;&lt;/a&gt;遥控器和电视机&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;每个遥控器对应一个电视机，遥控器是控制类，电视机是执行类&lt;/li&gt;
&lt;li&gt;通用的功能抽象出来成为一个模块，增加复用性, 例如每个遥控器都会有音量键，频道键&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; title=&quot;桥接模式&quot;&gt;&lt;/a&gt;桥接模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;把抽象层次结构从具体的实现中分离出来，使其能够独立变更。&lt;/li&gt;
&lt;li&gt;抽象层次定义了供客户端使用的上层抽象接口。实现层结构定义了供抽象层使用的底层接口。&lt;/li&gt;
&lt;li&gt;实现类的引用被封装到抽象层的实例中，桥接就形成了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternBridge01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternBridge02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternBridge03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;抽象类&quot;&gt;&lt;a href=&quot;#抽象类&quot; class=&quot;headerlink&quot; title=&quot;抽象类&quot;&gt;&lt;/a&gt;抽象类&lt;/h1&gt;&lt;p&gt;AbstractSystem&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//拥有执行者的引用，让执行者去执行

@property (nonatomic, strong) AbstractImplementor  *implementor;

- (void)command_up {
[self.implementor loadCommand:kUp];
}

- (void)command_down {
[self.implementor loadCommand:kDown];
}

- (void)loadSystem {    
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;AbstractImplementor&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//执行类要包含所有情形，例如KO, KX只是某个子类才有的特性，但也要包含在这里

typedef enum : NSUInteger {

kUp,
kDown,
kLeft,
kRight,
kA,
kB,

KO,
KX,

} EcommandType;

- (void)loadCommand:(EcommandType)command {

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;实现层1&quot;&gt;&lt;a href=&quot;#实现层1&quot; class=&quot;headerlink&quot; title=&quot;实现层1&quot;&gt;&lt;/a&gt;实现层1&lt;/h1&gt;&lt;p&gt;GBASystem &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface GBASystem : AbstractSystem

- (void)loadSystem {   
NSLog(@&amp;quot;GBASystem&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;GBAImplementor&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface GBAImplementor : AbstractImplementor

- (void)loadCommand:(EcommandType)command {

switch (command) {

    case kUp:

        NSLog(@&amp;quot;GBA up&amp;quot;);
        break;

    case kDown:

        NSLog(@&amp;quot;GBA down&amp;quot;);
        break;

        ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;实现层2&quot;&gt;&lt;a href=&quot;#实现层2&quot; class=&quot;headerlink&quot; title=&quot;实现层2&quot;&gt;&lt;/a&gt;实现层2&lt;/h1&gt;&lt;p&gt;PSPSystem&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface PSPSystem : AbstractSystem

- (void)loadSystem {   
NSLog(@&amp;quot;PSPSystem&amp;quot;);
}

- (void)command_X {
[self.implementor loadCommand:KX];
}

- (void)command_O {
[self.implementor loadCommand:KO];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PSPImplementor&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface PSPImplementor : AbstractImplementor

- (void)loadCommand:(EcommandType)command {

switch (command) {
  ....
      case KO:

        NSLog(@&amp;quot;PSP O&amp;quot;);
        break;

    case KX:

        NSLog(@&amp;quot;PSP X&amp;quot;);
        break;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

// GBA系统 + GBA执行器
AbstractSystem *gbaSystem = [[GBASystem alloc] init];
gbaSystem.implementor     = [[GBAImplementor alloc] init];

[gbaSystem loadSystem];
[gbaSystem command_up];

// PSP系统 + PSP执行器
PSPSystem *pspSystem  = [[PSPSystem alloc] init];
pspSystem.implementor = [[PSPImplementor alloc] init];

[pspSystem loadSystem];
[pspSystem command_X];
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;遥控器和电视机&quot;&gt;&lt;a href=&quot;#遥控器和电视机&quot; class=&quot;headerlink&quot; title=&quot;遥控器和电视机&quot;&gt;&lt;/a&gt;遥控器和电视机&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;每个遥控器对应一个电视机，遥控器是控制类，电视机是执行类&lt;/li&gt;
&lt;li&gt;通用的功能抽
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-工厂</title>
    <link href="http://jackliu17.github.io/2016/05/29/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82/"/>
    <id>http://jackliu17.github.io/2016/05/29/iOS设计模式-工厂/</id>
    <published>2016-05-29T05:20:41.000Z</published>
    <updated>2016-05-29T05:27:04.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;工厂&quot;&gt;&lt;a href=&quot;#工厂&quot; class=&quot;headerlink&quot; title=&quot;工厂&quot;&gt;&lt;/a&gt;工厂&lt;/h1&gt;&lt;p&gt;工厂&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;制造产品&lt;/li&gt;
&lt;li&gt;将制造工艺进行了封装&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;客户&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不参与手机制造流程&lt;/li&gt;
&lt;li&gt;客户需要使用固定的产品(客户提出需求)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternFactory04.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;简单工厂使用场景&quot;&gt;&lt;a href=&quot;#简单工厂使用场景&quot; class=&quot;headerlink&quot; title=&quot;简单工厂使用场景&quot;&gt;&lt;/a&gt;简单工厂使用场景&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;简化生产流程&lt;/li&gt;
&lt;li&gt;隔离生产产品的细节&lt;/li&gt;
&lt;li&gt;不同类型的产品之间有着一些共同的功能&lt;/li&gt;
&lt;li&gt;一个具体的工厂,工厂自身就是一个具体的对象，是实体类，不是抽象类,是个便利构造器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternFactory01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternFactory02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;产品协议规范同一接口&quot;&gt;&lt;a href=&quot;#产品协议规范同一接口&quot; class=&quot;headerlink&quot; title=&quot;产品协议规范同一接口&quot;&gt;&lt;/a&gt;产品协议规范同一接口&lt;/h2&gt;&lt;p&gt;PhoneProtocol&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol PhoneProtocol &amp;lt;NSObject&amp;gt;

- (void)phoneCall;

- (void)sendMessage;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;产品基类&quot;&gt;&lt;a href=&quot;#产品基类&quot; class=&quot;headerlink&quot; title=&quot;产品基类&quot;&gt;&lt;/a&gt;产品基类&lt;/h2&gt;&lt;p&gt;BaseDevie&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface BaseDevie : NSObject &amp;lt;PhoneProtocol&amp;gt;

- (void)phoneCall {
}

- (void)sendMessage {
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;具体产品&quot;&gt;&lt;a href=&quot;#具体产品&quot; class=&quot;headerlink&quot; title=&quot;具体产品&quot;&gt;&lt;/a&gt;具体产品&lt;/h2&gt;&lt;p&gt;AndroidDevice&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface AndroidDevice : BaseDevie

- (void)phoneCall {
NSLog(@&amp;quot;Android phoneCall&amp;quot;);
}

- (void)sendMessage {   
NSLog(@&amp;quot;Android sendMessage&amp;quot;);
}

//特有功能，需要写在.h文件里
- (void)customTheme {
NSLog(@&amp;quot;Android customTheme&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;iPhoneDevice&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface iPhoneDevice : BaseDevie

- (void)phoneCall {
NSLog(@&amp;quot;iPhone phoneCall&amp;quot;);
}

- (void)sendMessage {   
NSLog(@&amp;quot;iPhone sendMessage&amp;quot;);
}

//特有功能，需要写在.h文件里
- (void)fingerprintIndetification {
NSLog(@&amp;quot;iPhone fingerprintIndetification&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;NokiaDevice&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface NokiaDevice : BaseDevie

- (void)phoneCall { 
NSLog(@&amp;quot;Nokia phoneCall&amp;quot;);
}

- (void)sendMessage {
NSLog(@&amp;quot;Nokia sendMessage&amp;quot;);
}

//特有功能，需要写在.h文件里
- (void)knockWalnut {
NSLog(@&amp;quot;Nokia knockWalnut&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;工厂-1&quot;&gt;&lt;a href=&quot;#工厂-1&quot; class=&quot;headerlink&quot; title=&quot;工厂&quot;&gt;&lt;/a&gt;工厂&lt;/h2&gt;&lt;p&gt;DeviceFactory&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef enum : NSUInteger {
kiPhone   = 0x11,
kAndroid,
kNokia,

} EDevieType;

//根据用户提交的指令创建出具体的手机
+ (BaseDevie &amp;lt;PhoneProtocol&amp;gt; *)deviceFactoryWithDevieType:(EDevieType)type {

BaseDevie &amp;lt;PhoneProtocol&amp;gt; *device = nil;  

if (type == kiPhone) { 

    device = [[iPhoneDevice alloc] init];

}  else if (type == kAndroid) {

    device = [[AndroidDevice alloc] init];

}  else if (type == kNokia) {

    device = [[NokiaDevice alloc] init];

}

return device;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;工厂的使用&quot;&gt;&lt;a href=&quot;#工厂的使用&quot; class=&quot;headerlink&quot; title=&quot;工厂的使用&quot;&gt;&lt;/a&gt;工厂的使用&lt;/h2&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];

// 工厂中创建出具体产品，如果仅仅是使用通用的功能sendMsg,phoneCall，类型为BaseDevice也可以

iPhoneDevice *iPhone = (iPhoneDevice *)[DeviceFactory deviceFactoryWithDevieType:kiPhone];

// 使用产品的功能
[iPhone fingerprintIndetification];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;抽象工厂&quot;&gt;&lt;a href=&quot;#抽象工厂&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂&quot;&gt;&lt;/a&gt;抽象工厂&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;工厂是抽象类，需要实例化子类&lt;/li&gt;
&lt;li&gt;抽象工厂使用比简单工厂更加灵活，因为可以动态的切换工厂&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternFactory03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPatternFactory05.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;产品-Phone&quot;&gt;&lt;a href=&quot;#产品-Phone&quot; class=&quot;headerlink&quot; title=&quot;产品 Phone&quot;&gt;&lt;/a&gt;产品 Phone&lt;/h2&gt;&lt;p&gt;Phone基类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface BasePhone : NSObject

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Phone子类之Android&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Android : BasePhone

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Phone子类之iPhone&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface iPhone : BasePhone

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;产品-Watch&quot;&gt;&lt;a href=&quot;#产品-Watch&quot; class=&quot;headerlink&quot; title=&quot;产品 Watch&quot;&gt;&lt;/a&gt;产品 Watch&lt;/h2&gt;&lt;p&gt;Whatch产品基类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface BaseWatch : NSObject

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Whatch产品子类之iWatch&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface iWatch : BaseWatch

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Whatch产品子类之AndroidWatch&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface AndroidWatch : BaseWatch

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;工厂-2&quot;&gt;&lt;a href=&quot;#工厂-2&quot; class=&quot;headerlink&quot; title=&quot;工厂&quot;&gt;&lt;/a&gt;工厂&lt;/h2&gt;&lt;p&gt;工厂基类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@implementation BaseFactory

- (BasePhone *)createPhone {

return nil;
}

- (BaseWatch *)createWatch {

return nil;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;工厂子类Apple&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface AppleFactory : BaseFactory

- (BasePhone *)createPhone {

return [[iPhone alloc] init];
}

- (BaseWatch *)createWatch {

return [[iWatch alloc] init];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;工厂子类Google&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface GoogleFactory : BaseFactory

- (BasePhone *)createPhone {

return [[Android alloc] init];
}

- (BaseWatch *)createWatch {

return [[AndroidWatch alloc] init];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;创建具体工厂&quot;&gt;&lt;a href=&quot;#创建具体工厂&quot; class=&quot;headerlink&quot; title=&quot;创建具体工厂&quot;&gt;&lt;/a&gt;创建具体工厂&lt;/h2&gt;&lt;p&gt;FactoryManager&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef enum : NSUInteger {

kApple   = 0x11,
kGoogle,

} EFactoryType;

@interface FactoryManager : NSObject

+ (BaseFactory *)factoryWithBrand:(EFactoryType)factoryType {

BaseFactory *factory = nil;

if (factoryType == kApple) {

    factory = [[AppleFactory alloc] init];

} else if (factoryType == kGoogle) {

    factory = [[GoogleFactory alloc] init];
}

return factory;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;工厂的使用-1&quot;&gt;&lt;a href=&quot;#工厂的使用-1&quot; class=&quot;headerlink&quot; title=&quot;工厂的使用&quot;&gt;&lt;/a&gt;工厂的使用&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];

// 获取工厂
BaseFactory *factory = [FactoryManager factoryWithBrand:kGoogle];

// 创建商品
BasePhone *phone = [factory createPhone];
BaseWatch *watch = [factory createWatch];

NSLog(@&amp;quot;%@ %@&amp;quot;, phone, watch);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;框架级别的工厂类-NSNumber&quot;&gt;&lt;a href=&quot;#框架级别的工厂类-NSNumber&quot; class=&quot;headerlink&quot; title=&quot;框架级别的工厂类:NSNumber&quot;&gt;&lt;/a&gt;框架级别的工厂类:NSNumber&lt;/h1&gt;&lt;p&gt;因为NSNumber是抽象类，所以以下代码结果为null，NSNumber是一个抽象类，其父类NSValue也是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSLog(@&amp;quot;%@&amp;quot;, [[NSNumber alloc] init]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据客户需求，制造出相关工厂&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSNumber *number     = [NSNumber numberWithInt:100];
NSNumber *floatValue = [NSNumber numberWithFloat:100.f];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下结果都为d,产品可以互相转换，因为NSNumber只处理数值型的数据.这是和普通抽象工厂不同的地方&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSLog(@&amp;quot;%c&amp;quot;, [number charValue]);
NSLog(@&amp;quot;%c&amp;quot;, [floatValue charValue]);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;枚举类型的定义&quot;&gt;&lt;a href=&quot;#枚举类型的定义&quot; class=&quot;headerlink&quot; title=&quot;枚举类型的定义&quot;&gt;&lt;/a&gt;枚举类型的定义&lt;/h1&gt;&lt;p&gt;使用枚举定义手机的类型，注意起名字时，用大写的E+名字 = EDevieType&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef enum : NSUInteger {
kiPhone   = 0x11,
kAndroid,
kNokia,

} EDevieType;    
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工厂&quot;&gt;&lt;a href=&quot;#工厂&quot; class=&quot;headerlink&quot; title=&quot;工厂&quot;&gt;&lt;/a&gt;工厂&lt;/h1&gt;&lt;p&gt;工厂&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;制造产品&lt;/li&gt;
&lt;li&gt;将制造工艺进行了封装&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;客户&lt;/p&gt;
&lt;ol&gt;
&lt;li
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
</feed>
