<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cowboy Tech</title>
  <subtitle>The best preparation for tomorrow is doing your best today</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jackliu17.github.io/"/>
  <updated>2016-05-20T06:15:30.000Z</updated>
  <id>http://jackliu17.github.io/</id>
  
  <author>
    <name>Jack Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS数据存储-NSUserDefault</title>
    <link href="http://jackliu17.github.io/2016/05/20/iOS%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-NSUserDefault/"/>
    <id>http://jackliu17.github.io/2016/05/20/iOS数据存储-NSUserDefault/</id>
    <published>2016-05-20T06:13:21.000Z</published>
    <updated>2016-05-20T06:15:30.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;读取数据-from-NSUserDeafult&quot;&gt;&lt;a href=&quot;#读取数据-from-NSUserDeafult&quot; class=&quot;headerlink&quot; title=&quot;读取数据 from NSUserDeafult&quot;&gt;&lt;/a&gt;读取数据 from NSUserDeafult&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;var ud:NSUserDefaults!

ud = NSUserDefaults.standardUserDefaults()

    if let value: AnyObject = ud.objectForKey(&amp;quot;data&amp;quot;){

        inputTxt.text = value as! String

    }else{

        inputTxt.text = &amp;quot;No value&amp;quot;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;保存数据-to-NSUserDefaults&quot;&gt;&lt;a href=&quot;#保存数据-to-NSUserDefaults&quot; class=&quot;headerlink&quot; title=&quot;保存数据 to NSUserDefaults&quot;&gt;&lt;/a&gt;保存数据 to NSUserDefaults&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;ud.setObject(inputTxt.text, forKey: &amp;quot;data&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;AnyObject&quot;&gt;&lt;a href=&quot;#AnyObject&quot; class=&quot;headerlink&quot; title=&quot;AnyObject ?&quot;&gt;&lt;/a&gt;AnyObject ?&lt;/h1&gt;&lt;p&gt;如果发现返回值有问号 AnyObject?，有可能为空。最好先做如下判断&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if let value: AnyObject = ud.objectForKey(&amp;quot;data&amp;quot;){

    inputTxt.text = value as! String

}else{

    inputTxt.text = &amp;quot;No value&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;ShowTips-proj&quot;&gt;&lt;a href=&quot;#ShowTips-proj&quot; class=&quot;headerlink&quot; title=&quot;ShowTips proj&quot;&gt;&lt;/a&gt;ShowTips proj&lt;/h1&gt;&lt;h2 id=&quot;Global-setting&quot;&gt;&lt;a href=&quot;#Global-setting&quot; class=&quot;headerlink&quot; title=&quot;Global setting&quot;&gt;&lt;/a&gt;Global setting&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var ud:NSUserDefaults!
ud = NSUserDefaults.standardUserDefaults()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Get-data&quot;&gt;&lt;a href=&quot;#Get-data&quot; class=&quot;headerlink&quot; title=&quot;Get data&quot;&gt;&lt;/a&gt;Get data&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;mySwitch.on = ud.boolForKey(&amp;quot;showTips&amp;quot;)

if mySwitch.on{
    UIAlertView(title: &amp;quot;提示&amp;quot;, message: &amp;quot;今天要下雨，出门要带雨具哦！&amp;quot;, delegate: nil, cancelButtonTitle: &amp;quot;好的&amp;quot;).show()
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Save-data&quot;&gt;&lt;a href=&quot;#Save-data&quot; class=&quot;headerlink&quot; title=&quot;Save data&quot;&gt;&lt;/a&gt;Save data&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;ud.setBool(mySwitch.on, forKey: &amp;quot;showTips&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;读取数据-from-NSUserDeafult&quot;&gt;&lt;a href=&quot;#读取数据-from-NSUserDeafult&quot; class=&quot;headerlink&quot; title=&quot;读取数据 from NSUserDeafult&quot;&gt;&lt;/a&gt;读取数据 from NSUserD
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_dataStorage" scheme="http://jackliu17.github.io/tags/iOS-dataStorage/"/>
    
  </entry>
  
  <entry>
    <title>iOS数据存储-XML</title>
    <link href="http://jackliu17.github.io/2016/05/20/iOS%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-XML/"/>
    <id>http://jackliu17.github.io/2016/05/20/iOS数据存储-XML/</id>
    <published>2016-05-20T02:45:50.000Z</published>
    <updated>2016-05-20T02:48:14.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Start-parse-XML&quot;&gt;&lt;a href=&quot;#Start-parse-XML&quot; class=&quot;headerlink&quot; title=&quot;Start parse XML&quot;&gt;&lt;/a&gt;Start parse XML&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注意要遵循协议NSXMLParserDelegate&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class ViewController: UIViewController,NSXMLParserDelegate {

    override func viewDidLoad() {
        super.viewDidLoad()

        let filePath = NSBundle.mainBundle().pathForResource(&amp;quot;data&amp;quot;, ofType: &amp;quot;xml&amp;quot;)!
        let fileUrl = NSURL(fileURLWithPath: filePath )
        let parser = NSXMLParser(contentsOfURL:fileUrl)

        parser!.delegate = self
        parser!.parse()

    }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Parse-to-get-node-and-attribute&quot;&gt;&lt;a href=&quot;#Parse-to-get-node-and-attribute&quot; class=&quot;headerlink&quot; title=&quot;Parse to get node and attribute&quot;&gt;&lt;/a&gt;Parse to get node and attribute&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;var currentNodeName:String!

func parser(parser: NSXMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [String : String]) {      
    currentNodeName = elementName
    if elementName == &amp;quot;person&amp;quot; { 
        //需要判断，如果是空值的话，也不会报错
        if let age: AnyObject=attributeDict[&amp;quot;age&amp;quot;]{
            print(&amp;quot;age:\(age)&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Parse-to-get-Value-in-node&quot;&gt;&lt;a href=&quot;#Parse-to-get-Value-in-node&quot; class=&quot;headerlink&quot; title=&quot;Parse to get Value in node&quot;&gt;&lt;/a&gt;Parse to get Value in node&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;//获得节点的实际内容
func parser(parser: NSXMLParser, foundCharacters string: String) {

    let str = string.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())

    if str != &amp;quot;&amp;quot;{

        print(&amp;quot;current node : \(currentNodeName), value: \(str)&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;剔除空格的字符串&quot;&gt;&lt;a href=&quot;#剔除空格的字符串&quot; class=&quot;headerlink&quot; title=&quot;剔除空格的字符串&quot;&gt;&lt;/a&gt;剔除空格的字符串&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let str = string.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;判断不为空&quot;&gt;&lt;a href=&quot;#判断不为空&quot; class=&quot;headerlink&quot; title=&quot;判断不为空&quot;&gt;&lt;/a&gt;判断不为空&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;if str != &amp;quot;&amp;quot;{
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Question-Project&quot;&gt;&lt;a href=&quot;#Question-Project&quot; class=&quot;headerlink&quot; title=&quot;Question Project&quot;&gt;&lt;/a&gt;Question Project&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_dataStorageXmlProj.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Qustion-Model&quot;&gt;&lt;a href=&quot;#Qustion-Model&quot; class=&quot;headerlink&quot; title=&quot;Qustion Model&quot;&gt;&lt;/a&gt;Qustion Model&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Question: NSObject {

var question:String!
var right:String!
var anwserA:String!
var anwserB:String!
var anwserC:String!
var anwserD:String!
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Parse-all-node-automatically-without-loop&quot;&gt;&lt;a href=&quot;#Parse-all-node-automatically-without-loop&quot; class=&quot;headerlink&quot; title=&quot;Parse all node automatically without loop&quot;&gt;&lt;/a&gt;Parse all node automatically without loop&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var questions:Array&amp;lt;Question&amp;gt; = []    
var currentQuestion:Question!

func parser(parser: NSXMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [String : String]) {

    if elementName == &amp;quot;question&amp;quot; {

        currentQuestion = Question()
        questions.append(currentQuestion)
        currentQuestion.question = attributeDict[&amp;quot;text&amp;quot;]! as String
        currentQuestion.right = attributeDict[&amp;quot;right&amp;quot;]! as String

    } else if elementName == &amp;quot;anwser&amp;quot; {

        let tag = attributeDict[&amp;quot;tag&amp;quot;]! as String

        if tag == &amp;quot;A&amp;quot;{
            currentQuestion.anwserA = attributeDict[&amp;quot;text&amp;quot;]! as String
        }else if tag == &amp;quot;B&amp;quot;{
            currentQuestion.anwserB = attributeDict[&amp;quot;text&amp;quot;]! as String
        }else if tag == &amp;quot;C&amp;quot;{
            currentQuestion.anwserC = attributeDict[&amp;quot;text&amp;quot;]! as String
        }else if tag == &amp;quot;D&amp;quot;{
            currentQuestion.anwserD = attributeDict[&amp;quot;text&amp;quot;]! as String
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;After-Parse-finish&quot;&gt;&lt;a href=&quot;#After-Parse-finish&quot; class=&quot;headerlink&quot; title=&quot;After Parse finish&quot;&gt;&lt;/a&gt;After Parse finish&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func parserDidEndDocument(parser: NSXMLParser) {
...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Add-new-element-to-Array&quot;&gt;&lt;a href=&quot;#Add-new-element-to-Array&quot; class=&quot;headerlink&quot; title=&quot;Add new element to Array&quot;&gt;&lt;/a&gt;Add new element to Array&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;questions.append(currentQuestion)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Judge-if-equal-or-not&quot;&gt;&lt;a href=&quot;#Judge-if-equal-or-not&quot; class=&quot;headerlink&quot; title=&quot;Judge if equal or not&quot;&gt;&lt;/a&gt;Judge if equal or not&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;if tag == &amp;quot;A&amp;quot;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Start-parse-XML&quot;&gt;&lt;a href=&quot;#Start-parse-XML&quot; class=&quot;headerlink&quot; title=&quot;Start parse XML&quot;&gt;&lt;/a&gt;Start parse XML&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注意要遵循协议NSX
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_dataStorage" scheme="http://jackliu17.github.io/tags/iOS-dataStorage/"/>
    
  </entry>
  
  <entry>
    <title>iOS数据存储-JSON</title>
    <link href="http://jackliu17.github.io/2016/05/19/iOS%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-JSON/"/>
    <id>http://jackliu17.github.io/2016/05/19/iOS数据存储-JSON/</id>
    <published>2016-05-19T06:44:42.000Z</published>
    <updated>2016-05-19T06:47:08.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;读取JSON文件&quot;&gt;&lt;a href=&quot;#读取JSON文件&quot; class=&quot;headerlink&quot; title=&quot;读取JSON文件&quot;&gt;&lt;/a&gt;读取JSON文件&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let filePath: NSString = NSBundle.mainBundle().pathForResource(&amp;quot;obj&amp;quot;, ofType: &amp;quot;json&amp;quot;)!
let jsonUrl = NSURL(fileURLWithPath: filePath as String)
let jsonData = NSData(contentsOfURL: jsonUrl)

do{       
let json = try NSJSONSerialization.JSONObjectWithData(jsonData!, options: NSJSONReadingOptions())
let lang:AnyObject = json.objectForKey(&amp;quot;language&amp;quot;)!
print(lang)           
}catch{
print(error)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;生成JSON数据&quot;&gt;&lt;a href=&quot;#生成JSON数据&quot; class=&quot;headerlink&quot; title=&quot;生成JSON数据&quot;&gt;&lt;/a&gt;生成JSON数据&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let dict = [&amp;quot;name&amp;quot;:&amp;quot;jikexueyuan&amp;quot;,&amp;quot;age&amp;quot;:1]
do{
    let jsonData = try NSJSONSerialization.dataWithJSONObject(dict, options: NSJSONWritingOptions())
    let str = NSString(data: jsonData, encoding: NSUTF8StringEncoding)!
    print(str)
}catch{
    print(error)
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;读取JSON文件&quot;&gt;&lt;a href=&quot;#读取JSON文件&quot; class=&quot;headerlink&quot; title=&quot;读取JSON文件&quot;&gt;&lt;/a&gt;读取JSON文件&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let filePath: NSString = NSBundle.main
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_dataStorage" scheme="http://jackliu17.github.io/tags/iOS-dataStorage/"/>
    
  </entry>
  
  <entry>
    <title>iOS数据存储-CoreData</title>
    <link href="http://jackliu17.github.io/2016/05/19/iOS%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-CoreData/"/>
    <id>http://jackliu17.github.io/2016/05/19/iOS数据存储-CoreData/</id>
    <published>2016-05-19T02:51:09.000Z</published>
    <updated>2016-05-19T02:56:52.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;保存数据&quot;&gt;&lt;a href=&quot;#保存数据&quot; class=&quot;headerlink&quot; title=&quot;保存数据&quot;&gt;&lt;/a&gt;保存数据&lt;/h1&gt;&lt;h2 id=&quot;新建Entity&quot;&gt;&lt;a href=&quot;#新建Entity&quot; class=&quot;headerlink&quot; title=&quot;新建Entity&quot;&gt;&lt;/a&gt;新建Entity&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_dataStorageCoreData1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;import UIKit
import CoreData

class ViewController: UIViewController {

override func viewDidLoad(){
    super.viewDidLoad()

    let context = (UIApplication.sharedApplication()
        .delegate as! AppDelegate)
        .managedObjectContext


    let row:AnyObject = NSEntityDescription.insertNewObjectForEntityForName(&amp;quot;Users&amp;quot;, inManagedObjectContext: context)

    row.setValue(&amp;quot;jikexueyuan&amp;quot;, forKey: &amp;quot;name&amp;quot;)
    row.setValue(1, forKey: &amp;quot;age&amp;quot;)

    do{
     try context.save()
    }catch{
    print(error)
    }

}
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;注意要导入CoreData&lt;/li&gt;
&lt;li&gt;这样赋值只能是单个数据，如果要添加多条数据，需要循环&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;打印数据文件路径&quot;&gt;&lt;a href=&quot;#打印数据文件路径&quot; class=&quot;headerlink&quot; title=&quot;打印数据文件路径&quot;&gt;&lt;/a&gt;打印数据文件路径&lt;/h2&gt;&lt;p&gt;AppDelegate&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lazy var persistentStoreCoordinator: NSPersistentStoreCoordinator = {

    let coordinator = NSPersistentStoreCoordinator(managedObjectModel: self.managedObjectModel)
    let url = self.applicationDocumentsDirectory.URLByAppendingPathComponent(&amp;quot;SingleViewCoreData.sqlite&amp;quot;)
    print(url)
    ......

//Result
file:///Users/jackliu/Library/Developer/CoreSimulator/Devices/A2C2C116-004D-4A10-95F0-654B4D89D1EB/data/Containers
/Data/Application/F3D3A90B-A29D-42C9-A699-3FC44EF0D2CA/Documents/
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Application-Sqlitebrowser&quot;&gt;&lt;a href=&quot;#Application-Sqlitebrowser&quot; class=&quot;headerlink&quot; title=&quot;Application Sqlitebrowser&quot;&gt;&lt;/a&gt;Application Sqlitebrowser&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_dataStorageCoreData2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;读取数据&quot;&gt;&lt;a href=&quot;#读取数据&quot; class=&quot;headerlink&quot; title=&quot;读取数据&quot;&gt;&lt;/a&gt;读取数据&lt;/h1&gt;&lt;h2 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;import UIKit
import CoreData

class UsersTableViewController: UITableViewController {

    var dataArr:Array&amp;lt;AnyObject&amp;gt; = []
    var context:NSManagedObjectContext!

override func viewDidLoad() {
        super.viewDidLoad()

    context = (UIApplication.sharedApplication()
                .delegate as! AppDelegate)
                .managedObjectContext

            refreshData()
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;从sqlite数据库中读取&quot;&gt;&lt;a href=&quot;#从sqlite数据库中读取&quot; class=&quot;headerlink&quot; title=&quot;从sqlite数据库中读取&quot;&gt;&lt;/a&gt;从sqlite数据库中读取&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func refreshData(){ 

let f = NSFetchRequest(entityName: &amp;quot;Users&amp;quot;)

do{
try dataArr = context.executeFetchRequest(f)
}catch{
print(error)
}
tableView.reloadData()
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;KV取值配置Cell&quot;&gt;&lt;a href=&quot;#KV取值配置Cell&quot; class=&quot;headerlink&quot; title=&quot;KV取值配置Cell&quot;&gt;&lt;/a&gt;KV取值配置Cell&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;override func tableView(tableView: UITableView,cellForRowAtIndexPath indexPath: NSIndexPath) -&amp;gt; UITableViewCell {

    let cell = tableView.dequeueReusableCellWithIdentifier(&amp;quot;cell&amp;quot;, forIndexPath: indexPath)as UITableViewCell

    let label = cell.viewWithTag(2) as! UILabel

    let name: AnyObject! = dataArr[indexPath.row].valueForKey(&amp;quot;name&amp;quot;)
    let age: AnyObject! = dataArr[indexPath.row].valueForKey(&amp;quot;age&amp;quot;)

    label.text =  &amp;quot;name:\(name),age:\(age)&amp;quot;
    return cell
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;viewWithTag&quot;&gt;&lt;a href=&quot;#viewWithTag&quot; class=&quot;headerlink&quot; title=&quot;viewWithTag( )&quot;&gt;&lt;/a&gt;viewWithTag( )&lt;/h2&gt;&lt;p&gt;通过标签找到子视图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let label = cell.viewWithTag(2) as! UILabel
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;点击Cell跳转视图&quot;&gt;&lt;a href=&quot;#点击Cell跳转视图&quot; class=&quot;headerlink&quot; title=&quot;点击Cell跳转视图&quot;&gt;&lt;/a&gt;点击Cell跳转视图&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;override func tableView(tableView: UITableView,didSelectRowAtIndexPath indexPath: NSIndexPath) {

    let data = dataArr[indexPath.row] as! NSManagedObject

    let vc = storyboard!.instantiateViewControllerWithIdentifier(&amp;quot;UserContent&amp;quot;)as! UserContentViewController

    vc.data = data

    presentViewController(vc, animated: true, completion: nil)

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;视图跳转-StoryboardId&quot;&gt;&lt;a href=&quot;#视图跳转-StoryboardId&quot; class=&quot;headerlink&quot; title=&quot;视图跳转 - StoryboardId&quot;&gt;&lt;/a&gt;视图跳转 - StoryboardId&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let vc = storyboard!.instantiateViewControllerWithIdentifier(&amp;quot;UserContent&amp;quot;)as! UserContentViewController

vc.data = data

presentViewController(vc, animated: true, completion: nil)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_dataStorageCoredata03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;返回到tableView视图时&quot;&gt;&lt;a href=&quot;#返回到tableView视图时&quot; class=&quot;headerlink&quot; title=&quot;返回到tableView视图时&quot;&gt;&lt;/a&gt;返回到tableView视图时&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;override func viewWillAppear(animated: Bool) {
    refreshData()
}

func refreshData(){ 

let f = NSFetchRequest(entityName: &amp;quot;Users&amp;quot;)

do{
try dataArr = context.executeFetchRequest(f)
}catch{
print(error)
}
tableView.reloadData()
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;删除数据&quot;&gt;&lt;a href=&quot;#删除数据&quot; class=&quot;headerlink&quot; title=&quot;删除数据&quot;&gt;&lt;/a&gt;删除数据&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;override func tableView(tableView: UITableView,canEditRowAtIndexPath indexPath: NSIndexPath) -&amp;gt; Bool {

    return true
}


override func tableView(tableView: UITableView,commitEditingStyle editingStyle: UITableViewCellEditingStyle,forRowAtIndexPath indexPath: NSIndexPath) {
    if editingStyle == .Delete {

        //从数据库删除
        context.deleteObject(dataArr[indexPath.row] as! NSManagedObject)

        //存档
        do {
          try context.save()
        } catch _ {
        }

        //刷新
        refreshData()

    } else if editingStyle == .Insert {

    }    
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;接收到传递过来的CoreData数据&quot;&gt;&lt;a href=&quot;#接收到传递过来的CoreData数据&quot; class=&quot;headerlink&quot; title=&quot;接收到传递过来的CoreData数据&quot;&gt;&lt;/a&gt;接收到传递过来的CoreData数据&lt;/h1&gt;&lt;p&gt;UserContentViewController&lt;/p&gt;
&lt;h2 id=&quot;取值&quot;&gt;&lt;a href=&quot;#取值&quot; class=&quot;headerlink&quot; title=&quot;取值&quot;&gt;&lt;/a&gt;取值&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var data:NSManagedObject!

tfName.text = data.valueForKey(&amp;quot;name&amp;quot;) as? String        
let age: AnyObject! = data.valueForKey(&amp;quot;age&amp;quot;)
tfAge.text = &amp;quot;\(age)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;赋值存档&quot;&gt;&lt;a href=&quot;#赋值存档&quot; class=&quot;headerlink&quot; title=&quot;赋值存档&quot;&gt;&lt;/a&gt;赋值存档&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;data.setValue(tfName.text, forKey: &amp;quot;name&amp;quot;)
data.setValue(Int(tfAge.text!), forKey: &amp;quot;age&amp;quot;)

do{
    try data.managedObjectContext!.save()
}catch{
    print(error)
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;保存数据&quot;&gt;&lt;a href=&quot;#保存数据&quot; class=&quot;headerlink&quot; title=&quot;保存数据&quot;&gt;&lt;/a&gt;保存数据&lt;/h1&gt;&lt;h2 id=&quot;新建Entity&quot;&gt;&lt;a href=&quot;#新建Entity&quot; class=&quot;headerlink&quot; title=&quot;新
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_dataStorage" scheme="http://jackliu17.github.io/tags/iOS-dataStorage/"/>
    
  </entry>
  
  <entry>
    <title>iOS数据存储-plist文件</title>
    <link href="http://jackliu17.github.io/2016/05/18/iOS%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-plist%E6%96%87%E4%BB%B6/"/>
    <id>http://jackliu17.github.io/2016/05/18/iOS数据存储-plist文件/</id>
    <published>2016-05-18T02:39:46.000Z</published>
    <updated>2016-05-18T02:42:00.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;读取数组&quot;&gt;&lt;a href=&quot;#读取数组&quot; class=&quot;headerlink&quot; title=&quot;读取数组&quot;&gt;&lt;/a&gt;读取数组&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let arr = NSArray(contentsOfURL: NSURL(fileURLWithPath: NSBundle.mainBundle().pathForResource(&amp;quot;arr&amp;quot;, ofType: &amp;quot;plist&amp;quot;)!))
print(arr)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;读取字典&quot;&gt;&lt;a href=&quot;#读取字典&quot; class=&quot;headerlink&quot; title=&quot;读取字典&quot;&gt;&lt;/a&gt;读取字典&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let dict = NSDictionary(contentsOfURL: NSURL(fileURLWithPath: NSBundle.mainBundle().pathForResource(&amp;quot;data&amp;quot;, ofType: &amp;quot;plist&amp;quot;)!))
print(dict)

let name:String = dict![&amp;quot;name&amp;quot;] as! String
print(&amp;quot;name : \(name)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;读取数组&quot;&gt;&lt;a href=&quot;#读取数组&quot; class=&quot;headerlink&quot; title=&quot;读取数组&quot;&gt;&lt;/a&gt;读取数组&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let arr = NSArray(contentsOfURL: NSURL(fileURLWithPath
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_dataStorage" scheme="http://jackliu17.github.io/tags/iOS-dataStorage/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目017.转盘抽奖</title>
    <link href="http://jackliu17.github.io/2016/05/17/iOS%E9%A1%B9%E7%9B%AE017-%E8%BD%AC%E7%9B%98%E6%8A%BD%E5%A5%96/"/>
    <id>http://jackliu17.github.io/2016/05/17/iOS项目017-转盘抽奖/</id>
    <published>2016-05-17T06:18:42.000Z</published>
    <updated>2016-05-17T06:57:42.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj01701.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;项目结构&quot;&gt;&lt;a href=&quot;#项目结构&quot; class=&quot;headerlink&quot; title=&quot;项目结构&quot;&gt;&lt;/a&gt;项目结构&lt;/h1&gt;&lt;h1 id=&quot;匿名类目-vs-IBOutlet&quot;&gt;&lt;a href=&quot;#匿名类目-vs-IBOutlet&quot; class=&quot;headerlink&quot; title=&quot;匿名类目 vs IBOutlet&quot;&gt;&lt;/a&gt;匿名类目 vs IBOutlet&lt;/h1&gt;&lt;p&gt;只有在.m文件中建立了匿名类目，才能连接storyBoard中的IBOutlet&lt;/p&gt;
&lt;p&gt;view.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface WheelView ()
@property (weak, nonatomic) IBOutlet UIImageView *centerView;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;加载xib文件&quot;&gt;&lt;a href=&quot;#加载xib文件&quot; class=&quot;headerlink&quot; title=&quot;加载xib文件&quot;&gt;&lt;/a&gt;加载xib文件&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;+ (instancetype)wheelView{
return [[[NSBundle mainBundle] loadNibNamed:@&amp;quot;WheelView&amp;quot; owner:nil options:nil] lastObject];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;裁剪图片&quot;&gt;&lt;a href=&quot;#裁剪图片&quot; class=&quot;headerlink&quot; title=&quot;裁剪图片&quot;&gt;&lt;/a&gt;裁剪图片&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;UIImage *img = [UIImage imageNamed:@&amp;quot;LuckyAstrology&amp;quot;];
CGFloat smallW = img.size.width / 12 * [UIScreen mainScreen].scale;
CGFloat smallH = img.size.height * [UIScreen mainScreen].scale; 
CGRect smallRect = CGRectMake(index * smallW, 0, smallW, smallH);
CGImageRef smallImage = CGImageCreateWithImageInRect(img.CGImage, smallRect);
[btn setImage:[UIImage imageWithCGImage:smallImage] forState:UIControlStateNormal];
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj01701.png&quot;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_animation" scheme="http://jackliu17.github.io/tags/iOS-animation/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目018.CAAnimation简介</title>
    <link href="http://jackliu17.github.io/2016/05/17/iOS%E9%A1%B9%E7%9B%AE018-CAAnimation%E7%AE%80%E4%BB%8B/"/>
    <id>http://jackliu17.github.io/2016/05/17/iOS项目018-CAAnimation简介/</id>
    <published>2016-05-17T00:40:57.000Z</published>
    <updated>2016-05-17T03:30:37.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;CAAnimation&quot;&gt;&lt;a href=&quot;#CAAnimation&quot; class=&quot;headerlink&quot; title=&quot;CAAnimation&quot;&gt;&lt;/a&gt;CAAnimation&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;基础动画 CABasicAnimation&lt;/li&gt;
&lt;li&gt;关键帧动画CAKeyframeAnimation&lt;/li&gt;
&lt;li&gt;转场动画 CATransition&lt;/li&gt;
&lt;li&gt;动画组 CAAnimationGroup&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上基础动画和关键帧动画是隐式动画，比如bound值是animable的&lt;/p&gt;
&lt;h1 id=&quot;CABasicAnimation&quot;&gt;&lt;a href=&quot;#CABasicAnimation&quot; class=&quot;headerlink&quot; title=&quot;CABasicAnimation&quot;&gt;&lt;/a&gt;CABasicAnimation&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj01801.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;viewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@property (nonatomic, strong) CALayer *layer;

- (void)viewDidLoad {
[super viewDidLoad];

CALayer *layer =[CALayer layer];
layer.bounds = CGRectMake(0, 0, 100, 100);
layer.position = CGPointMake(100,100);
layer.backgroundColor = [UIColor yellowColor].CGColor;
[self.view.layer addSublayer:layer];
self.layer = layer;  

}

-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event{
//[self animationScale];
//[self animationRotation];
//[self animationTranslate];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;keyPath-toValue-fromValue-byValue&quot;&gt;&lt;a href=&quot;#keyPath-toValue-fromValue-byValue&quot; class=&quot;headerlink&quot; title=&quot;keyPath, toValue, fromValue, byValue&quot;&gt;&lt;/a&gt;keyPath, toValue, fromValue, byValue&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;keyPath  决定了执行怎样的动画&lt;/li&gt;
&lt;li&gt;toValue 到达哪个点&lt;/li&gt;
&lt;li&gt;byValue 是增加多少值&lt;/li&gt;
&lt;li&gt;fromValue 从哪个点开始移动&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;缩放&quot;&gt;&lt;a href=&quot;#缩放&quot; class=&quot;headerlink&quot; title=&quot;缩放&quot;&gt;&lt;/a&gt;缩放&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (void)animationScale{

CABasicAnimation *animation = [CABasicAnimation animation];

animation.keyPath = @&amp;quot;bounds&amp;quot;;
animation.toValue = [NSValue valueWithCGRect:CGRectMake(0, 0, 50, 50)];

animation.duration = 2;
animation.removedOnCompletion = NO;
animation.fillMode = @&amp;quot;forwards&amp;quot;;

[self.layer addAnimation:animation forKey:nil];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;平移&quot;&gt;&lt;a href=&quot;#平移&quot; class=&quot;headerlink&quot; title=&quot;平移&quot;&gt;&lt;/a&gt;平移&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//toValue是到达哪个点
animation.keyPath = @&amp;quot;position&amp;quot;;
animation.toValue = [NSValue valueWithCGPoint:CGPointMake(200, 200)];

//byValue是xy轴分别增加多少
animation.keyPath = @&amp;quot;position&amp;quot;;
animation.byValue = [NSValue valueWithCGPoint:CGPointMake(200, 200)];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;旋转&quot;&gt;&lt;a href=&quot;#旋转&quot; class=&quot;headerlink&quot; title=&quot;旋转&quot;&gt;&lt;/a&gt;旋转&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;animation.keyPath = @&amp;quot;transform&amp;quot;;
animation.toValue = [NSValue valueWithCATransform3D:CATransform3DMakeRotation(M_PI_4, 1, 1, 0)];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;CAKeyframeAnimation&quot;&gt;&lt;a href=&quot;#CAKeyframeAnimation&quot; class=&quot;headerlink&quot; title=&quot;CAKeyframeAnimation&quot;&gt;&lt;/a&gt;CAKeyframeAnimation&lt;/h1&gt;&lt;p&gt;效果：方块绕椭圆轨迹运动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)keyAnimation{
CAKeyframeAnimation *anim = [CAKeyframeAnimation animation];

//这些是和CABasicAnimation一样的
anim.keyPath = @&amp;quot;position&amp;quot;;
anim.removedOnCompletion = NO;
anim.fillMode = kCAFillModeForwards;
anim.duration = 2.0;

//设置动画的路径
CGMutablePathRef path = CGPathCreateMutable();
CGPathAddEllipseInRect(path, NULL, CGRectMake(100, 100, 200, 200));
anim.path = path;
CGPathRelease(path);

// 设置动画的执行节奏
// kCAMediaTimingFunctionEaseInEaseOut : 一开始比较慢, 中间会加速,  临近结束的时候, 会变慢
anim.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];

//可以执行代理方法
anim.delegate = self;

[self.layer addAnimation:anim forKey:nil];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;CATransition&quot;&gt;&lt;a href=&quot;#CATransition&quot; class=&quot;headerlink&quot; title=&quot;CATransition&quot;&gt;&lt;/a&gt;CATransition&lt;/h1&gt;&lt;h2 id=&quot;导航视图切换&quot;&gt;&lt;a href=&quot;#导航视图切换&quot; class=&quot;headerlink&quot; title=&quot;导航视图切换&quot;&gt;&lt;/a&gt;导航视图切换&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;-(IBAction)pushAction{

CATransition *transition = [CATransition animation];
transition.duration = 1;
transition.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];

//私有API
//transition.type = @&amp;quot;pageCurl&amp;quot;;
transition.type = @&amp;quot;cube&amp;quot;;//立体动画效果

[self.navigationController.view.layer addAnimation:transition forKey:@&amp;quot;navAnimation&amp;quot;];
DetailViewController *detailVC = [[DetailViewController alloc]init];
[self.navigationController showViewController:detailVC sender:nil];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;View切换&quot;&gt;&lt;a href=&quot;#View切换&quot; class=&quot;headerlink&quot; title=&quot;View切换&quot;&gt;&lt;/a&gt;View切换&lt;/h2&gt;&lt;p&gt;这里的animaView是UIViewController  —&amp;gt; view 里的subView&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-(IBAction)exchangeView{
CATransition *transition = [CATransition animation];
transition.duration = 1;
transition.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];

//私有API
//transition.type = @&amp;quot;pageCurl&amp;quot;;
transition.type = @&amp;quot;fade&amp;quot;;
transition.subtype = kCATransitionFromRight;

//设置具体动画
[_animaView exchangeSubviewAtIndex:0 withSubviewAtIndex:1];
[_animaView.layer addAnimation:transition forKey:@&amp;quot;myAnimation&amp;quot;];

}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CAAnimation&quot;&gt;&lt;a href=&quot;#CAAnimation&quot; class=&quot;headerlink&quot; title=&quot;CAAnimation&quot;&gt;&lt;/a&gt;CAAnimation&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;基础动画 CABasicAnimation&lt;/li&gt;
&lt;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_animation" scheme="http://jackliu17.github.io/tags/iOS-animation/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目015.CALayer简介</title>
    <link href="http://jackliu17.github.io/2016/05/17/iOS%E9%A1%B9%E7%9B%AE015-CALayer%E7%AE%80%E4%BB%8B/"/>
    <id>http://jackliu17.github.io/2016/05/17/iOS项目015-CALayer简介/</id>
    <published>2016-05-17T00:35:01.000Z</published>
    <updated>2016-05-17T00:37:36.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Set-UIImageView-CALayer&quot;&gt;&lt;a href=&quot;#Set-UIImageView-CALayer&quot; class=&quot;headerlink&quot; title=&quot;Set UIImageView CALayer&quot;&gt;&lt;/a&gt;Set UIImageView CALayer&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)initImgView{
UIImageView *imgView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&amp;quot;1.jpg&amp;quot;]];
imgView.frame = CGRectMake((kScreenWidth - 200)/2, (kScreenHeight - 200)/2, 200, 200);
[self.view addSubview:imgView];
.............
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;图像的CALayer层-阴影&quot;&gt;&lt;a href=&quot;#图像的CALayer层-阴影&quot; class=&quot;headerlink&quot; title=&quot;图像的CALayer层 - 阴影&quot;&gt;&lt;/a&gt;图像的CALayer层 - 阴影&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015sShadow.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//1.设置阴影
imgView.layer.shadowColor = [UIColor yellowColor].CGColor;
//2.阴影的偏移大小
imgView.layer.shadowOffset = CGSizeMake(10, 10);
//3.阴影的不透明度
imgView.layer.shadowOpacity = 0.5;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;图像的CALayer层-圆角&quot;&gt;&lt;a href=&quot;#图像的CALayer层-圆角&quot; class=&quot;headerlink&quot; title=&quot;图像的CALayer层 - 圆角&quot;&gt;&lt;/a&gt;图像的CALayer层 - 圆角&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015Round.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//4.设置圆角大小
imgView.layer.cornerRadius = 10;//设置圆角半径为10
imgView.layer.masksToBounds = YES;//强制内部的所有子层支持圆角效果，少了这个设置，UIImageView是不会有圆角效果的。设置之后，没有阴影效果
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;图像的CALayer层-边框&quot;&gt;&lt;a href=&quot;#图像的CALayer层-边框&quot; class=&quot;headerlink&quot; title=&quot;图像的CALayer层 - 边框&quot;&gt;&lt;/a&gt;图像的CALayer层 - 边框&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015Frame.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//5.设置边框
imgView.layer.borderWidth = 5;
imgView.layer.borderColor = [UIColor grayColor].CGColor;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;图像的CALayer层-3D旋转&quot;&gt;&lt;a href=&quot;#图像的CALayer层-3D旋转&quot; class=&quot;headerlink&quot; title=&quot;图像的CALayer层 - 3D旋转&quot;&gt;&lt;/a&gt;图像的CALayer层 - 3D旋转&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015Rotate.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//6.设置旋转 :利用transform属性可以设置旋转
//imgView.layer.transform = CATransform3DMakeRotation(M_PI_4, 1, 1, 0);//顺时针旋转45°,在x，y轴
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;图像的CALayer层-缩放&quot;&gt;&lt;a href=&quot;#图像的CALayer层-缩放&quot; class=&quot;headerlink&quot; title=&quot;图像的CALayer层 - 缩放&quot;&gt;&lt;/a&gt;图像的CALayer层 - 缩放&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015Scale.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;6.设置旋转 :利用transform属性可以设置缩放
imgView.layer.transform = CATransform3DMakeScale(0.5, 1, 0);//缩小0.5倍
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Add-CALayer-in-View&quot;&gt;&lt;a href=&quot;#Add-CALayer-in-View&quot; class=&quot;headerlink&quot; title=&quot;Add CALayer in View&quot;&gt;&lt;/a&gt;Add CALayer in View&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015CALayerInView.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;UIView里有CALayer这个图层&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)imageLayer{
CALayer *layer = [CALayer layer];
layer.backgroundColor = [UIColor grayColor].CGColor;
layer.bounds = CGRectMake(0, 0, 100, 100);
layer.position = CGPointMake(200, 200);
layer.anchorPoint = CGPointMake(0, 1);
layer.cornerRadius = 10;
layer.masksToBounds = YES;
layer.contents = (id)[UIImage imageNamed:@&amp;quot;1.jpg&amp;quot;].CGImage;
layer.transform = CATransform3DMakeRotation(M_PI_4, 1, 1, 0);
[self.view.layer addSublayer:layer];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;QuartzCore-for-CALayer&quot;&gt;&lt;a href=&quot;#QuartzCore-for-CALayer&quot; class=&quot;headerlink&quot; title=&quot;QuartzCore for CALayer&quot;&gt;&lt;/a&gt;QuartzCore for CALayer&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//导入框架 
#import &amp;lt;QuartzCore/QuartzCore.h&amp;gt;

CALayer *layer = [CALayer layer];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Position-vs-anchorPoint&quot;&gt;&lt;a href=&quot;#Position-vs-anchorPoint&quot; class=&quot;headerlink&quot; title=&quot;Position vs anchorPoint&quot;&gt;&lt;/a&gt;Position vs anchorPoint&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;position 设置CALayer在父图层中的位置，以父层的左上角为原点（0，0）&lt;/li&gt;
&lt;li&gt;anchorPoint锚点(定位点)决定CALayer的哪个点在position属性所指的位置,以自己的左上角为原点（0，0），默认值（0.5，0.5），x~y取值是0~1，右下角（1，1）&lt;/li&gt;
&lt;li&gt;即：哪个anchor点在position的位置&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;anchor-point-0-0&quot;&gt;&lt;a href=&quot;#anchor-point-0-0&quot; class=&quot;headerlink&quot; title=&quot;anchor point (0,0)&quot;&gt;&lt;/a&gt;anchor point (0,0)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015Anchor1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;anchor-point-1-1&quot;&gt;&lt;a href=&quot;#anchor-point-1-1&quot; class=&quot;headerlink&quot; title=&quot;anchor point (1,1)&quot;&gt;&lt;/a&gt;anchor point (1,1)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015Anchor2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;anchor-point-0-1&quot;&gt;&lt;a href=&quot;#anchor-point-0-1&quot; class=&quot;headerlink&quot; title=&quot;anchor point (0,1)&quot;&gt;&lt;/a&gt;anchor point (0,1)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015Anchor3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Customized-CALayer&quot;&gt;&lt;a href=&quot;#Customized-CALayer&quot; class=&quot;headerlink&quot; title=&quot;Customized CALayer&quot;&gt;&lt;/a&gt;Customized CALayer&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015CALayerCustomized.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Method-1&quot;&gt;&lt;a href=&quot;#Method-1&quot; class=&quot;headerlink&quot; title=&quot;Method 1.&quot;&gt;&lt;/a&gt;Method 1.&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;子类继承于CALayer，实现 drawInContext&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JKLayer&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;JKLayer.h&amp;quot;

@implementation JKLayer
-(void)drawInContext:(CGContextRef)ctx{
CGContextSetRGBFillColor(ctx, 0, 0, 1, 1);
CGContextAddEllipseInRect(ctx, CGRectMake(10,10, 100, 100));
CGContextFillPath(ctx);
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)initLayer{

JKLayer *layer = [JKLayer layer];
layer.bounds = CGRectMake(0, 0, 300, 300);
layer.anchorPoint = CGPointMake(0,0);
[layer setNeedsDisplay];//必须调用这个方法，layer才会显示
[self.view.layer addSublayer:layer];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Method-2&quot;&gt;&lt;a href=&quot;#Method-2&quot; class=&quot;headerlink&quot; title=&quot;Method 2.&quot;&gt;&lt;/a&gt;Method 2.&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;在控制器中设置代理，实现代理方法来画图层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)initLayer{

JKLayer *layer = [JKLayer layer];
layer.bounds = CGRectMake(0, 0, 300, 300);
layer.anchorPoint = CGPointMake(0,0);
layer.delegate = self;//不用协议，任何对象可以作为代理
[layer setNeedsDisplay];//必须调用这个方法，layer才会显示
[self.view.layer addSublayer:layer];

}

#pragma mark 代理方法
-(void)drawLayer:(CALayer *)layer inContext:(CGContextRef)ctx{
CGContextSetRGBFillColor(ctx, 0, 0, 1, 1);
CGContextAddEllipseInRect(ctx, CGRectMake(10,10, 100, 100));
CGContextFillPath(ctx);
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Set-UIImageView-CALayer&quot;&gt;&lt;a href=&quot;#Set-UIImageView-CALayer&quot; class=&quot;headerlink&quot; title=&quot;Set UIImageView CALayer&quot;&gt;&lt;/a&gt;Set UIImageView C
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_CALayer" scheme="http://jackliu17.github.io/tags/iOS-CALayer/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目011-012.绘制图形及小黄人</title>
    <link href="http://jackliu17.github.io/2016/05/16/iOS%E9%A1%B9%E7%9B%AE011-012-%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2%E5%8F%8A%E5%B0%8F%E9%BB%84%E4%BA%BA/"/>
    <id>http://jackliu17.github.io/2016/05/16/iOS项目011-012-绘制图形及小黄人/</id>
    <published>2016-05-16T06:18:56.000Z</published>
    <updated>2016-05-16T06:23:05.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Quartz-2D&quot;&gt;&lt;a href=&quot;#Quartz-2D&quot; class=&quot;headerlink&quot; title=&quot;Quartz 2D&quot;&gt;&lt;/a&gt;Quartz 2D&lt;/h1&gt;&lt;h2 id=&quot;什么是Quartz-2D&quot;&gt;&lt;a href=&quot;#什么是Quartz-2D&quot; class=&quot;headerlink&quot; title=&quot;什么是Quartz 2D&quot;&gt;&lt;/a&gt;什么是Quartz 2D&lt;/h2&gt;&lt;p&gt;Quartz 2D是一个二维绘图引擎，Quartz 2D的API是C语言，来自于CoreGraphics框架，没有面向对象的思想&lt;/p&gt;
&lt;h2 id=&quot;Quartz-2D作用&quot;&gt;&lt;a href=&quot;#Quartz-2D作用&quot; class=&quot;headerlink&quot; title=&quot;Quartz 2D作用&quot;&gt;&lt;/a&gt;Quartz 2D作用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;作用，绘制图形：线条，三角形，矩形，圆形，弧形&lt;/li&gt;
&lt;li&gt;绘制文字&lt;/li&gt;
&lt;li&gt;绘制生成图像&lt;/li&gt;
&lt;li&gt;读取生成PDF&lt;/li&gt;
&lt;li&gt;截图裁剪图片&lt;/li&gt;
&lt;li&gt;自定义UI控件&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;图形上下文-Graphics-Context&quot;&gt;&lt;a href=&quot;#图形上下文-Graphics-Context&quot; class=&quot;headerlink&quot; title=&quot;图形上下文(Graphics Context)&quot;&gt;&lt;/a&gt;图形上下文(Graphics Context)&lt;/h1&gt;&lt;p&gt;是一个CGContextRef类型的数据.作用:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保存绘图信息，绘图状态&lt;/li&gt;
&lt;li&gt;决定绘制的输出目标，绘制到什么地方去，输出目标可以是PDF文件，Bitmap或者显示器的窗口上&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;什么时候自动调用drawRect&quot;&gt;&lt;a href=&quot;#什么时候自动调用drawRect&quot; class=&quot;headerlink&quot; title=&quot;什么时候自动调用drawRect&quot;&gt;&lt;/a&gt;什么时候自动调用drawRect&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;系统自动调用，视图显示在屏幕上的时候调用且调用一次&lt;/li&gt;
&lt;li&gt;需要更新的时候也会被调用，这时需要使seetNeedsDisplay&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)drawRect:(CGRect)rect &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Drawing code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;直线绘制&quot;&gt;&lt;a href=&quot;#直线绘制&quot; class=&quot;headerlink&quot; title=&quot;直线绘制&quot;&gt;&lt;/a&gt;直线绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawLine.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void drwaline(){

CGContextRef context = UIGraphicsGetCurrentContext();

CGContextSaveGState(context);

//第1条线-----------------------------------------

CGContextSetLineWidth(context, 20);
CGContextSetLineCap(context, kCGLineCapRound);
CGContextSetRGBStrokeColor(context, 1, 0, 0, 1);
CGContextMoveToPoint(context, 10, 10);
CGContextAddLineToPoint(context, 100, 100);
CGContextStrokePath(context);

CGContextRestoreGState(context);

//2条线-------------------------------------------

[[UIColor blueColor] set];
CGContextSetLineJoin(context, kCGLineJoinRound);
CGContextMoveToPoint(context, 100, 120);
CGContextAddLineToPoint(context, 150, 120);
CGContextAddLineToPoint(context, 150, 180);
CGContextStrokePath(context);

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;图像保留栈&quot;&gt;&lt;a href=&quot;#图像保留栈&quot; class=&quot;headerlink&quot; title=&quot;图像保留栈&quot;&gt;&lt;/a&gt;图像保留栈&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//将上下文复制一份放到栈中,防止两个图形互相影响
CGContextSaveGState(context);

....................

//将图形上下文出栈，替换当前的上下文，这样所设置的线条头尾部样式就不会影响到线条2
CGContextRestoreGState(context);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;矩形绘制&quot;&gt;&lt;a href=&quot;#矩形绘制&quot; class=&quot;headerlink&quot; title=&quot;矩形绘制&quot;&gt;&lt;/a&gt;矩形绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawRect2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void drawR(){

CGContextRef context = UIGraphicsGetCurrentContext();
CGContextAddRect(context, CGRectMake(10, 10, 120, 180));
[[UIColor purpleColor] setFill];
CGContextFillPath(context);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;三角形绘制&quot;&gt;&lt;a href=&quot;#三角形绘制&quot; class=&quot;headerlink&quot; title=&quot;三角形绘制&quot;&gt;&lt;/a&gt;三角形绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawTriangle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void drawTriangle(){

CGContextRef context = UIGraphicsGetCurrentContext();
CGContextMoveToPoint(context, 0, 0);
CGContextAddLineToPoint(context, 100, 100);
CGContextAddLineToPoint(context, 150, 100);
CGContextClosePath(context);
[[UIColor redColor] set];
CGContextStrokePath(context);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;圆形-椭圆形绘制&quot;&gt;&lt;a href=&quot;#圆形-椭圆形绘制&quot; class=&quot;headerlink&quot; title=&quot;圆形/椭圆形绘制&quot;&gt;&lt;/a&gt;圆形/椭圆形绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawCircle2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void drawCircle(){
CGContextRef context = UIGraphicsGetCurrentContext();

//绘制图形,宽度高度一样就是圆形，不一样就是椭圆
CGContextAddEllipseInRect(context, CGRectMake(50, 50, 130, 100));
CGContextSetLineWidth(context, 10);

CGContextStrokePath(context);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;弧形绘制&quot;&gt;&lt;a href=&quot;#弧形绘制&quot; class=&quot;headerlink&quot; title=&quot;弧形绘制&quot;&gt;&lt;/a&gt;弧形绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawArc.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CGFloat arc(CGFloat angle){
return angle * (M_PI / 180);
}

void drawArc(){

CGContextRef context = UIGraphicsGetCurrentContext();

//CGContextAddArc 内各个参数的定义
// x\y : 圆心
// radius : 半径
// startAngle : 开始角度
// endAngle : 结束角度
// clockwise : 圆弧的伸展方向(0:顺时针, 1:逆时针)

CGContextAddArc(context, 100, 100, 50, arc(90), arc(200), 1);

//CGContextFillPath(context); 如果采用这个方法就是填充弧形
 CGContextStrokePath(context);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;文字绘制&quot;&gt;&lt;a href=&quot;#文字绘制&quot; class=&quot;headerlink&quot; title=&quot;文字绘制&quot;&gt;&lt;/a&gt;文字绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawString.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void drawText(){
NSString *str = @&amp;quot;天道酬勤&amp;quot;;
NSMutableDictionary *attributes = [NSMutableDictionary dictionary];
attributes[NSFontAttributeName] = [UIFont systemFontOfSize:20];
attributes[NSForegroundColorAttributeName] = [UIColor purpleColor];
[str drawInRect:CGRectMake(100, 100, 100, 30) withAttributes:attributes];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;图像绘制-设置水印&quot;&gt;&lt;a href=&quot;#图像绘制-设置水印&quot; class=&quot;headerlink&quot; title=&quot;图像绘制(设置水印)&quot;&gt;&lt;/a&gt;图像绘制(设置水印)&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawImage2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void drawImg(){

UIImage *img = [UIImage imageNamed:@&amp;quot;1.jpg&amp;quot;];

//[img drawAtPoint:CGPointMake(50, 50)]; 这个方法是在某个点开始绘制
//[img drawInRect:CGRectMake(50, 50, 500, 500)]; 在某个矩形框内绘制

//以下方法规定了图片的宽高，以他来进行填充,可以画出格子图案
[img drawAsPatternInRect:CGRectMake(0, 0, 300, 300)];

NSString *str = @&amp;quot;刘米米爱兔宝宝&amp;quot;;
[str drawInRect:CGRectMake(0, 0, 100, 30) withAttributes:nil];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;JPG-vs-PNG&quot;&gt;&lt;a href=&quot;#JPG-vs-PNG&quot; class=&quot;headerlink&quot; title=&quot;JPG vs PNG&quot;&gt;&lt;/a&gt;JPG vs PNG&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//取得图片,jpg要后缀名，png不用
UIImage *img = [UIImage imageNamed:@&amp;quot;1.jpg&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;贝塞尔曲线绘制&quot;&gt;&lt;a href=&quot;#贝塞尔曲线绘制&quot; class=&quot;headerlink&quot; title=&quot;贝塞尔曲线绘制&quot;&gt;&lt;/a&gt;贝塞尔曲线绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawBezier.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void drawBezier(){

CGContextRef context = UIGraphicsGetCurrentContext();
//起点
CGContextMoveToPoint(context, 10, 10);
//2个控制点 和终点
CGContextAddCurveToPoint(context, 120, 100, 180, 50, 190, 190);
//1个控制点
//CGContextAddQuadCurveToPoint(context, 150, 200, 200, 100);
CGContextStrokePath(context);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;小黄人绘制&quot;&gt;&lt;a href=&quot;#小黄人绘制&quot; class=&quot;headerlink&quot; title=&quot;小黄人绘制&quot;&gt;&lt;/a&gt;小黄人绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawHuman.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;定义常量&quot;&gt;&lt;a href=&quot;#定义常量&quot; class=&quot;headerlink&quot; title=&quot;定义常量&quot;&gt;&lt;/a&gt;定义常量&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#define JKColor(r,g,b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1.0]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;中心的的x坐标&quot;&gt;&lt;a href=&quot;#中心的的x坐标&quot; class=&quot;headerlink&quot; title=&quot;中心的的x坐标&quot;&gt;&lt;/a&gt;中心的的x坐标&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;CGFloat topX = rect.size.width * 0.5;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Quartz-2D&quot;&gt;&lt;a href=&quot;#Quartz-2D&quot; class=&quot;headerlink&quot; title=&quot;Quartz 2D&quot;&gt;&lt;/a&gt;Quartz 2D&lt;/h1&gt;&lt;h2 id=&quot;什么是Quartz-2D&quot;&gt;&lt;a href=&quot;#什么是Quartz-2D&quot;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目014.九宫格手势解锁</title>
    <link href="http://jackliu17.github.io/2016/05/14/iOS%E9%A1%B9%E7%9B%AE014-%E4%B9%9D%E5%AE%AB%E6%A0%BC%E6%89%8B%E5%8A%BF%E8%A7%A3%E9%94%81/"/>
    <id>http://jackliu17.github.io/2016/05/14/iOS项目014-九宫格手势解锁/</id>
    <published>2016-05-14T03:02:55.000Z</published>
    <updated>2016-05-16T06:43:14.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj01401.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;项目结构&quot;&gt;&lt;a href=&quot;#项目结构&quot; class=&quot;headerlink&quot; title=&quot;项目结构&quot;&gt;&lt;/a&gt;项目结构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj014Structure.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;常量的定义&quot;&gt;&lt;a href=&quot;#常量的定义&quot; class=&quot;headerlink&quot; title=&quot;常量的定义&quot;&gt;&lt;/a&gt;常量的定义&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;//const 定义 只读的变量名，在其他的类中不能声明同样的变量名
CGFloat const btnCount = 9;

// define只是字符的转换
#define kScreenWidth [UIScreen mainScreen].bounds.size.width
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;UIView的两种init方法&quot;&gt;&lt;a href=&quot;#UIView的两种init方法&quot; class=&quot;headerlink&quot; title=&quot;UIView的两种init方法&quot;&gt;&lt;/a&gt;UIView的两种init方法&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;//通过代码创建会调用这个方法
- (instancetype)initWithFrame:(CGRect)frame{
if (self = [super initWithFrame:frame]) {
    [self AddButton];
}
return self;
}

//通过storyboard 或者 xib 文件创建的时候会调用
-(id)initWithCoder:(NSCoder *)aDecoder{
if (self = [super initWithCoder:aDecoder]) {
    [self AddButton];
}
return self;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;常用插件&quot;&gt;&lt;a href=&quot;#常用插件&quot; class=&quot;headerlink&quot; title=&quot;常用插件&quot;&gt;&lt;/a&gt;常用插件&lt;/h1&gt;&lt;p&gt;在github上查找，然后下载，完成之后运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;KSImageNamed
VVDocumenter-Xcode
ColorSense-for-Xcode-master
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;触摸方法&quot;&gt;&lt;a href=&quot;#触摸方法&quot; class=&quot;headerlink&quot; title=&quot;触摸方法&quot;&gt;&lt;/a&gt;触摸方法&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event{}

-(void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event{}

-(void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event{}

-(void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event{
[self touchesEnded:touches withEvent:event];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;触摸点的坐标&quot;&gt;&lt;a href=&quot;#触摸点的坐标&quot; class=&quot;headerlink&quot; title=&quot;触摸点的坐标&quot;&gt;&lt;/a&gt;触摸点的坐标&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;UITouch *touch = [touches anyObject];
CGPoint point = [touch locationInView:self];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;触摸的按钮&quot;&gt;&lt;a href=&quot;#触摸的按钮&quot; class=&quot;headerlink&quot; title=&quot;触摸的按钮&quot;&gt;&lt;/a&gt;触摸的按钮&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (UIButton *)buttonWithPoint:(CGPoint)point{
for (UIButton *btn in self.subviews) {
    if (CGRectContainsPoint(btn.frame, point)) {
        return btn;
    }
}
return nil;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;点是否在指定CGRect内&quot;&gt;&lt;a href=&quot;#点是否在指定CGRect内&quot; class=&quot;headerlink&quot; title=&quot;点是否在指定CGRect内&quot;&gt;&lt;/a&gt;点是否在指定CGRect内&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;bool CGRectContainsPoint (
    CGRect rect,
    CGPoint point
);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;m-里声明私有属性&quot;&gt;&lt;a href=&quot;#m-里声明私有属性&quot; class=&quot;headerlink&quot; title=&quot;.m 里声明私有属性&quot;&gt;&lt;/a&gt;.m 里声明私有属性&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;//匿名扩展（类目的特例） ：可以声明属性,私有的
@interface JKLockView ()
@property (nonatomic, strong) NSMutableArray *selectedBtns;
@property (nonatomic, assign) CGPoint currentPoint;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;数组或字典添加对象需要先判断&quot;&gt;&lt;a href=&quot;#数组或字典添加对象需要先判断&quot; class=&quot;headerlink&quot; title=&quot;数组或字典添加对象需要先判断&quot;&gt;&lt;/a&gt;数组或字典添加对象需要先判断&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;if (btn) {
[self.selectedBtns addObject:btn];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;开始绘图&quot;&gt;&lt;a href=&quot;#开始绘图&quot; class=&quot;headerlink&quot; title=&quot;开始绘图&quot;&gt;&lt;/a&gt;开始绘图&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;[self setNeedsDisplay];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;绘制贝塞尔曲线&quot;&gt;&lt;a href=&quot;#绘制贝塞尔曲线&quot; class=&quot;headerlink&quot; title=&quot;绘制贝塞尔曲线&quot;&gt;&lt;/a&gt;绘制贝塞尔曲线&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;UIBezierPath *path = [UIBezierPath bezierPath];
path.lineWidth = 8;
path.lineJoinStyle = kCGLineJoinRound;
[[UIColor colorWithRed:32/255.0 green:210/255.0 blue:254/255.0 alpha:0.5] set];

//遍历按钮
for (int i = 0; i &amp;lt; self.selectedBtns.count; i++) {
    UIButton *button = self.selectedBtns[i];
    if (i == 0) {

        //设置起点
        [path moveToPoint:button.center];

    }else{//连线

        [path addLineToPoint:button.center];
    }
}

[path addLineToPoint:self.currentPoint];
[path stroke];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;数组中每个对象执行某方法&quot;&gt;&lt;a href=&quot;#数组中每个对象执行某方法&quot; class=&quot;headerlink&quot; title=&quot;数组中每个对象执行某方法&quot;&gt;&lt;/a&gt;数组中每个对象执行某方法&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;//makeObjectsPerformSelector  
//每个按钮设为没有选中状态
//向数组中的每一个对象发送方法 setSelected:，方法参数为 NO
[self.selectedBtns makeObjectsPerformSelector:@selector(setSelected:) withObject:NO];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;IBOutlet-和-delegate连接&quot;&gt;&lt;a href=&quot;#IBOutlet-和-delegate连接&quot; class=&quot;headerlink&quot; title=&quot;IBOutlet 和 delegate连接&quot;&gt;&lt;/a&gt;IBOutlet 和 delegate连接&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;@property (nonatomic, assign) IBOutlet id&amp;lt;JKLockViewDelegate&amp;gt; delegate;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;UIAlertController&quot;&gt;&lt;a href=&quot;#UIAlertController&quot; class=&quot;headerlink&quot; title=&quot;UIAlertController&quot;&gt;&lt;/a&gt;UIAlertController&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;UIAlertController *alert = [UIAlertController alertControllerWithTitle:@&amp;quot;密码正确&amp;quot; message:nil preferredStyle:UIAlertControllerStyleAlert];
[alert addAction:[UIAlertAction actionWithTitle:@&amp;quot;确定&amp;quot; style:UIAlertActionStyleDestructive handler:nil]];
[alert addAction:[UIAlertAction actionWithTitle:@&amp;quot;取消&amp;quot; style:UIAlertActionStyleCancel handler:nil]];
[self presentViewController:alert animated:YES completion:nil];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;连接字符串&quot;&gt;&lt;a href=&quot;#连接字符串&quot; class=&quot;headerlink&quot; title=&quot;连接字符串&quot;&gt;&lt;/a&gt;连接字符串&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;[path appendFormat:@&amp;quot;%ld&amp;quot;,(long)btn.tag];
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj01401.png&quot;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目13-手势识别</title>
    <link href="http://jackliu17.github.io/2016/05/13/iOS%E9%A1%B9%E7%9B%AE13-%E6%89%8B%E5%8A%BF%E8%AF%86%E5%88%AB/"/>
    <id>http://jackliu17.github.io/2016/05/13/iOS项目13-手势识别/</id>
    <published>2016-05-13T02:07:26.000Z</published>
    <updated>2016-05-13T02:10:35.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;手势的种类&quot;&gt;&lt;a href=&quot;#手势的种类&quot; class=&quot;headerlink&quot; title=&quot;手势的种类&quot;&gt;&lt;/a&gt;手势的种类&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;UITapGestureRecognizer   &lt;/li&gt;
&lt;li&gt;UIPinGestureRecognizer   Pinch 捏合&lt;/li&gt;
&lt;li&gt;UIRotationGestureRecognizer  Rotation 旋转&lt;/li&gt;
&lt;li&gt;UISwipeGestureRecognizer Swipe 轻扫，快速移动，是用于监测滑动的方向&lt;/li&gt;
&lt;li&gt;UIPanGestureRecognizer   Pan 拖移，慢速移动，是用于监测偏移量&lt;/li&gt;
&lt;li&gt;UILongPressGestureRecognizer LongPress 长按&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Tap点击&quot;&gt;&lt;a href=&quot;#Tap点击&quot; class=&quot;headerlink&quot; title=&quot;Tap点击&quot;&gt;&lt;/a&gt;Tap点击&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;/*  一个手指单击*/
UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(SignleTap:)];
tap.numberOfTapsRequired = 1;
tap.numberOfTouchesRequired = 1;
[self.view addGestureRecognizer:tap];

/*一个手指双击*/
UITapGestureRecognizer *tap2 = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(DoubleTap:)];
tap2.numberOfTapsRequired = 2;
[self.view addGestureRecognizer:tap2];

//当tap 和 tap2同时出现在视图上，取消tap
[tap requireGestureRecognizerToFail:tap2];

/* 两个手指单击*/
UITapGestureRecognizer *tap3 = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(SigleTwoFingerTap:)];
tap3.numberOfTouchesRequired = 2;
[self.view addGestureRecognizer:tap3];
//当tap2 和 tap3同时出现在视图上，取消tap2
[tap2 requireGestureRecognizerToFail:tap3];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Tap互斥&quot;&gt;&lt;a href=&quot;#Tap互斥&quot; class=&quot;headerlink&quot; title=&quot;Tap互斥&quot;&gt;&lt;/a&gt;Tap互斥&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/*
[A requireGestureRecognizerToFail:B]
当A手势发生时，即便A已经满足条件，但要等到B手势失败后才触发
*/
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Swipe轻扫手势&quot;&gt;&lt;a href=&quot;#Swipe轻扫手势&quot; class=&quot;headerlink&quot; title=&quot;Swipe轻扫手势&quot;&gt;&lt;/a&gt;Swipe轻扫手势&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;UISwipeGestureRecognizer *swipe = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(SwipeAction:)];
swipe.direction = UISwipeGestureRecognizerDirectionLeft;
[self.view addGestureRecognizer:swipe];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Pinch捏合手势&quot;&gt;&lt;a href=&quot;#Pinch捏合手势&quot; class=&quot;headerlink&quot; title=&quot;Pinch捏合手势&quot;&gt;&lt;/a&gt;Pinch捏合手势&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)PinchGesture{
UIPinchGestureRecognizer *pinch = [[UIPinchGestureRecognizer alloc] initWithTarget:self action:@selector(PinchAction:)];
[self.view addGestureRecognizer:pinch];
}

//pin的缩放
- (void)PinchAction:(UIPinchGestureRecognizer *)pinch{
float scale = pinch.scale;
pinch.view.transform = CGAffineTransformScale(pinch.view.transform, scale, scale);
if (scale &amp;gt; 1) {
    _genstureLabel.text = @&amp;quot;捏合放大&amp;quot;;
}else if (scale &amp;lt; 1){
    _genstureLabel.text = @&amp;quot;捏合缩小&amp;quot;;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Pan拖移手势&quot;&gt;&lt;a href=&quot;#Pan拖移手势&quot; class=&quot;headerlink&quot; title=&quot;Pan拖移手势&quot;&gt;&lt;/a&gt;Pan拖移手势&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)PanGesture{
UIPanGestureRecognizer *pan = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(PanAction:)];
[_genstureLabel addGestureRecognizer:pan];
}

- (void)PanAction:(UIPanGestureRecognizer *)pan{
//移动的坐标值
CGPoint translation = [pan translationInView:self.view];
//移动后的坐标
pan.view.center = CGPointMake(pan.view.center.x + translation.x, pan.view.center.y + translation.y);
//设置坐标和速度
[pan setTranslation:CGPointZero inView:self.view];
_genstureLabel.text = @&amp;quot;把我放哪啊&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Rotation旋转手势&quot;&gt;&lt;a href=&quot;#Rotation旋转手势&quot; class=&quot;headerlink&quot; title=&quot;Rotation旋转手势&quot;&gt;&lt;/a&gt;Rotation旋转手势&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)RotationGesture{
UIRotationGestureRecognizer *rotation = [[UIRotationGestureRecognizer alloc] initWithTarget:self action:@selector(RotationAction:)];
[_genstureLabel addGestureRecognizer:rotation];
}

- (void)RotationAction:(UIRotationGestureRecognizer *)rotationGes{  
rotationGes.view.transform = CGAffineTransformRotate(rotationGes.view.transform, rotationGes.rotation);
rotationGes.rotation = M_PI;
_genstureLabel.text = @&amp;quot;旋转&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;LongPress长按手势&quot;&gt;&lt;a href=&quot;#LongPress长按手势&quot; class=&quot;headerlink&quot; title=&quot;LongPress长按手势&quot;&gt;&lt;/a&gt;LongPress长按手势&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)LongPressGesture{
UILongPressGestureRecognizer *longPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(LongPressAction:)];
longPress.minimumPressDuration = 2;
[self.view addGestureRecognizer:longPress];  
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;手势的种类&quot;&gt;&lt;a href=&quot;#手势的种类&quot; class=&quot;headerlink&quot; title=&quot;手势的种类&quot;&gt;&lt;/a&gt;手势的种类&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;UITapGestureRecognizer   &lt;/li&gt;
&lt;li&gt;UIPinGestureRecog
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
      <category term="iOS_Gesture" scheme="http://jackliu17.github.io/tags/iOS-Gesture/"/>
    
  </entry>
  
  <entry>
    <title>iOS数据存储</title>
    <link href="http://jackliu17.github.io/2016/05/12/iOS%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    <id>http://jackliu17.github.io/2016/05/12/iOS数据存储/</id>
    <published>2016-05-12T01:52:26.000Z</published>
    <updated>2016-05-12T01:54:02.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;存储的方法&quot;&gt;&lt;a href=&quot;#存储的方法&quot; class=&quot;headerlink&quot; title=&quot;存储的方法&quot;&gt;&lt;/a&gt;存储的方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;plist 需要知道文件名 只适合NSArray，NSString等基本数据类型&lt;/li&gt;
&lt;li&gt;偏好设置 不需要知道文件名，小型数据 NSUserDefaults，是以字典的方式存储&lt;/li&gt;
&lt;li&gt;对象归档  NSKeyedArchiver 必须实现NSCoding协议方法&lt;/li&gt;
&lt;li&gt;core Data 大型数据&lt;/li&gt;
&lt;li&gt;sqlite3&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;存储的方法&quot;&gt;&lt;a href=&quot;#存储的方法&quot; class=&quot;headerlink&quot; title=&quot;存储的方法&quot;&gt;&lt;/a&gt;存储的方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;plist 需要知道文件名 只适合NSArray，NSString等基本数据类型&lt;/li&gt;
&lt;li&gt;偏好
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_dataStorage" scheme="http://jackliu17.github.io/tags/iOS-dataStorage/"/>
    
  </entry>
  
  <entry>
    <title>CAGradientLayer的使用</title>
    <link href="http://jackliu17.github.io/2016/05/09/CAGradientLayer%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://jackliu17.github.io/2016/05/09/CAGradientLayer的使用/</id>
    <published>2016-05-09T02:18:17.000Z</published>
    <updated>2016-05-09T06:09:32.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;CAGradientLayer简介&quot;&gt;&lt;a href=&quot;#CAGradientLayer简介&quot; class=&quot;headerlink&quot; title=&quot;CAGradientLayer简介&quot;&gt;&lt;/a&gt;CAGradientLayer简介&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;CAGradientLayer是用于处理渐变色的层结构&lt;/li&gt;
&lt;li&gt;CAGradientLayer的渐变色可以做隐式动画&lt;/li&gt;
&lt;li&gt;大部分情况下，CAGradientLayer都是与CAShapeLayer配合使用的&lt;/li&gt;
&lt;li&gt;CAGradientLayer可以用作png遮罩效果&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;多彩圆环&lt;/th&gt;
&lt;th&gt;多彩进度条&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CAGradientLayerExample1.gif&quot; alt=&quot;&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CAGradientLayerExample2.gif&quot; alt=&quot;&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;动态多彩遮罩&lt;/th&gt;
&lt;th&gt;动态图像遮罩&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CAGradientLayerExample3.png&quot; alt=&quot;&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CAGradientLayerExample4.png&quot; alt=&quot;&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;CAGradientLayer坐标系统&quot;&gt;&lt;a href=&quot;#CAGradientLayer坐标系统&quot; class=&quot;headerlink&quot; title=&quot;CAGradientLayer坐标系统&quot;&gt;&lt;/a&gt;CAGradientLayer坐标系统&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CAGradientLayerCoordinate.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CAGradientLayer的坐标系统是从坐标（0，0）到（1，1）绘制的矩形&lt;/li&gt;
&lt;li&gt;CAGradientLayer的frame值的size不为正方形的话，坐标系统会被拉伸&lt;/li&gt;
&lt;li&gt;CAGradientLayer的startPoint与endPoint会直接影响颜色的绘制方向&lt;/li&gt;
&lt;li&gt;CAGradientLayer的颜色分割点是以0到1的比例来计算的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CAGradientLayerProj1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;

@interface ViewController ()
@property (strong, nonatomic) CAGradientLayer *gradientLayer;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.
// 创建并初始化
self.gradientLayer             = [CAGradientLayer layer];
self.gradientLayer.frame       = CGRectMake(0, 0, 200, 200);
self.gradientLayer.position    = self.view.center;
self.gradientLayer.borderWidth = 1.f;
[self.view.layer addSublayer:self.gradientLayer];

// 设置颜色
self.gradientLayer.colors = @[(__bridge id)[UIColor redColor].CGColor,
                              (__bridge id)[UIColor greenColor].CGColor,
                              (__bridge id)[UIColor blueColor].CGColor];

// 设置颜色渐变方向
self.gradientLayer.startPoint = CGPointMake(0, 0);
self.gradientLayer.endPoint   = CGPointMake(1, 0);

// 设置颜色分割点
self.gradientLayer.locations  = @[@(0.25), @(0.5), @(0.75)];


// 延时3秒钟执行
[self performSelector:@selector(gradientLayerLocationAnimation)
           withObject:nil
           afterDelay:3.f];

       }

- (void)gradientLayerLocationAnimation {
// 颜色分割点效果
self.gradientLayer.locations = @[@(0.01), @(0.5), @(0.99)];
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;色差动画实现&quot;&gt;&lt;a href=&quot;#色差动画实现&quot; class=&quot;headerlink&quot; title=&quot;色差动画实现&quot;&gt;&lt;/a&gt;色差动画实现&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CAGradientLayerColor.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定渐变色渐变方向&lt;/li&gt;
&lt;li&gt;设定两种颜色，其中一种是透明色，另外一种是自定义颜色&lt;/li&gt;
&lt;li&gt;设定好location颜色分割点值&lt;/li&gt;
&lt;li&gt;CAGradientLayer的颜色分割点是以0到1的比例来计算的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CAGradientLayerProj2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码-1&quot;&gt;&lt;a href=&quot;#代码-1&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;

@interface ViewController ()

@property (nonatomic, strong) CAGradientLayer *gradientLayer; // 渐变层
@property (nonatomic, strong) NSTimer         *timer;         // 定时器

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

self.view.backgroundColor = [UIColor blackColor];

// 创建背景图片
UIImageView *imageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&amp;quot;bg&amp;quot;]];
imageView.center       = self.view.center;
[self.view addSubview:imageView];

// 初始化渐变层
self.gradientLayer       = [CAGradientLayer layer];
self.gradientLayer.frame = imageView.bounds;
[imageView.layer addSublayer:self.gradientLayer];

// 设定颜色渐变方向
self.gradientLayer.startPoint = CGPointMake(0, 0);
self.gradientLayer.endPoint   = CGPointMake(0, 1);

// 设定颜色组
self.gradientLayer.colors = @[(__bridge id)[UIColor clearColor].CGColor,
                              (__bridge id)[UIColor redColor].CGColor];

// 设定颜色分割点
self.gradientLayer.locations = @[@(0.5f), @(1.f)];

// 初始化定时器
self.timer = [NSTimer scheduledTimerWithTimeInterval:2.f
                                              target:self
                                            selector:@selector(timerEvent)
                                            userInfo:nil
                                             repeats:YES];
                                         }

- (void)timerEvent {
// 设定颜色组动画
self.gradientLayer.colors = @[(__bridge id)[UIColor clearColor].CGColor,
                              (__bridge id)[UIColor colorWithRed:arc4random() % 255 / 255.f
                                                           green:arc4random() % 255 / 255.f
                                                            blue:arc4random() % 255 / 255.f
                                                           alpha:1].CGColor];

// 设定颜色分割点动画
self.gradientLayer.locations = @[@(arc4random() % 10 / 10.f), @(1.f)];
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;用CAGradientLayer封装带色差动画的View&quot;&gt;&lt;a href=&quot;#用CAGradientLayer封装带色差动画的View&quot; class=&quot;headerlink&quot; title=&quot;用CAGradientLayer封装带色差动画的View&quot;&gt;&lt;/a&gt;用CAGradientLayer封装带色差动画的View&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;确定几个属性值&lt;/li&gt;
&lt;li&gt;确定可以做动画的参数&lt;/li&gt;
&lt;li&gt;重写setter方法做动画&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CAGradientLayerProj3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码-2&quot;&gt;&lt;a href=&quot;#代码-2&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;ColorUIImageView.h&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;

typedef enum : NSUInteger {
UP,    // 从上往下
DOWN,  // 从下往上
RIGHT, // 从右往左
LEFT,  // 从左往右
} EColorDirection;

@interface ColorUIImageView : UIImageView

/**
 *  确定方向（可以做动画）
 */
@property (nonatomic, assign) EColorDirection  direction;

/**
 *  颜色（可以做动画）
 */
 @property (nonatomic, strong) UIColor  *color;

 /**
 *  百分比（可以做动画）
 */
@property (nonatomic, assign) CGFloat   percent;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ColorUIImageView.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;ColorUIImageView.h&amp;quot;

@interface ColorUIImageView ()

@property (nonatomic, strong) CAGradientLayer *gradientLayer;

@end

@implementation ColorUIImageView

- (instancetype)initWithFrame:(CGRect)frame
{
self = [super initWithFrame:frame];
if (self) {
    // 初始化CAGradientLayer
    self.gradientLayer           = [CAGradientLayer layer];
    self.gradientLayer.frame     = self.bounds;

    self.gradientLayer.colors    = @[(__bridge id)[UIColor clearColor].CGColor,
                                     (__bridge id)[UIColor redColor].CGColor];
    self.gradientLayer.locations = @[@(1), @(1)];

    [self.layer addSublayer:self.gradientLayer];
}
return self;
}

#pragma mark - 重写setter，getter方法
@synthesize color = _color;
- (void)setColor:(UIColor *)color {
_color = color;
self.gradientLayer.colors = @[(__bridge id)[UIColor clearColor].CGColor,
                              (__bridge id)color.CGColor];
                          }
- (UIColor *)color {
return _color;
}

@synthesize percent = _percent;
- (void)setPercent:(CGFloat)percent {
_percent = percent;
self.gradientLayer.locations = @[@(percent), @(1)];
}
- (CGFloat)percent {
return _percent;
}

@synthesize direction = _direction;
- (void)setDirection:(EColorDirection)direction {
_direction = direction;
if (direction == UP) {
    self.gradientLayer.startPoint = CGPointMake(0, 0);
    self.gradientLayer.endPoint   = CGPointMake(0, 1);
} else if (direction == DOWN) {
    self.gradientLayer.startPoint = CGPointMake(0, 1);
    self.gradientLayer.endPoint   = CGPointMake(0, 0);
} else if (direction == RIGHT) {
    self.gradientLayer.startPoint = CGPointMake(1, 0);
    self.gradientLayer.endPoint   = CGPointMake(0, 0);
} else if (direction == LEFT) {
    self.gradientLayer.startPoint = CGPointMake(0, 0);
    self.gradientLayer.endPoint   = CGPointMake(1, 0);
} else {
    self.gradientLayer.startPoint = CGPointMake(0, 0);
    self.gradientLayer.endPoint   = CGPointMake(0, 1);
}
}
- (EColorDirection)direction {
return _direction;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;
#import &amp;quot;ColorUIImageView.h&amp;quot;
@interface ViewController ()
@property (nonatomic, strong) ColorUIImageView *colorView;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.


self.colorView        = [[ColorUIImageView alloc] initWithFrame:CGRectMake(0, 0, 198, 253)];
self.colorView.center = self.view.center;
self.colorView.image  = [UIImage imageNamed:@&amp;quot;bg&amp;quot;];
[self.view addSubview:self.colorView];

[self performSelector:@selector(event)
           withObject:nil
           afterDelay:2.f];
       }

- (void)event {
self.colorView.direction = DOWN;
self.colorView.color     = [UIColor cyanColor];
self.colorView.percent   = 0.5;
}
@end
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CAGradientLayer简介&quot;&gt;&lt;a href=&quot;#CAGradientLayer简介&quot; class=&quot;headerlink&quot; title=&quot;CAGradientLayer简介&quot;&gt;&lt;/a&gt;CAGradientLayer简介&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;CAGr
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_animation" scheme="http://jackliu17.github.io/tags/iOS-animation/"/>
    
      <category term="iOS_CALayer" scheme="http://jackliu17.github.io/tags/iOS-CALayer/"/>
    
  </entry>
  
  <entry>
    <title>CAShapeLayer的使用</title>
    <link href="http://jackliu17.github.io/2016/05/08/CAShapeLayer%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://jackliu17.github.io/2016/05/08/CAShapeLayer的使用/</id>
    <published>2016-05-08T09:58:30.000Z</published>
    <updated>2016-05-08T10:06:53.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;CAShapeLayer简介&quot;&gt;&lt;a href=&quot;#CAShapeLayer简介&quot; class=&quot;headerlink&quot; title=&quot;CAShapeLayer简介&quot;&gt;&lt;/a&gt;CAShapeLayer简介&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;CAShapeLayer继承至CALayer，可以使用CALayer的所有属性值&lt;/li&gt;
&lt;li&gt;CAShapeLayer需要与贝塞尔曲线配合使用才有意义&lt;/li&gt;
&lt;li&gt;使用CAShapeLayer与贝塞尔曲线可以实现不在view的drawRect方法中画出一些想要的图形&lt;/li&gt;
&lt;li&gt;CAShapeLayer属于CoreAnimation框架，其动画渲染直接提交到手机的GPU当中，相较于view的drawRect方法使用CPU渲染而言，其效率极高，能大大优化内存使用情况&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CAShaperLayer01.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;

@interface ViewController ()
@property (nonatomic, strong) NSTimer      *timer;
@property (nonatomic, strong) CAShapeLayer *shapeLayer;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

// 创建shapeLayer
_shapeLayer = [CAShapeLayer layer];
_shapeLayer.frame         = (CGRect){CGPointMake(0, 0), CGSizeMake(200, 200)};
_shapeLayer.position      = self.view.center;
_shapeLayer.path          = [self getStar1BezierPath].CGPath;
_shapeLayer.fillColor     = [UIColor clearColor].CGColor;
_shapeLayer.strokeColor   = [UIColor redColor].CGColor;
_shapeLayer.lineWidth     = 2.f;
[self.view.layer addSublayer:_shapeLayer];

// 创建定时器
_timer = [NSTimer scheduledTimerWithTimeInterval:1.f
                                          target:self
                                        selector:@selector(pathAnimation)
                                        userInfo:nil
                                         repeats:YES];
}

/**
 *  执行path的动画
 */
- (void)pathAnimation {
static int i = 0;
if (i++ % 2 == 0) {
    CABasicAnimation *circleAnim = [CABasicAnimation animationWithKeyPath:@&amp;quot;path&amp;quot;];
    circleAnim.removedOnCompletion = NO;
    circleAnim.duration            = 1;
    circleAnim.fromValue           = (__bridge id)[self getStar1BezierPath].CGPath;
    circleAnim.toValue             = (__bridge id)[self getStar2BezierPath].CGPath;
    _shapeLayer.path               = [self getStar2BezierPath].CGPath;
    [_shapeLayer addAnimation:circleAnim forKey:@&amp;quot;animateCirclePath&amp;quot;];
} else {
    CABasicAnimation *circleAnim = [CABasicAnimation animationWithKeyPath:@&amp;quot;path&amp;quot;];
    circleAnim.removedOnCompletion = NO;
    circleAnim.duration            = 1;
    circleAnim.fromValue           = (__bridge id)[self getStar2BezierPath].CGPath;
    circleAnim.toValue             = (__bridge id)[self getStar1BezierPath].CGPath;
    _shapeLayer.path               = [self getStar1BezierPath].CGPath;
    [_shapeLayer addAnimation:circleAnim forKey:@&amp;quot;animateCirclePath&amp;quot;];
}
}

/**
 *  贝塞尔曲线1
 *
 *  @return 贝塞尔曲线
 */
-(UIBezierPath *)getStar1BezierPath {
//// Star Drawing
UIBezierPath* starPath = [UIBezierPath bezierPath];
[starPath moveToPoint: CGPointMake(22.5, 2.5)];
[starPath addLineToPoint: CGPointMake(28.32, 14.49)];
[starPath addLineToPoint: CGPointMake(41.52, 16.32)];
[starPath addLineToPoint: CGPointMake(31.92, 25.56)];
[starPath addLineToPoint: CGPointMake(34.26, 38.68)];
[starPath addLineToPoint: CGPointMake(22.5, 32.4)];
[starPath addLineToPoint: CGPointMake(10.74, 38.68)];
[starPath addLineToPoint: CGPointMake(13.08, 25.56)];
[starPath addLineToPoint: CGPointMake(3.48, 16.32)];
[starPath addLineToPoint: CGPointMake(16.68, 14.49)];
[starPath closePath];

return starPath;
}

/**
 *  贝塞尔曲线2
 *
 *  @return 贝塞尔曲线
 */
-(UIBezierPath *)getStar2BezierPath {
//// Star Drawing
UIBezierPath* starPath = [UIBezierPath bezierPath];
[starPath moveToPoint: CGPointMake(22.5, 2.5)];
[starPath addLineToPoint: CGPointMake(32.15, 9.21)];
[starPath addLineToPoint: CGPointMake(41.52, 16.32)];
[starPath addLineToPoint: CGPointMake(38.12, 27.57)];
[starPath addLineToPoint: CGPointMake(34.26, 38.68)];
[starPath addLineToPoint: CGPointMake(22.5, 38.92)];
[starPath addLineToPoint: CGPointMake(10.74, 38.68)];
[starPath addLineToPoint: CGPointMake(6.88, 27.57)];
[starPath addLineToPoint: CGPointMake(3.48, 16.32)];
[starPath addLineToPoint: CGPointMake(12.85, 9.21)];
[starPath closePath];

return starPath;
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;贝塞尔曲线与CAShapeLayer的关系&quot;&gt;&lt;a href=&quot;#贝塞尔曲线与CAShapeLayer的关系&quot; class=&quot;headerlink&quot; title=&quot;贝塞尔曲线与CAShapeLayer的关系&quot;&gt;&lt;/a&gt;贝塞尔曲线与CAShapeLayer的关系&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;CAShapeLayer中有Shape这个单词，顾名思义，它需要一个形状才能生效&lt;/li&gt;
&lt;li&gt;贝塞尔曲线可以创建基于矢量的路径&lt;/li&gt;
&lt;li&gt;贝塞尔曲线给CAShapeLayer提供路径，CAShapeLayer在提供的路径中进行渲染，路径会闭环，所以路径绘制出了Shape&lt;/li&gt;
&lt;li&gt;用于CAShapeLayer的贝塞尔曲线作为path，其path是一个首尾相接的闭环的曲线，即使该贝塞尔曲线不是一个闭环的曲线&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CAShaperLayer02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码-1&quot;&gt;&lt;a href=&quot;#代码-1&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.
// 创建椭圆形贝塞尔曲线
UIBezierPath *oval = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(0, 0, 200, 100)];

// 创建矩形贝塞尔曲线
UIBezierPath *rect = [UIBezierPath bezierPathWithRect:CGRectMake(0, 0, 200, 100)];

// 创建圆形贝塞尔曲线
UIBezierPath *circle = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(0, 0, 100, 100)];

// 创建CAShapeLayer
CAShapeLayer *shape = [CAShapeLayer layer];
shape.frame         = CGRectMake(0, 0, 200, 50);
shape.position      = self.view.center;

// 显示CAShapeLayer的边界
shape.borderWidth   = 1.f;

// 禁止内容显示超出CAShapeLayer的frame值
shape.masksToBounds = YES;

// 修改贝塞尔曲线的填充颜色
shape.fillColor     = [UIColor redColor].CGColor;

// 建立贝塞尔曲线与CAShapeLayer之间的关联
shape.path = circle.CGPath;

// 添加并显示
[self.view.layer addSublayer:shape];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;StrokeStart与StrokeEnd动画&quot;&gt;&lt;a href=&quot;#StrokeStart与StrokeEnd动画&quot; class=&quot;headerlink&quot; title=&quot;StrokeStart与StrokeEnd动画&quot;&gt;&lt;/a&gt;StrokeStart与StrokeEnd动画&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;进度条效果 - 利用GPU实现，不占内存&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将ShapeLayer的fillColor设置成透明背景&lt;/li&gt;
&lt;li&gt;设置线条的宽度（lineWidth）的值&lt;/li&gt;
&lt;li&gt;设置线条的颜色&lt;/li&gt;
&lt;li&gt;将strokeStart值设定成0，然后让strokeEnd的值变化触发隐式动画&lt;/li&gt;
&lt;li&gt;strokeStart的值一定小于strokeEnd&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CAShaperLayer03.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码-2&quot;&gt;&lt;a href=&quot;#代码-2&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;

@interface ViewController ()
@property (nonatomic, strong) NSTimer      *timer;      // 定时器
@property (nonatomic, strong) CAShapeLayer *shapeLayer; // 形状layer

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

// 设置背景色
self.view.backgroundColor = [UIColor colorWithRed:0.878 green:0.878 blue:0.878 alpha:1];

// 创建椭圆形贝塞尔曲线
UIBezierPath *oval        = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(0, 0, 100, 100)];

// 创建CAShapeLayer
_shapeLayer               = [CAShapeLayer layer];
_shapeLayer.frame         = CGRectMake(0, 0, 100, 100);
_shapeLayer.position      = self.view.center;

// 修改CAShapeLayer的线条相关值
_shapeLayer.fillColor     = [UIColor clearColor].CGColor;
_shapeLayer.strokeColor   = [UIColor redColor].CGColor;
_shapeLayer.lineWidth     = 2.f;
_shapeLayer.strokeStart   = 0.f;
_shapeLayer.strokeEnd     = 0.f;

// 建立贝塞尔曲线与CAShapeLayer之间的关联
_shapeLayer.path          = oval.CGPath;

// 添加并显示
[self.view.layer addSublayer:_shapeLayer];

// 创建定时器
_timer = [NSTimer scheduledTimerWithTimeInterval:1.f
                                          target:self
                                        selector:@selector(animationEventTypeTwo)
                                        userInfo:nil
                                         repeats:YES];
                                     }

/**
 *  动画效果1
*/
- (void)animationEventTypeOne {
// 执行隐式动画
_shapeLayer.strokeEnd = arc4random() % 100 / 100.f;
}

/**
 *  动画效果2
 */
 - (void)animationEventTypeTwo {
CGFloat valueOne = arc4random() % 100 / 100.f;
CGFloat valueTwo = arc4random() % 100 / 100.f;

// 执行隐式动画
_shapeLayer.strokeStart = valueOne &amp;lt; valueTwo ? valueOne : valueTwo;
_shapeLayer.strokeEnd   = valueOne &amp;gt; valueTwo ? valueOne : valueTwo;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;用CAShapeLayer实现圆形进度条效果&quot;&gt;&lt;a href=&quot;#用CAShapeLayer实现圆形进度条效果&quot; class=&quot;headerlink&quot; title=&quot;用CAShapeLayer实现圆形进度条效果&quot;&gt;&lt;/a&gt;用CAShapeLayer实现圆形进度条效果&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;确定需要设定的参数&lt;/li&gt;
&lt;li&gt;实现细节&lt;/li&gt;
&lt;li&gt;进行测试&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CAShaperLayer04.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码-3&quot;&gt;&lt;a href=&quot;#代码-3&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;viewController.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;
#import &amp;quot;CircleView.h&amp;quot;
@interface ViewController ()
{
CircleView *circle;
}
@end

@implementation ViewController
- (void)viewDidLoad {
[super viewDidLoad];

circle             = [[CircleView alloc] initWithFrame:CGRectMake(0, 0, 200, 200)];
circle.center      = self.view.center;
circle.startValue  = 0.5;
circle.lineWidth   = 3.f;
circle.lineColor   = [UIColor grayColor];
[self.view addSubview:circle];

[self performSelector:@selector(delayAnimation)
           withObject:nil
           afterDelay:3.f];
       }

- (void)delayAnimation {
circle.value = 1.f;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;circleView.h&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;

@interface CircleView : UIView
@property (nonatomic, assign) CGFloat  startValue; // 起始值（0~1）
@property (nonatomic, assign) CGFloat  lineWidth;  // 线宽(&amp;gt;0)
@property (nonatomic, strong) UIColor *lineColor;  // 线条颜色
@property (nonatomic, assign) CGFloat  value;      // 变化的值

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;circleView.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;CircleView.h&amp;quot;
@interface CircleView ()

@property (nonatomic, strong) CAShapeLayer *shapeLayer;

@end
@implementation CircleView

- (instancetype)initWithFrame:(CGRect)frame {
self = [super initWithFrame:frame];
if (self) {
    // 创建出CAShapeLayer
    _shapeLayer       = [CAShapeLayer layer];
    _shapeLayer.frame = self.bounds;

    // 创建出贝塞尔曲线
    UIBezierPath *path = [UIBezierPath bezierPathWithOvalInRect:self.bounds];

    // 贝塞尔曲线与CAShapeLayer产生关联
    _shapeLayer.path = path.CGPath;

    // 基本配置
    _shapeLayer.fillColor   = [UIColor clearColor].CGColor;
    _shapeLayer.lineWidth   = 1.f;
    _shapeLayer.strokeColor = [UIColor redColor].CGColor;
    _shapeLayer.strokeEnd   = 0.f;

    // 添加到当前view
    [self.layer addSublayer:_shapeLayer];
}
return self;
}

@synthesize startValue = _startValue;
- (void)setStartValue:(CGFloat)startValue {
_startValue           = startValue;
_shapeLayer.strokeEnd = startValue;
}
- (CGFloat)startValue {
return _startValue;
}

@synthesize lineWidth = _lineWidth;
- (void)setLineWidth:(CGFloat)lineWidth {
_lineWidth            = lineWidth;
_shapeLayer.lineWidth = lineWidth;
}
- (CGFloat)lineWidth {
return _lineWidth;
}

@synthesize lineColor = _lineColor;
- (void)setLineColor:(UIColor *)lineColor {
_lineColor              = lineColor;
_shapeLayer.strokeColor = lineColor.CGColor;
}
- (UIColor *)lineColor {
return _lineColor;
}

@synthesize value = _value;
- (void)setValue:(CGFloat)value {
_value                = value;
_shapeLayer.strokeEnd = value;
}
- (CGFloat)value {
return _value;
}


@end
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CAShapeLayer简介&quot;&gt;&lt;a href=&quot;#CAShapeLayer简介&quot; class=&quot;headerlink&quot; title=&quot;CAShapeLayer简介&quot;&gt;&lt;/a&gt;CAShapeLayer简介&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;CAShapeLayer继承至C
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_animation" scheme="http://jackliu17.github.io/tags/iOS-animation/"/>
    
      <category term="iOS_CALayer" scheme="http://jackliu17.github.io/tags/iOS-CALayer/"/>
    
  </entry>
  
  <entry>
    <title>CALayer的使用</title>
    <link href="http://jackliu17.github.io/2016/05/08/CALayer%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://jackliu17.github.io/2016/05/08/CALayer的使用/</id>
    <published>2016-05-08T07:07:09.000Z</published>
    <updated>2016-05-08T07:08:57.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;CALayer简介&quot;&gt;&lt;a href=&quot;#CALayer简介&quot; class=&quot;headerlink&quot; title=&quot;CALayer简介&quot;&gt;&lt;/a&gt;CALayer简介&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;CALayer一般作为UIView的容器而使用&lt;/li&gt;
&lt;li&gt;CALayer是一个管理着图片载体（image-based content）的层结构, &lt;strong&gt;UIView中CALayer的值设定(如frame, backgroundColor)可以覆盖其UIView中的设定&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;直接修改单独创建出的CALayer的属性可以触发隐式动画&lt;/li&gt;
&lt;li&gt;UIView中的CALayer动画必须显式触发才能生效&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;用CALayer定制下载进度条控件&quot;&gt;&lt;a href=&quot;#用CALayer定制下载进度条控件&quot; class=&quot;headerlink&quot; title=&quot;用CALayer定制下载进度条控件&quot;&gt;&lt;/a&gt;用CALayer定制下载进度条控件&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;单独创建出CALayer&lt;/li&gt;
&lt;li&gt;直接修改CALayer的frame值执行隐式动画，实现进度条效果&lt;/li&gt;
&lt;li&gt;用定时器（NSTimer）模拟网络下载时提供的百分比数据&lt;/li&gt;
&lt;li&gt;将CALayer封装进UIView子类中定制进度条控件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CALayer_progressView.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;隐式动画进度条&quot;&gt;&lt;a href=&quot;#隐式动画进度条&quot; class=&quot;headerlink&quot; title=&quot;隐式动画进度条&quot;&gt;&lt;/a&gt;隐式动画进度条&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;

@interface ViewController ()

@property (nonatomic, strong) NSTimer *timer; // 定时器
@property (nonatomic, strong) CALayer *layer; // layer

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

// 设置背景色
self.view.backgroundColor = [UIColor blackColor];

// CALayer
_layer                 = [CALayer layer];
_layer.frame           = CGRectMake(50, 50, 200, 2);
_layer.backgroundColor = [UIColor redColor].CGColor;
[self.view.layer addSublayer:_layer];

// 定时器
_timer = [NSTimer scheduledTimerWithTimeInterval:1.f
                                          target:self
                                        selector:@selector(timerEvent)
                                        userInfo:nil
                                         repeats:YES];
                                     }


- (void)timerEvent {
// 执行layer的隐式动画（取随机值模拟下载进度）
_layer.frame = CGRectMake(50, 50, arc4random()%200, 2);
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;封装UIView实现进度条&quot;&gt;&lt;a href=&quot;#封装UIView实现进度条&quot; class=&quot;headerlink&quot; title=&quot;封装UIView实现进度条&quot;&gt;&lt;/a&gt;封装UIView实现进度条&lt;/h2&gt;&lt;p&gt;progressView.h&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;

@interface ProgressView : UIView

@property (nonatomic, assign) CGFloat  progress;   // 进度参数（取值范围为 %0 ~ %100）
@property (nonatomic, strong) UIColor *layerColor; // 修改layer的颜色

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;progressView.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;ProgressView.h&amp;quot;

@interface ProgressView ()

@property (nonatomic, strong) CALayer *progressLayer;
@property (nonatomic, assign) CGFloat  currentViewWidth;

@end

@implementation ProgressView

- (instancetype)initWithFrame:(CGRect)frame
{
self = [super initWithFrame:frame];
if (self) {
    self.progressLayer       = [CALayer layer];
    self.progressLayer.frame = CGRectMake(0, 0, 0, frame.size.height);
    self.progressLayer.backgroundColor = [UIColor redColor].CGColor;
    [self.layer addSublayer:self.progressLayer];

    // 存储当前view的宽度值
    self.currentViewWidth = frame.size.width;
}
return self;
}

#pragma mark - 重写setter，getter方法
@synthesize progress = _progress;

- (void)setProgress:(CGFloat)progress {
_progress = progress;

if (progress &amp;lt;= 0) {
    self.progressLayer.frame = CGRectMake(0, 0, 0, self.frame.size.height);
} else if (progress &amp;lt;= 1) {
    self.progressLayer.frame = CGRectMake(0, 0,
                                          progress * self.currentViewWidth,
                                          self.frame.size.height);
} else {
    self.progressLayer.frame = CGRectMake(0, 0, self.currentViewWidth,
                                          self.frame.size.height);
}
}

- (CGFloat)progress {
return _progress;
}

@synthesize layerColor = _layerColor;

- (void)setLayerColor:(UIColor *)layerColor {
_layerColor = layerColor;
self.progressLayer.backgroundColor = layerColor.CGColor;
}

- (UIColor *)layerColor {
return _layerColor;
}


@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;viewController.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;
#import &amp;quot;ProgressView.h&amp;quot;
@interface ViewController ()
@property (nonatomic, strong) ProgressView *progressView;
@property (nonatomic, strong) NSTimer      *timer;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

self.view.backgroundColor = [UIColor blackColor];

self.progressView            = [[ProgressView alloc] initWithFrame:CGRectMake(20, 20, 290, 3)];
self.progressView.layerColor = [UIColor yellowColor];
[self.view addSubview:self.progressView];

// 创建定时器，每一秒执行一回
self.timer = [NSTimer scheduledTimerWithTimeInterval:1
                                              target:self
                                            selector:@selector(layerAnimation)
                                            userInfo:nil
                                             repeats:YES];
                                         }

- (void)layerAnimation {
// 随机获取 0% ~ 100% 给layer赋值
self.progressView.progress = arc4random() % 100 / 100.f;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;用CALayer定制UIImageView淡入淡出切换图片效果&quot;&gt;&lt;a href=&quot;#用CALayer定制UIImageView淡入淡出切换图片效果&quot; class=&quot;headerlink&quot; title=&quot;用CALayer定制UIImageView淡入淡出切换图片效果&quot;&gt;&lt;/a&gt;用CALayer定制UIImageView淡入淡出切换图片效果&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CALayer01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;操作UIImageView的CALayer修改其bounds值进行显式动画&lt;/li&gt;
&lt;li&gt;修改UIImageView的CALayer中的contents属性实现切换图片的动画&lt;/li&gt;
&lt;li&gt;用CAAnimationGroup将bounds动画与contents动画组合起来&lt;/li&gt;
&lt;li&gt;将上述效果封装进UIView的子类中生成控件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CALayer03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;

#define NO_EXECUTE  0  // 不执行
#define EXECUTE     1  // 执行


@interface ViewController ()
@property (nonatomic, strong) CALayer *imageLayer;
@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

// 创建出独立的layer
self.imageLayer          = [CALayer layer];
self.imageLayer.frame    = CGRectMake(0, 0, 302, 707);
// 给layer的contents属性设置图片
self.imageLayer.contents = (__bridge id)([UIImage imageNamed:@&amp;quot;起始图片&amp;quot;].CGImage);
[self.view.layer addSublayer:self.imageLayer];


// 3s后执行layer动画
[self performSelector:@selector(layerAnimation)
           withObject:nil
           afterDelay:3.f];
       }

- (void)layerAnimation {

if (NO_EXECUTE) {
    // 执行隐式动画（你自己无法控制持续时间等等的参数）
    self.imageLayer.contents = (__bridge id)([UIImage imageNamed:@&amp;quot;结束图片&amp;quot;].CGImage);
}

if (NO_EXECUTE) {
    // 执行显式动画

    // 设定基本动画参数
    CABasicAnimation *contentsAnimation = [CABasicAnimation animationWithKeyPath:@&amp;quot;contents&amp;quot;];
    contentsAnimation.fromValue         =  self.imageLayer.contents;
    contentsAnimation.toValue           =  (__bridge id)([UIImage imageNamed:@&amp;quot;结束图片&amp;quot;].CGImage);
    contentsAnimation.duration          = 3.f;

    // 设定layer动画结束后的contents值
    self.imageLayer.contents         = (__bridge id)([UIImage imageNamed:@&amp;quot;结束图片&amp;quot;].CGImage);

    // 让layer开始执行动画
    [self.imageLayer addAnimation:contentsAnimation forKey:nil];
}

if (EXECUTE) {
    // 执行显式动画

    // 基于图片的动画
    CABasicAnimation *contentsAnimation = [CABasicAnimation animationWithKeyPath:@&amp;quot;contents&amp;quot;];
    contentsAnimation.fromValue         =  self.imageLayer.contents;
    contentsAnimation.toValue           =  (__bridge id)([UIImage imageNamed:@&amp;quot;结束图片&amp;quot;].CGImage);
    contentsAnimation.duration          = 0.5f;

    // 基于bounds的动画
    CABasicAnimation *boundsAnimation = [CABasicAnimation animationWithKeyPath:@&amp;quot;bounds&amp;quot;];
    boundsAnimation.fromValue         = [NSValue valueWithCGRect:self.imageLayer.bounds];
    boundsAnimation.toValue           = [NSValue valueWithCGRect:CGRectMake(0, 0, 302/2.f, 707/2.f)];
    boundsAnimation.duration          = 0.5f;

    // 将基于图片的动画与基于bounds的动画组合起来
    CAAnimationGroup *groupAnimation = [CAAnimationGroup animation];
    groupAnimation.animations        = @[contentsAnimation, boundsAnimation];
    groupAnimation.duration          = 0.5f;

    // 设定layer动画结束后的contents值
    self.imageLayer.contents = (__bridge id)([UIImage imageNamed:@&amp;quot;结束图片&amp;quot;].CGImage);
    self.imageLayer.bounds   = CGRectMake(0, 0, 302/2.f, 707/2.f);

    // 让layer开始执行动画
    [self.imageLayer addAnimation:groupAnimation forKey:nil];
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;用CALayer实现复杂遮罩效果&quot;&gt;&lt;a href=&quot;#用CALayer实现复杂遮罩效果&quot; class=&quot;headerlink&quot; title=&quot;用CALayer实现复杂遮罩效果&quot;&gt;&lt;/a&gt;用CALayer实现复杂遮罩效果&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CALayer2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遮罩原理的分析&lt;/li&gt;
&lt;li&gt;用png图片作为CALayer中mask属性的遮罩Layer&lt;/li&gt;
&lt;li&gt;移动该CALayer的mask的frame值实现遮罩动画效果&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;CALayer实现遮罩淡化滤镜&quot;&gt;&lt;a href=&quot;#CALayer实现遮罩淡化滤镜&quot; class=&quot;headerlink&quot; title=&quot;CALayer实现遮罩淡化滤镜&quot;&gt;&lt;/a&gt;CALayer实现遮罩淡化滤镜&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;

@interface ViewController ()

@property (nonatomic, strong) CALayer *imageLayer;
@property (nonatomic, strong) CALayer *maskLayer;

@property (nonatomic, strong) UIImage *contentImage;
@property (nonatomic, strong) UIImage *maskImage;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

self.view.backgroundColor = [UIColor blackColor];

// 处理图片
self.contentImage = [UIImage imageNamed:@&amp;quot;原始图片&amp;quot;];
self.maskImage    = [UIImage imageNamed:@&amp;quot;maskLayerContents&amp;quot;];


// 生成maskLayer
self.maskLayer          = [CALayer layer];
self.maskLayer.frame    = CGRectMake(0, 0, 427/2.f, 427/2.f);
self.maskLayer.contents = (__bridge id)(self.maskImage.CGImage);


// 生成contentsLayer
self.imageLayer          = [CALayer layer];
self.imageLayer.frame    = CGRectMake(0, 0, 427/2.f, 427/2.f);
self.imageLayer.contents = (__bridge id)(self.contentImage.CGImage);


// 给contentsLayer设定mask值
self.imageLayer.mask     = self.maskLayer;


// 将contentsLayer添加到layer中
[self.view.layer addSublayer:self.imageLayer];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;CALayer实现遮罩平移&quot;&gt;&lt;a href=&quot;#CALayer实现遮罩平移&quot; class=&quot;headerlink&quot; title=&quot;CALayer实现遮罩平移&quot;&gt;&lt;/a&gt;CALayer实现遮罩平移&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;

@interface ViewController ()
@property (nonatomic, strong) CALayer *imageLayer;
@property (nonatomic, strong) CALayer *maskLayer;

@property (nonatomic, strong) UIImage *imageContents;
@property (nonatomic, strong) UIImage *maskContents;


@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

self.view.backgroundColor = [UIColor blackColor];

// 获取图片
self.imageContents = [UIImage imageNamed:@&amp;quot;原始图片&amp;quot;];
self.maskContents  = [UIImage imageNamed:@&amp;quot;maskLayerContents&amp;quot;];

// 创建出图片layer
self.imageLayer          = [CALayer layer];
self.imageLayer.frame    = CGRectMake(50, 50, 200, 200);
self.imageLayer.contents = (__bridge id)(self.imageContents.CGImage);
[self.view.layer addSublayer:self.imageLayer];

// 创建出遮罩layer
self.maskLayer          = [CALayer layer];
self.maskLayer.frame    = self.imageLayer.bounds;
self.maskLayer.contents = (__bridge id)(self.maskContents.CGImage);
self.maskLayer.backgroundColor = [UIColor whiteColor].CGColor;

// 给图片layer提供遮罩的layer
self.imageLayer.mask = self.maskLayer;

// 3秒钟之后做maskLayer动画
[self performSelector:@selector(maskLayerAnimation)
           withObject:nil
           afterDelay:3.f];
       }

- (void)maskLayerAnimation {
self.maskLayer.frame = CGRectMake(50, 50, 200, 200);
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;定时执行某方法&quot;&gt;&lt;a href=&quot;#定时执行某方法&quot; class=&quot;headerlink&quot; title=&quot;定时执行某方法&quot;&gt;&lt;/a&gt;定时执行某方法&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;// 定时器
_timer = [NSTimer scheduledTimerWithTimeInterval:1.f
                                          target:self
                                        selector:@selector(timerEvent)
                                        userInfo:nil
                                         repeats:YES];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;随机取值&quot;&gt;&lt;a href=&quot;#随机取值&quot; class=&quot;headerlink&quot; title=&quot;随机取值&quot;&gt;&lt;/a&gt;随机取值&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;//随机取0-200中的值
arc4random()%200
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;进度参数&quot;&gt;&lt;a href=&quot;#进度参数&quot; class=&quot;headerlink&quot; title=&quot;进度参数&quot;&gt;&lt;/a&gt;进度参数&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;//（取值范围为 %0 ~ %100）
@property (nonatomic, assign) CGFloat  progress;  
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;方法执行开关&quot;&gt;&lt;a href=&quot;#方法执行开关&quot; class=&quot;headerlink&quot; title=&quot;方法执行开关&quot;&gt;&lt;/a&gt;方法执行开关&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;#define NO_EXECUTE  0  // 不执行
#define EXECUTE     1  // 执行

// 不执行
if (NO_EXECUTE) {
....
}

// 执行
if (EXECUTE) {
.....
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;动画执行与最终设定&quot;&gt;&lt;a href=&quot;#动画执行与最终设定&quot; class=&quot;headerlink&quot; title=&quot;动画执行与最终设定&quot;&gt;&lt;/a&gt;动画执行与最终设定&lt;/h1&gt;&lt;p&gt;此类动画只是一种提交，并没有最终改变layer的设定。如果结束后，会很快返回到原先的设定。所以要在动画执行前设定好layer值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 设定layer动画结束后的contents值
self.imageLayer.contents = (__bridge id)([UIImage imageNamed:@&amp;quot;结束图片&amp;quot;].CGImage);
self.imageLayer.bounds   = CGRectMake(0, 0, 302/2.f, 707/2.f);

// 让layer开始执行动画
[self.imageLayer addAnimation:groupAnimation forKey:nil];
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CALayer简介&quot;&gt;&lt;a href=&quot;#CALayer简介&quot; class=&quot;headerlink&quot; title=&quot;CALayer简介&quot;&gt;&lt;/a&gt;CALayer简介&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;CALayer一般作为UIView的容器而使用&lt;/li&gt;
&lt;li&gt;CAL
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_CALayer" scheme="http://jackliu17.github.io/tags/iOS-CALayer/"/>
    
      <category term="iOS_image" scheme="http://jackliu17.github.io/tags/iOS-image/"/>
    
  </entry>
  
  <entry>
    <title>iOS绘图API演示</title>
    <link href="http://jackliu17.github.io/2016/05/07/iOS%E7%BB%98%E5%9B%BEAPI%E6%BC%94%E7%A4%BA/"/>
    <id>http://jackliu17.github.io/2016/05/07/iOS绘图API演示/</id>
    <published>2016-05-07T05:51:59.000Z</published>
    <updated>2016-05-07T06:00:46.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;绘制直线&quot;&gt;&lt;a href=&quot;#绘制直线&quot; class=&quot;headerlink&quot; title=&quot;绘制直线&quot;&gt;&lt;/a&gt;绘制直线&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawline.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class DrawLinesView: UIView {

// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
override func drawRect(rect: CGRect) {
    // Drawing code

    //设定绘画环境
    let context = UIGraphicsGetCurrentContext()

    //绘画起点
    CGContextMoveToPoint(context, 100, 100)
    //绘画终点
    CGContextAddLineToPoint(context, 100, 200)
     //绘画终点
    CGContextAddLineToPoint(context, 200, 200)

    //绘画起点
    CGContextMoveToPoint(context, 100, 300)
      //绘画终点
    CGContextAddLineToPoint(context, 100, 400)
      //绘画终点
    CGContextAddLineToPoint(context, 200, 500)

    //设定颜色
    CGContextSetRGBStrokeColor(context, 1, 0, 1, 1)
    //设定线条宽度
    CGContextSetLineWidth(context, 5)
    //绘制线条
    CGContextStrokePath(context)

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;绘制矩形&quot;&gt;&lt;a href=&quot;#绘制矩形&quot; class=&quot;headerlink&quot; title=&quot;绘制矩形&quot;&gt;&lt;/a&gt;绘制矩形&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawRect.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码-1&quot;&gt;&lt;a href=&quot;#代码-1&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;import UIKit

class DrawRectView: UIView {

// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
override func drawRect(rect: CGRect) {
    // Drawing code
//设定绘画环境
let context = UIGraphicsGetCurrentContext()
    //加入矩形
    CGContextAddRect(context, CGRect(x:100,y:100,width: 100,height: 100))
    //填充颜色
    CGContextSetRGBFillColor(context, 1, 0, 0, 1)
    //绘制矩形
    CGContextFillPath(context)

    //设置外框的宽度
    CGContextSetLineWidth(context, 5)
    //设置外框颜色
    CGContextSetRGBStrokeColor(context,0 ,1, 0, 1)
    //绘制外框
    CGContextStrokeRect(context, CGRect(x: 100, y: 100, width: 100, height: 100))

}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;绘制圆形&quot;&gt;&lt;a href=&quot;#绘制圆形&quot; class=&quot;headerlink&quot; title=&quot;绘制圆形&quot;&gt;&lt;/a&gt;绘制圆形&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawCircle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码-2&quot;&gt;&lt;a href=&quot;#代码-2&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;import UIKit

class DrawCircle: UIView { 
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
override func drawRect(rect: CGRect) {
    // Drawing code

let context = UIGraphicsGetCurrentContext()

    //加入圆形
    CGContextAddArc(context, 150, 200, 100, 0, 3.141592653 * 2, 0)
    //填充颜色
    CGContextSetRGBFillColor(context, 1, 0, 0, 1)
    //开始绘制填充
    CGContextFillPath(context)

    //加入圆形
    CGContextAddArc(context, 150, 200, 100, 0, 3.141592653 * 2, 0)
    //设定宽度
    CGContextSetLineWidth(context, 10)
    //绘制
    CGContextStrokePath(context)

    //加入椭圆
    CGContextAddEllipseInRect(context, CGRect(x: 50, y: 400, width: 200, height: 100))
    //绘制
    CGContextStrokePath(context)
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;绘制图片&quot;&gt;&lt;a href=&quot;#绘制图片&quot; class=&quot;headerlink&quot; title=&quot;绘制图片&quot;&gt;&lt;/a&gt;绘制图片&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawImage.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码-3&quot;&gt;&lt;a href=&quot;#代码-3&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;import UIKit

class DrawImageView: UIView {

// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
override func drawRect(rect: CGRect) {
    // Drawing code

    var uiImage:CGImageRef?

    uiImage = UIImage(named: &amp;quot;girl.jpg&amp;quot;)?.CGImage

    let context = UIGraphicsGetCurrentContext()

    //context状态的维持和释放，不影响其他图像的绘制
    CGContextSaveGState(context)

    //没有如下这两个图像会翻转
    CGContextTranslateCTM(context, 10, 400)
    CGContextScaleCTM(context, 1, -1)
    CGContextDrawImage(context, CGRect(x: 0,y: 0,width: 200,height: 200), uiImage)
    CGContextRestoreGState(context)

    CGContextStrokeRect(context, CGRect(x: 50, y: 100, width: 100, height: 100))
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;绘图板&quot;&gt;&lt;a href=&quot;#绘图板&quot; class=&quot;headerlink&quot; title=&quot;绘图板&quot;&gt;&lt;/a&gt;绘图板&lt;/h1&gt;&lt;h2 id=&quot;代码-4&quot;&gt;&lt;a href=&quot;#代码-4&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;import UIKit

class DrawBoardView: UIView {

var path = CGPathCreateMutable()

override func touchesBegan(touches: Set&amp;lt;UITouch&amp;gt;, withEvent event: UIEvent?) {

    let p = (touches as NSSet).anyObject()?.locationInView(self)

    CGPathMoveToPoint(path, nil, p!.x, p!.y)

}

override func touchesMoved(touches: Set&amp;lt;UITouch&amp;gt;, withEvent event: UIEvent?) {

    let p = (touches as NSSet).anyObject()?.locationInView(self)

    CGPathAddLineToPoint(path, nil, p!.x, p!.y)

    setNeedsDisplay()

}

// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
override func drawRect(rect: CGRect) {
    // Drawing code
    let context = UIGraphicsGetCurrentContext()
    CGContextAddPath(context, path)
    CGContextStrokePath(context)

}

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;怎么清空画板&quot;&gt;&lt;a href=&quot;#怎么清空画板&quot; class=&quot;headerlink&quot; title=&quot;怎么清空画板&quot;&gt;&lt;/a&gt;怎么清空画板&lt;/h1&gt;&lt;p&gt;1.重新运行程序即可清空&lt;br&gt;2.设置个按钮点击事件实现清空之前所有操作&lt;br&gt;3.使用CGContextClearRect，&lt;br&gt;4.重新初始化path，这样重画的时候不会检测到之前有线条的path，画面就自动清空了&lt;/p&gt;
&lt;h1 id=&quot;橡皮擦功能&quot;&gt;&lt;a href=&quot;#橡皮擦功能&quot; class=&quot;headerlink&quot; title=&quot;橡皮擦功能&quot;&gt;&lt;/a&gt;橡皮擦功能&lt;/h1&gt;&lt;p&gt;较粗的和背景颜色同样的线条&lt;/p&gt;
&lt;h1 id=&quot;绘制图像时解决翻转问题&quot;&gt;&lt;a href=&quot;#绘制图像时解决翻转问题&quot; class=&quot;headerlink&quot; title=&quot;绘制图像时解决翻转问题&quot;&gt;&lt;/a&gt;绘制图像时解决翻转问题&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;CGContextTranslateCTM(context, 10, 400)
CGContextScaleCTM(context, 1, -1)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;context状态的维持和释放&quot;&gt;&lt;a href=&quot;#context状态的维持和释放&quot; class=&quot;headerlink&quot; title=&quot;context状态的维持和释放&quot;&gt;&lt;/a&gt;context状态的维持和释放&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;//context状态的维持和释放，不影响其他图像的绘制
CGContextSaveGState(context)
.............绘制代码
CGContextRestoreGState(context)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;setNeedsDisplay&quot;&gt;&lt;a href=&quot;#setNeedsDisplay&quot; class=&quot;headerlink&quot; title=&quot;setNeedsDisplay()&quot;&gt;&lt;/a&gt;setNeedsDisplay()&lt;/h1&gt;&lt;p&gt;执行这个方法时会调用drawRect重新绘图&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;绘制直线&quot;&gt;&lt;a href=&quot;#绘制直线&quot; class=&quot;headerlink&quot; title=&quot;绘制直线&quot;&gt;&lt;/a&gt;绘制直线&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawline.p
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_image" scheme="http://jackliu17.github.io/tags/iOS-image/"/>
    
  </entry>
  
  <entry>
    <title>使用带粒子效果的CAEmitterLayer</title>
    <link href="http://jackliu17.github.io/2016/05/06/%E4%BD%BF%E7%94%A8%E5%B8%A6%E7%B2%92%E5%AD%90%E6%95%88%E6%9E%9C%E7%9A%84CAEmitterLayer/"/>
    <id>http://jackliu17.github.io/2016/05/06/使用带粒子效果的CAEmitterLayer/</id>
    <published>2016-05-06T06:34:55.000Z</published>
    <updated>2016-05-06T06:36:05.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;用CAEmitterLayer产生粒子效果&quot;&gt;&lt;a href=&quot;#用CAEmitterLayer产生粒子效果&quot; class=&quot;headerlink&quot; title=&quot;用CAEmitterLayer产生粒子效果&quot;&gt;&lt;/a&gt;用CAEmitterLayer产生粒子效果&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;CAEmitterLayer的用途&lt;/li&gt;
&lt;li&gt;CAEmitterLayer的一些重要参数&lt;/li&gt;
&lt;li&gt;为什么要使用CAEmitterLayer&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.
// 创建出Layer
CAEmitterLayer *emitterLayer = [CAEmitterLayer layer];
// 显示边框
emitterLayer.borderWidth = 1.f;

// 给定尺寸
emitterLayer.frame = CGRectMake(100, 100, 100, 100);

// 发射点
emitterLayer.emitterPosition = CGPointMake(0, 0);

// 发射模式
emitterLayer.emitterMode = kCAEmitterLayerSurface;

// 发射形状
emitterLayer.emitterShape = kCAEmitterLayerLine;

// 添加layer
[self.view.layer addSublayer:emitterLayer];

// 创建粒子
CAEmitterCell *cell = [CAEmitterCell emitterCell];

// 粒子产生率
cell.birthRate = 10.f;

// 粒子生命周期
cell.lifetime = 10.f;

// 速度值
cell.velocity = 10;

// 速度值的微调值
cell.velocityRange = 3.f;

// y轴加速度
cell.yAcceleration = 2.f;

// 发射角度
cell.emissionRange = 4.f * M_1_PI;

// 设置粒子颜色
cell.color = [UIColor blackColor].CGColor;

// 设置图片
cell.contents = (__bridge id)([UIImage imageNamed:@&amp;quot;snow&amp;quot;].CGImage);

// 让CAEmitterCell与CAEmitterLayer产生关联
emitterLayer.emitterCells = @[cell];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;封装CAEmitterLayer&quot;&gt;&lt;a href=&quot;#封装CAEmitterLayer&quot; class=&quot;headerlink&quot; title=&quot;封装CAEmitterLayer&quot;&gt;&lt;/a&gt;封装CAEmitterLayer&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;替换CAEmitterLayer成UIView子类的backedLayer&lt;/li&gt;
&lt;li&gt;将CAEmitterLayer封装的类作为“抽象”父类&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;代码-1&quot;&gt;&lt;a href=&quot;#代码-1&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;viewController.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;
#import &amp;quot;CAEmitterLayerView.h&amp;quot;
@interface ViewController ()
@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];
CAEmitterLayerView *layerView = [[CAEmitterLayerView alloc] initWithFrame:CGRectMake(100, 100, 100, 100)];
NSLog(@&amp;quot;%@&amp;quot;, layerView.layer);
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CAEmitterLayerView.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;CAEmitterLayerView.h&amp;quot;

@interface CAEmitterLayerView () {
CAEmitterLayer  *_emitterLayer;
}
@end

@implementation CAEmitterLayerView

+ (Class)layerClass {
return [CAEmitterLayer class];
}

- (instancetype)initWithFrame:(CGRect)frame {
self = [super initWithFrame:frame];
if (self) {    
    _emitterLayer = (CAEmitterLayer *)self.layer;
}
return self;
}

- (void)show {
}

- (void)hide {
}

- (void)setEmitterLayer:(CAEmitterLayer *)layer {
_emitterLayer = layer;
}

- (CAEmitterLayer *)emitterLayer {
return _emitterLayer;
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;封装下雪下雨的粒子效果控件&quot;&gt;&lt;a href=&quot;#封装下雪下雨的粒子效果控件&quot; class=&quot;headerlink&quot; title=&quot;封装下雪下雨的粒子效果控件&quot;&gt;&lt;/a&gt;封装下雪下雨的粒子效果控件&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;从封装CAEmitterLayer的“抽象”父类继承的原因&lt;/li&gt;
&lt;li&gt;下雪、下雨效果参数的设置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_CAEmitterLayer.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码-2&quot;&gt;&lt;a href=&quot;#代码-2&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;viewController.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];

UIImageView *alphaView1 = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];
alphaView1.image        = [UIImage imageNamed:@&amp;quot;alpha&amp;quot;];

// 添加下雪效果
CAEmitterLayerView *snowView = [[SnowView alloc] initWithFrame:CGRectMake(100, 100, 100, 100)];
snowView.maskView            = alphaView1;
[self.view addSubview:snowView];
[snowView show];

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SnowView.m (继承CAEmitterLayerView，见上)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;SnowView.h&amp;quot;

@implementation SnowView

- (instancetype)initWithFrame:(CGRect)frame {
self = [super initWithFrame:frame];
if (self) {
    // 初始化设置
    [self setup];
}
return self;
}

- (void)setup {
self.emitterLayer.masksToBounds   = YES;
self.emitterLayer.emitterShape    = kCAEmitterLayerLine;
self.emitterLayer.emitterMode     = kCAEmitterLayerSurface;
self.emitterLayer.emitterSize     = self.frame.size;
self.emitterLayer.emitterPosition = CGPointMake(self.bounds.size.width / 2.f, - 20);
}

- (void)show {
// 配置
CAEmitterCell *snowflake  = [CAEmitterCell emitterCell];
snowflake.birthRate       = 1.f;
snowflake.speed           = 10.f;
snowflake.velocity        = 2.f;
snowflake.velocityRange   = 10.f;
snowflake.yAcceleration   = 10.f;
snowflake.emissionRange   = 0.5 * M_PI;
snowflake.spinRange       = 0.25 * M_PI;
snowflake.contents        = (__bridge id)([UIImage imageNamed:@&amp;quot;snow&amp;quot;].CGImage);
snowflake.color           = [UIColor redColor].CGColor;
snowflake.lifetime        = 60.f;
snowflake.scale           = 0.5;
snowflake.scaleRange      = 0.3;

// 添加动画
self.emitterLayer.emitterCells = @[snowflake];
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;指定UIView的layer-class&quot;&gt;&lt;a href=&quot;#指定UIView的layer-class&quot; class=&quot;headerlink&quot; title=&quot;指定UIView的layer class&quot;&gt;&lt;/a&gt;指定UIView的layer class&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;+ (Class)layerClass {
return [CAEmitterLayer class];
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用CAEmitterLayer产生粒子效果&quot;&gt;&lt;a href=&quot;#用CAEmitterLayer产生粒子效果&quot; class=&quot;headerlink&quot; title=&quot;用CAEmitterLayer产生粒子效果&quot;&gt;&lt;/a&gt;用CAEmitterLayer产生粒子效果&lt;/
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_animation" scheme="http://jackliu17.github.io/tags/iOS-animation/"/>
    
  </entry>
  
  <entry>
    <title>缓动函数与关键帧动画</title>
    <link href="http://jackliu17.github.io/2016/05/05/%E7%BC%93%E5%8A%A8%E5%87%BD%E6%95%B0%E4%B8%8E%E5%85%B3%E9%94%AE%E5%B8%A7%E5%8A%A8%E7%94%BB/"/>
    <id>http://jackliu17.github.io/2016/05/05/缓动函数与关键帧动画/</id>
    <published>2016-05-05T11:08:35.000Z</published>
    <updated>2016-05-05T11:18:33.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;缓动函数简介&quot;&gt;&lt;a href=&quot;#缓动函数简介&quot; class=&quot;headerlink&quot; title=&quot;缓动函数简介&quot;&gt;&lt;/a&gt;缓动函数简介&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;缓动函数的动画效果是建立在CALayer层级的关键帧动画基础之上&lt;/li&gt;
&lt;li&gt;缓动函数是一系列模拟物理效果（如抛物线）方程式的统称，用以计算给定两点之间的插值&lt;/li&gt;
&lt;li&gt;两点之间插的值越多，效果越好，但是会耗费更多的性能&lt;/li&gt;
&lt;li&gt;只有理解了缓动函数的原理才有可能写出自己想要的效果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/%E7%BC%93%E5%8A%A8%E5%87%BD%E6%95%B0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;缓动函数与关键帧动画的联系&quot;&gt;&lt;a href=&quot;#缓动函数与关键帧动画的联系&quot; class=&quot;headerlink&quot; title=&quot;缓动函数与关键帧动画的联系&quot;&gt;&lt;/a&gt;缓动函数与关键帧动画的联系&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;关键帧动画需要提供很多的帧来完善动画效果&lt;/li&gt;
&lt;li&gt;关键帧动画的帧可以通过一定的数学计算来提供需要的帧数&lt;/li&gt;
&lt;li&gt;关键帧动画只需要提供起始点，结束点，就可以通过缓动函数来计算中间“缺失”的帧&lt;/li&gt;
&lt;li&gt;缓动函数可以指定计算出多少帧&lt;/li&gt;
&lt;li&gt;帧数越多，动画越流畅，但同时耗费更多的GPU性能。&lt;strong&gt;1秒钟60帧最多了，写得再大也是浪费GPU&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

// 添加显示用的view
UIView *showView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];
showView.layer.cornerRadius  = 50;
showView.layer.masksToBounds = YES;
showView.backgroundColor     = [UIColor redColor];
[self.view addSubview:showView];

//    // 基本动画类型
//    CABasicAnimation *basicAnimation = [CABasicAnimation animation];
//    basicAnimation.keyPath           = @&amp;quot;position&amp;quot;;
//    basicAnimation.duration          = 4.f;
//
//    // fromValue = A | toValue = B
//    basicAnimation.fromValue = [NSValue valueWithCGPoint:showView.center];
//    basicAnimation.toValue   = [NSValue valueWithCGPoint:CGPointMake(200, 200)];
//
//    showView.center = CGPointMake(200, 200);
//    [showView.layer addAnimation:basicAnimation forKey:nil];

// 关键帧动画类型
CAKeyframeAnimation *keyFrameAnimation = [CAKeyframeAnimation animation];
keyFrameAnimation.keyPath              = @&amp;quot;position&amp;quot;;
keyFrameAnimation.duration             = 4.f;
keyFrameAnimation.values = [YXEasing calculateFrameFromPoint:showView.center
                                                     toPoint:CGPointMake(200, 200)
                                                        func:BounceEaseInOut
                                                  frameCount:30 * 4];
showView.center = CGPointMake(200, 200);
[showView.layer addAnimation:keyFrameAnimation forKey:nil];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;用缓动函数模拟弹簧效果&quot;&gt;&lt;a href=&quot;#用缓动函数模拟弹簧效果&quot; class=&quot;headerlink&quot; title=&quot;用缓动函数模拟弹簧效果&quot;&gt;&lt;/a&gt;用缓动函数模拟弹簧效果&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;使用easeOutElastic函数来创建弹簧效果&lt;/li&gt;
&lt;li&gt;将easeOutElastic创建出来的帧数组添加到关键帧动画中&lt;/li&gt;
&lt;li&gt;弹簧效果用途&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_spring.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码-1&quot;&gt;&lt;a href=&quot;#代码-1&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;
#import &amp;quot;YXEasing.h&amp;quot;
@interface ViewController ()
@property (nonatomic, strong) CALayer *secLayer; // 秒针layer
@property (nonatomic, strong) NSTimer *timer;    // 定时器
@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

// 创建一个表盘
UIView *showView            = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 300, 300)];
showView.center             = self.view.center;
showView.layer.borderWidth  = 1.f;
showView.layer.cornerRadius = 150;
showView.layer.borderColor  = [UIColor redColor].CGColor;
[self.view addSubview:showView];

// 创建出秒针layer
self.secLayer                 = [CALayer layer];
self.secLayer.anchorPoint     = CGPointMake(0, 0);
self.secLayer.frame           = CGRectMake(150, 150, 1, 150);
self.secLayer.backgroundColor = [UIColor blackColor].CGColor;
[showView.layer addSublayer:self.secLayer];

// 创建定时器
self.timer = [NSTimer scheduledTimerWithTimeInterval:1.f
                                              target:self
                                            selector:@selector(timerEvent)
                                            userInfo:nil
                                             repeats:YES];
}

- (void)timerEvent {

static int i = 1;

CGFloat oldValue = DEGREES_TO_RADIANS((360 / 60.f) * i++);
CGFloat newValue = DEGREES_TO_RADIANS((360 / 60.f) * i);

// 创建关键帧动画
CAKeyframeAnimation *keyFrameAnimation = [CAKeyframeAnimation animation];
keyFrameAnimation.keyPath              = @&amp;quot;transform.rotation.z&amp;quot;;
keyFrameAnimation.duration             = 0.5;
keyFrameAnimation.values               = [YXEasing calculateFrameFromValue:oldValue
                                                                   toValue:newValue
                                                                      func:ElasticEaseOut
                                                                frameCount:0.5 * 30];

self.secLayer.transform = CATransform3DMakeRotation(newValue, 0, 0, 1);
[self.secLayer addAnimation:keyFrameAnimation forKey:nil];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;用缓动函数模拟碰撞效果&quot;&gt;&lt;a href=&quot;#用缓动函数模拟碰撞效果&quot; class=&quot;headerlink&quot; title=&quot;用缓动函数模拟碰撞效果&quot;&gt;&lt;/a&gt;用缓动函数模拟碰撞效果&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;使用easeOutBounce函数来创建弹簧效果&lt;/li&gt;
&lt;li&gt;将easeOutBounce创建出来的帧数组添加到关键帧动画中&lt;/li&gt;
&lt;li&gt;碰撞效果用途&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;代码-2&quot;&gt;&lt;a href=&quot;#代码-2&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.
// 创建图片view
UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 320, 320)];
imageView.image        = [UIImage imageNamed:@&amp;quot;pic&amp;quot;];
imageView.contentMode  = UIViewContentModeScaleAspectFill;
[self.view addSubview:imageView];

// 创建关键帧动画(移动距离的动画)
CAKeyframeAnimation *keyFrameAnimation = [CAKeyframeAnimation animation];
keyFrameAnimation.keyPath              = @&amp;quot;position&amp;quot;;
keyFrameAnimation.duration             = 2.f;
keyFrameAnimation.values               = \
[YXEasing calculateFrameFromPoint:imageView.center
                          toPoint:CGPointMake(320 / 2.f, 320 / 2.f + 240)
                             func:BounceEaseOut
                       frameCount:2 * 30];

// 添加动画
imageView.center = CGPointMake(320 / 2.f, 320 / 2.f + 240);
[imageView.layer addAnimation:keyFrameAnimation forKey:nil];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;用缓动函数模拟衰减效果&quot;&gt;&lt;a href=&quot;#用缓动函数模拟衰减效果&quot; class=&quot;headerlink&quot; title=&quot;用缓动函数模拟衰减效果&quot;&gt;&lt;/a&gt;用缓动函数模拟衰减效果&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;使用easeOutCubic函数来创建弹簧效果&lt;/li&gt;
&lt;li&gt;将easeOutCubic创建出来的帧数组添加到关键帧动画中&lt;/li&gt;
&lt;li&gt;衰减效果用途&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;代码-3&quot;&gt;&lt;a href=&quot;#代码-3&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.
// 背景变暗的view
UIView *backView         = [[UIView alloc] initWithFrame:self.view.bounds];
backView.backgroundColor = [UIColor blackColor];
backView.alpha           = 0;
[UIView animateWithDuration:1.f animations:^{
    backView.alpha       = 0.3;
}];
[self.view addSubview:backView];

// 创建模拟的菜单
UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(320, 0, 320, 568)];
imageView.image        = [UIImage imageNamed:@&amp;quot;pic&amp;quot;];
[self.view addSubview:imageView];

// 创建关键帧动画
CAKeyframeAnimation *keyFrameAnimation = [CAKeyframeAnimation animation];
keyFrameAnimation.keyPath              = @&amp;quot;position&amp;quot;;
keyFrameAnimation.duration             = 1.f;
keyFrameAnimation.values               = \
[YXEasing calculateFrameFromPoint:imageView.center
                          toPoint:CGPointMake(self.view.center.x + 100, self.view.center.y)
                             func:CubicEaseOut
                       frameCount:1 * 30];

// 加载关键帧动画
imageView.center = CGPointMake(self.view.center.x + 100, self.view.center.y);
[imageView.layer addAnimation:keyFrameAnimation forKey:nil];
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缓动函数简介&quot;&gt;&lt;a href=&quot;#缓动函数简介&quot; class=&quot;headerlink&quot; title=&quot;缓动函数简介&quot;&gt;&lt;/a&gt;缓动函数简介&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;缓动函数的动画效果是建立在CALayer层级的关键帧动画基础之上&lt;/li&gt;
&lt;li&gt;缓动函数是一
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_animation" scheme="http://jackliu17.github.io/tags/iOS-animation/"/>
    
  </entry>
  
  <entry>
    <title>Facebook开源动画库POP实现真实衰减与弹簧动画</title>
    <link href="http://jackliu17.github.io/2016/05/05/Facebook%E5%BC%80%E6%BA%90%E5%8A%A8%E7%94%BB%E5%BA%93POP%E5%AE%9E%E7%8E%B0%E7%9C%9F%E5%AE%9E%E8%A1%B0%E5%87%8F%E4%B8%8E%E5%BC%B9%E7%B0%A7%E5%8A%A8%E7%94%BB/"/>
    <id>http://jackliu17.github.io/2016/05/05/Facebook开源动画库POP实现真实衰减与弹簧动画/</id>
    <published>2016-05-05T04:36:15.000Z</published>
    <updated>2016-05-05T04:37:27.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;POP动画引擎简介&quot;&gt;&lt;a href=&quot;#POP动画引擎简介&quot; class=&quot;headerlink&quot; title=&quot;POP动画引擎简介&quot;&gt;&lt;/a&gt;POP动画引擎简介&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;POP动画引擎是Facebook公司开源的&lt;/li&gt;
&lt;li&gt;POP动画引擎主要实现了真实物理系的动画效果(弹簧效果与衰减效果)&lt;/li&gt;
&lt;li&gt;POP动画引擎的动画效果非常流畅，因为它使用了CADisplayLink来刷新画面(帧)&lt;/li&gt;
&lt;li&gt;POP动画引擎自成体系，与系统的CoreAnimation有着很大的区别，但使用非常类似&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;POP动画引擎中Layer与CALayer的区别&quot;&gt;&lt;a href=&quot;#POP动画引擎中Layer与CALayer的区别&quot; class=&quot;headerlink&quot; title=&quot;POP动画引擎中Layer与CALayer的区别&quot;&gt;&lt;/a&gt;POP动画引擎中Layer与CALayer的区别&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;使用POP动画与使用CALayer动画非常相似&lt;/li&gt;
&lt;li&gt;POP动画的执行没有中间状态&lt;/li&gt;
&lt;li&gt;POP动画是对CALayer动画的扩充，但不能实现所有的CALayer的动画效果&lt;/li&gt;
&lt;li&gt;POP动画可以作用在任何对象上，不仅仅是CALayer&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;POP动画引擎中Layer与CALayer的区别-1&quot;&gt;&lt;a href=&quot;#POP动画引擎中Layer与CALayer的区别-1&quot; class=&quot;headerlink&quot; title=&quot;POP动画引擎中Layer与CALayer的区别&quot;&gt;&lt;/a&gt;POP动画引擎中Layer与CALayer的区别&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/pop.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;用POP动画引擎实现衰减动画&quot;&gt;&lt;a href=&quot;#用POP动画引擎实现衰减动画&quot; class=&quot;headerlink&quot; title=&quot;用POP动画引擎实现衰减动画&quot;&gt;&lt;/a&gt;用POP动画引擎实现衰减动画&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;衰减动画由POPDecayAnimation来实现&lt;/li&gt;
&lt;li&gt;需要精确计算停止运动瞬间的加速度才能够用衰减动画做出真实的效果&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;用POP动画引擎实现弹簧动画&quot;&gt;&lt;a href=&quot;#用POP动画引擎实现弹簧动画&quot; class=&quot;headerlink&quot; title=&quot;用POP动画引擎实现弹簧动画&quot;&gt;&lt;/a&gt;用POP动画引擎实现弹簧动画&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;弹簧动画由POPSpringAnimation来实现&lt;/li&gt;
&lt;li&gt;弹簧的质量速度时间等值都是可以设置的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For more information , go to &lt;a href=&quot;https://github.com/facebook/pop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/facebook/pop&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;POP动画引擎简介&quot;&gt;&lt;a href=&quot;#POP动画引擎简介&quot; class=&quot;headerlink&quot; title=&quot;POP动画引擎简介&quot;&gt;&lt;/a&gt;POP动画引擎简介&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;POP动画引擎是Facebook公司开源的&lt;/li&gt;
&lt;li&gt;POP动画
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_animation" scheme="http://jackliu17.github.io/tags/iOS-animation/"/>
    
  </entry>
  
  <entry>
    <title>使用maskView设计动画及遮盖</title>
    <link href="http://jackliu17.github.io/2016/05/03/%E4%BD%BF%E7%94%A8maskView%E8%AE%BE%E8%AE%A1%E5%8A%A8%E7%94%BB%E5%8F%8A%E9%81%AE%E7%9B%96/"/>
    <id>http://jackliu17.github.io/2016/05/03/使用maskView设计动画及遮盖/</id>
    <published>2016-05-03T11:47:38.000Z</published>
    <updated>2016-05-03T11:50:53.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;maskView（maskLayer）基本原理&quot;&gt;&lt;a href=&quot;#maskView（maskLayer）基本原理&quot; class=&quot;headerlink&quot; title=&quot;maskView（maskLayer）基本原理&quot;&gt;&lt;/a&gt;maskView（maskLayer）基本原理&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;png图片透明像素的原理 （只有png才有透明度概念，jpg没有）&lt;/li&gt;
&lt;li&gt;maskView（maskLayer）可类比于多张png图片的叠加遮罩，原理类似&lt;/li&gt;
&lt;li&gt;maskView是iOS8以上才有的，如果要考虑兼容低版本，用maskLayer替换&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/maskerView.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;// 使用maskView的情况

UIImageView *mask = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, width, width)];
mask.image = [UIImage imageNamed:@&amp;quot;mask&amp;quot;];

self.addImageView = [[UIImageView alloc] initWithFrame:CGRectMake(20, 20 + (width + 20) * 2, width, width)];
self.addImageView.image = [UIImage imageNamed:@&amp;quot;base&amp;quot;];
// maskView并不能用addSubview来添加遮罩,这点千万注意
self.addImageView.maskView = mask;
[self.view addSubview:self.addImageView];

//赋值给上面的mask，在iOS8以下采用
//self.addImageView.layer.mask
//CALayer *layer,
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;maskView配合CAGradientLayer的使用&quot;&gt;&lt;a href=&quot;#maskView配合CAGradientLayer的使用&quot; class=&quot;headerlink&quot; title=&quot;maskView配合CAGradientLayer的使用&quot;&gt;&lt;/a&gt;maskView配合CAGradientLayer的使用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;用CAGradientLayer直接产生带透明像素通道的layer&lt;/li&gt;
&lt;li&gt;用maskView直接加载带CAGradientLayer的view&lt;/li&gt;
&lt;li&gt;可以通过对CAGradientLayer进行动画的操作实现动画效果&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;代码-1&quot;&gt;&lt;a href=&quot;#代码-1&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

// 加载图片
UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(20, 20, 200, 200)];
imageView.image        = [UIImage imageNamed:@&amp;quot;base&amp;quot;];
[self.view addSubview:imageView];

// 创建出CAGradientLayer
CAGradientLayer *gradientLayer = [CAGradientLayer layer];
gradientLayer.frame            = imageView.bounds;
gradientLayer.colors           = @[(__bridge id)[UIColor clearColor].CGColor,
                                   (__bridge id)[UIColor blackColor].CGColor,
                                   (__bridge id)[UIColor clearColor].CGColor];
gradientLayer.locations        = @[@(0.25), @(0.5), @(0.75)];
gradientLayer.startPoint       = CGPointMake(0, 0);
gradientLayer.endPoint         = CGPointMake(1, 0);

// 容器view --&amp;gt; 用于加载创建出的CAGradientLayer
UIView *containerView = [[UIView alloc] initWithFrame:imageView.bounds];
[containerView.layer addSublayer:gradientLayer];

// 设定maskView
imageView.maskView  = containerView;

CGRect frame        = containerView.frame;
frame.origin.x     -= 200;

// 重新赋值
containerView.frame = frame;

// 给maskView做动画效果
[UIView animateWithDuration:3.f animations:^{
    // 改变位移
    CGRect frame        = containerView.frame;
    frame.origin.x     += 400;

    // 重新赋值
    containerView.frame = frame;
}];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;maskView配合带alpha通道图片的使用&quot;&gt;&lt;a href=&quot;#maskView配合带alpha通道图片的使用&quot; class=&quot;headerlink&quot; title=&quot;maskView配合带alpha通道图片的使用&quot;&gt;&lt;/a&gt;maskView配合带alpha通道图片的使用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;直接使用带alpha通道的png图片比用CAGradientLayer的方式更加高效&lt;/li&gt;
&lt;li&gt;可以使用技巧在maskView上添加多张图片&lt;/li&gt;
&lt;li&gt;在maskView中做简单的动画&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;代码-2&quot;&gt;&lt;a href=&quot;#代码-2&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];

// 前景图
UIImageView *background = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 200, 200)];
background.image        = [UIImage imageNamed:@&amp;quot;base&amp;quot;];
background.center       = self.view.center;
[self.view addSubview:background];


// 背景图
UIImageView *upGround = [[UIImageView alloc] initWithFrame:background.frame];
upGround.image        = [UIImage imageNamed:@&amp;quot;background&amp;quot;];
[self.view addSubview:upGround];


// maskView
UIView *mask      = [[UIView alloc] initWithFrame:upGround.bounds];
upGround.maskView = mask;


// 图片1
UIImageView *picOne = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 100, 400)];
picOne.image        = [UIImage imageNamed:@&amp;quot;1&amp;quot;];
[mask addSubview:picOne];


// 图片2
UIImageView *picTwo = [[UIImageView alloc] initWithFrame:CGRectMake(100, -200, 100, 400)];
picTwo.image        = [UIImage imageNamed:@&amp;quot;2&amp;quot;];
[mask addSubview:picTwo];


// 动画
[UIView animateWithDuration:4.f delay:5.f options:0 animations:^{
    picOne.y -= 400;
    picTwo.y += 400;
} completion:^(BOOL finished) {

}];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;设计文本横向渐变消失的控件&quot;&gt;&lt;a href=&quot;#设计文本横向渐变消失的控件&quot; class=&quot;headerlink&quot; title=&quot;设计文本横向渐变消失的控件&quot;&gt;&lt;/a&gt;设计文本横向渐变消失的控件&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;接口的设计&lt;/li&gt;
&lt;li&gt;封装CAGradientLayer用以提供mask遮罩&lt;/li&gt;
&lt;li&gt;动画样式的分析与设计&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;设计动画函数的格式&quot;&gt;&lt;a href=&quot;#设计动画函数的格式&quot; class=&quot;headerlink&quot; title=&quot;设计动画函数的格式&quot;&gt;&lt;/a&gt;设计动画函数的格式&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;// - (void)fadeRight
//将持续时间和是否执行动画设计进去
- (void)fadeRightWithDuration:(NSTimeInterval)duration animated:(BOOL)animated;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;代码-3&quot;&gt;&lt;a href=&quot;#代码-3&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (instancetype)initWithFrame:(CGRect)frame {
self = [super initWithFrame:frame];
if (self) {

    // 创建出label
    [self createLabel:self.bounds];

    // 创建出mask
    [self createMask:self.bounds];

}
return self;
}

- (void)createLabel:(CGRect)frame {
self.label               = [[UILabel alloc] initWithFrame:frame];
self.label.font          = [UIFont systemFontOfSize:30.f];
self.label.textAlignment = NSTextAlignmentCenter;
self.label.textColor     = [UIColor redColor];

[self addSubview:self.label];
}

- (void)createMask:(CGRect)frame {

// 创建出渐变的layer
CAGradientLayer *gradientLayer = [CAGradientLayer layer];
gradientLayer.frame            = frame;
gradientLayer.colors           = @[(__bridge id)[UIColor clearColor].CGColor,
                                   (__bridge id)[UIColor blackColor].CGColor,
                                   (__bridge id)[UIColor blackColor].CGColor,
                                   (__bridge id)[UIColor clearColor].CGColor];
gradientLayer.locations        = @[@(0.01), @(0.1), @(0.9), @(0.99)];
gradientLayer.startPoint       = CGPointMake(0, 0);
gradientLayer.endPoint         = CGPointMake(1, 0);

// 创建并接管mask
self.mask     = [[UIView alloc] initWithFrame:frame];

// mask获取渐变layer
[self.mask.layer addSublayer:gradientLayer];

self.maskView = self.mask;
}

- (void)fadeRight {

[UIView animateWithDuration:3.f animations:^{
    CGRect frame    = self.mask.frame;
    frame.origin.x += frame.size.width;

    self.mask.frame = frame;
}];

}

//重写setter,getter方法

@synthesize text = _text;
- (void)setText:(NSString *)text {
_text           = text;
self.label.text = text;
}
- (NSString *)text {
return _text;
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;maskView（maskLayer）基本原理&quot;&gt;&lt;a href=&quot;#maskView（maskLayer）基本原理&quot; class=&quot;headerlink&quot; title=&quot;maskView（maskLayer）基本原理&quot;&gt;&lt;/a&gt;maskView（maskLaye
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_animation" scheme="http://jackliu17.github.io/tags/iOS-animation/"/>
    
      <category term="iOS_image" scheme="http://jackliu17.github.io/tags/iOS-image/"/>
    
  </entry>
  
</feed>
