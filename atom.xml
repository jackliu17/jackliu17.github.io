<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cowboy Tech</title>
  <subtitle>The best preparation for tomorrow is doing your best today</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jackliu17.github.io/"/>
  <updated>2016-09-26T13:01:17.000Z</updated>
  <id>http://jackliu17.github.io/</id>
  
  <author>
    <name>Jack Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The-Swift-Programming-Language-Swift3</title>
    <link href="http://jackliu17.github.io/2016/09/26/The-Swift-Programming-Language-Swift3/"/>
    <id>http://jackliu17.github.io/2016/09/26/The-Swift-Programming-Language-Swift3/</id>
    <published>2016-09-26T01:56:08.000Z</published>
    <updated>2016-09-26T13:01:17.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Basic-Operators&quot;&gt;&lt;a href=&quot;#Basic-Operators&quot; class=&quot;headerlink&quot; title=&quot;Basic Operators&quot;&gt;&lt;/a&gt;Basic Operators&lt;/h1&gt;&lt;h2 id=&quot;Nil-Coalescing-Operator-a-b&quot;&gt;&lt;a href=&quot;#Nil-Coalescing-Operator-a-b&quot; class=&quot;headerlink&quot; title=&quot;Nil-Coalescing Operator (a ?? b)&quot;&gt;&lt;/a&gt;Nil-Coalescing Operator (a ?? b)&lt;/h2&gt;&lt;p&gt;shorthand for the code below&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a != nil ? a! : b
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;unwraps an optional a if it contains a value, or returns a default value b if a is nil.&lt;/p&gt;
&lt;p&gt;a is always of an optional type&lt;/p&gt;
&lt;p&gt;The expression b must match the type that is stored inside a.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let defaultColorName = &amp;quot;red&amp;quot;
var userDefinedColorName: String?   // defaults to nil

var colorNameToUse = userDefinedColorName ?? defaultColorName
// userDefinedColorName is nil, so colorNameToUse is set to the default of &amp;quot;red&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When assign Optional type value , that means unwrap first&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;userDefinedColorName = &amp;quot;green&amp;quot;
colorNameToUse = userDefinedColorName ?? defaultColorName
// userDefinedColorName is not nil, so colorNameToUse is set to &amp;quot;green&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Closures&quot;&gt;&lt;a href=&quot;#Closures&quot; class=&quot;headerlink&quot; title=&quot;Closures&quot;&gt;&lt;/a&gt;Closures&lt;/h1&gt;&lt;h2 id=&quot;Three-forms&quot;&gt;&lt;a href=&quot;#Three-forms&quot; class=&quot;headerlink&quot; title=&quot;Three forms&quot;&gt;&lt;/a&gt;Three forms&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Global functions are closures that have a name and do not capture any values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nested functions are closures that have a name and can capture values from their enclosing function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Closure-expressions&quot;&gt;&lt;a href=&quot;#Closure-expressions&quot; class=&quot;headerlink&quot; title=&quot;Closure expressions&quot;&gt;&lt;/a&gt;Closure expressions&lt;/h2&gt;&lt;h3 id=&quot;Normal-Syntax-for-the-Sorted-Method&quot;&gt;&lt;a href=&quot;#Normal-Syntax-for-the-Sorted-Method&quot; class=&quot;headerlink&quot; title=&quot;Normal Syntax for the Sorted Method&quot;&gt;&lt;/a&gt;Normal Syntax for the Sorted Method&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;let names = [&amp;quot;Chris&amp;quot;, &amp;quot;Alex&amp;quot;, &amp;quot;Ewa&amp;quot;, &amp;quot;Barry&amp;quot;, &amp;quot;Daniella&amp;quot;]
func backward(_ s1: String, _ s2: String) -&amp;gt; Bool {
    return s1 &amp;gt; s2
}
var reversedNames = names.sorted(by: backward)
// reversedNames is equal to [&amp;quot;Ewa&amp;quot;, &amp;quot;Daniella&amp;quot;, &amp;quot;Chris&amp;quot;, &amp;quot;Barry&amp;quot;, &amp;quot;Alex&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Closure-Expression-Syntax-inline&quot;&gt;&lt;a href=&quot;#Closure-Expression-Syntax-inline&quot; class=&quot;headerlink&quot; title=&quot;Closure Expression Syntax -inline&quot;&gt;&lt;/a&gt;Closure Expression Syntax -inline&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;{ (parameters) -&amp;gt; return type in
    statements
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Can be in-out parameters / Variadic parameters / Tuples&lt;/p&gt;
&lt;p&gt;Cannot have default values&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;reversedNames = names.sorted(by: { (s1: String, s2: String) -&amp;gt; Bool in
    return s1 &amp;gt; s2
})
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Inferring-Type-From-Context&quot;&gt;&lt;a href=&quot;#Inferring-Type-From-Context&quot; class=&quot;headerlink&quot; title=&quot;Inferring Type From Context&quot;&gt;&lt;/a&gt;Inferring Type From Context&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;reversedNames = names.sorted(by: { s1, s2 in return s1 &amp;gt; s2 } )
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Implicit-Returns-from-Single-Expression-Closures&quot;&gt;&lt;a href=&quot;#Implicit-Returns-from-Single-Expression-Closures&quot; class=&quot;headerlink&quot; title=&quot;Implicit Returns from Single-Expression Closures&quot;&gt;&lt;/a&gt;Implicit Returns from Single-Expression Closures&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;reversedNames = names.sorted(by: { s1, s2 in s1 &amp;gt; s2 } )
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Shorthand-Argument-Names&quot;&gt;&lt;a href=&quot;#Shorthand-Argument-Names&quot; class=&quot;headerlink&quot; title=&quot;Shorthand Argument Names&quot;&gt;&lt;/a&gt;Shorthand Argument Names&lt;/h2&gt;&lt;p&gt;Here, $0 and $1 refer to the closure’s first and second String arguments.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;reversedNames = names.sorted(by: { $0 &amp;gt; $1 } )
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Operator-Methods&quot;&gt;&lt;a href=&quot;#Operator-Methods&quot; class=&quot;headerlink&quot; title=&quot;Operator Methods&quot;&gt;&lt;/a&gt;Operator Methods&lt;/h2&gt;&lt;p&gt;Swift’s String type defines its string-specific implementation of the greater-than operator (&amp;gt;) as a method that has two parameters of type String, and returns a value of type Bool.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;reversedNames = names.sorted(by: &amp;gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Trailing-Closures&quot;&gt;&lt;a href=&quot;#Trailing-Closures&quot; class=&quot;headerlink&quot; title=&quot;Trailing Closures&quot;&gt;&lt;/a&gt;Trailing Closures&lt;/h2&gt;&lt;p&gt;If you need to pass a closure expression to a function as the function’s final argument and the closure expression is long:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func someFunctionThatTakesAClosure(closure: () -&amp;gt; Void) {
// function body goes here
}

// Here&amp;apos;s how you call this function without using a trailing closure:

someFunctionThatTakesAClosure(closure: {
// closure&amp;apos;s body goes here
})

// Here&amp;apos;s how you call this function with a trailing closure instead:

someFunctionThatTakesAClosure() {
// trailing closure&amp;apos;s body goes here
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example1:Sort method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;reversedNames = names.sorted() { $0 &amp;gt; $1 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If a closure expression is provided as the function or method’s only argument, paranthesis can be drop altogether&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;reversedNames = names.sorted { $0 &amp;gt; $1 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example2: Map method (need to study further)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let digitNames = [
    0: &amp;quot;Zero&amp;quot;, 1: &amp;quot;One&amp;quot;, 2: &amp;quot;Two&amp;quot;,   3: &amp;quot;Three&amp;quot;, 4: &amp;quot;Four&amp;quot;,
    5: &amp;quot;Five&amp;quot;, 6: &amp;quot;Six&amp;quot;, 7: &amp;quot;Seven&amp;quot;, 8: &amp;quot;Eight&amp;quot;, 9: &amp;quot;Nine&amp;quot;
]
let numbers = [16, 58, 510]

let strings = numbers.map {
(number) -&amp;gt; String in
var number = number
var output = &amp;quot;&amp;quot;
repeat {
    output = digitNames[number % 10]! + output
    number /= 10
} while number &amp;gt; 0
return output
}
// strings is inferred to be of type [String]
// its value is [&amp;quot;OneSix&amp;quot;, &amp;quot;FiveEight&amp;quot;, &amp;quot;FiveOneZero&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Capturing-Values&quot;&gt;&lt;a href=&quot;#Capturing-Values&quot; class=&quot;headerlink&quot; title=&quot;Capturing Values&quot;&gt;&lt;/a&gt;Capturing Values&lt;/h2&gt;&lt;p&gt;A closure can capture constants and variables from the surrounding context in which it is defined&lt;/p&gt;
&lt;p&gt;capturing a reference to &lt;code&gt;runningTotal&lt;/code&gt; and &lt;code&gt;amount&lt;/code&gt; from the surrounding function and using them within its own function body.&lt;/p&gt;
&lt;p&gt;Modify and stored them even surrounding context disapear&lt;/p&gt;
&lt;h3 id=&quot;Weapen-generator&quot;&gt;&lt;a href=&quot;#Weapen-generator&quot; class=&quot;headerlink&quot; title=&quot;Weapen generator&quot;&gt;&lt;/a&gt;Weapen generator&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func makeIncrementer (forIncrement amount: Int) -&amp;gt; () -&amp;gt; Int {

    var runningTotal = 0

    func incrementer() -&amp;gt; Int {
        runningTotal += amount
        return runningTotal
    }

    return incrementer
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Generate-Weapen&quot;&gt;&lt;a href=&quot;#Generate-Weapen&quot; class=&quot;headerlink&quot; title=&quot;Generate Weapen&quot;&gt;&lt;/a&gt;Generate Weapen&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;//Store its reference
let incrementByTen = makeIncrementer(forIncrement: 10)
let incrementBySeven = makeIncrementer(forIncrement: 7)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Use-weapen&quot;&gt;&lt;a href=&quot;#Use-weapen&quot; class=&quot;headerlink&quot; title=&quot;Use weapen&quot;&gt;&lt;/a&gt;Use weapen&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;incrementByTen()
// returns a value of 10

incrementByTen()
// returns a value of 20

incrementByTen()
// returns a value of 30

incrementBySeven()
// returns a value of 7

incrementByTen()
// returns a value of 40

incrementBySeven()
// returns a value of 14
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Closures-Are-Reference-Types&quot;&gt;&lt;a href=&quot;#Closures-Are-Reference-Types&quot; class=&quot;headerlink&quot; title=&quot;Closures Are Reference Types&quot;&gt;&lt;/a&gt;Closures Are Reference Types&lt;/h2&gt;&lt;p&gt;Whenever you assign a function or a closure to a constant or a variable, you are actually setting that constant or variable to be a reference to the function or closure.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let alsoIncrementByTen = incrementByTen
alsoIncrementByTen()
// returns a value of 50
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Escaping-Closures&quot;&gt;&lt;a href=&quot;#Escaping-Closures&quot; class=&quot;headerlink&quot; title=&quot;Escaping Closures&quot;&gt;&lt;/a&gt;Escaping Closures&lt;/h2&gt;&lt;p&gt;Escape:@escaping&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;when the closure is passed as an argument to the function, but is called after the function returns.&lt;/li&gt;
&lt;li&gt;One way that a closure can escape is by being stored in a variable that is defined outside the function.&lt;/li&gt;
&lt;li&gt;have to refer to self explicitly within the closure&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;NoEscape: default&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;refer to self implicitly.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var completionHandlers: [() -&amp;gt; Void] = []

func someFunctionWithEscapingClosure(completionHandler: @escaping () -&amp;gt; Void) {

    completionHandlers.append(completionHandler)
}

func someFunctionWithNonescapingClosure(closure: () -&amp;gt; Void) {
    closure()
}

class SomeClass {

    var x = 10

    func doSomething() {

        someFunctionWithEscapingClosure { self.x = 100 }

        someFunctionWithNonescapingClosure { x = 200 }
    }
}

let instance = SomeClass()

instance.doSomething()
print(instance.x)
// Prints &amp;quot;200&amp;quot;

completionHandlers.first?()
print(instance.x)
// Prints &amp;quot;100&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Autoclosures&quot;&gt;&lt;a href=&quot;#Autoclosures&quot; class=&quot;headerlink&quot; title=&quot;Autoclosures&quot;&gt;&lt;/a&gt;Autoclosures&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Basic-Operators&quot;&gt;&lt;a href=&quot;#Basic-Operators&quot; class=&quot;headerlink&quot; title=&quot;Basic Operators&quot;&gt;&lt;/a&gt;Basic Operators&lt;/h1&gt;&lt;h2 id=&quot;Nil-Coalescin
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>WWWDC2016学习笔记Getting_started_with_swift</title>
    <link href="http://jackliu17.github.io/2016/09/19/WWWDC2016%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Getting-started-with-swift/"/>
    <id>http://jackliu17.github.io/2016/09/19/WWWDC2016学习笔记Getting-started-with-swift/</id>
    <published>2016-09-19T09:08:43.000Z</published>
    <updated>2016-09-20T10:43:42.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Constants&quot;&gt;&lt;a href=&quot;#Constants&quot; class=&quot;headerlink&quot; title=&quot;Constants&quot;&gt;&lt;/a&gt;Constants&lt;/h1&gt;&lt;p&gt;常量为let,变量为var&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let language: String = &amp;quot;Swift&amp;quot;
let introduced: Int = 2014
let isAwesome: Bool = true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Type Inference&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let language = &amp;quot;Swift&amp;quot;    // Inferred as String
let introduced = 2014     // Inferred as Int
let isAwesome = true     // Inferred as Bool
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h1&gt;&lt;p&gt;Building Strings&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let conference = &amp;quot;WWDC&amp;quot;
let message = &amp;quot;Hello, &amp;quot; + conference + &amp;quot;!&amp;quot;

// &amp;quot;Hello, WWDC!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;String Interpolation&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let conference = &amp;quot;WWDC&amp;quot;
let year = 2016
let message = &amp;quot;Hello, \(conference) \(year + 1)!&amp;quot;

// &amp;quot;Hello, WWDC 2017!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Characters&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let dogString = &amp;quot;Dog⁈🐶&amp;quot;
print(&amp;quot;\(dogString) is \(dogString.characters.count) characters long&amp;quot;)

//Dog⁈🐶 is 5 characters long.
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Array-and-Dictionary&quot;&gt;&lt;a href=&quot;#Array-and-Dictionary&quot; class=&quot;headerlink&quot; title=&quot;Array and Dictionary&quot;&gt;&lt;/a&gt;Array and Dictionary&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let names: [String] = [&amp;quot;Lily&amp;quot;, &amp;quot;Santiago&amp;quot;, &amp;quot;Justyn&amp;quot;, &amp;quot;Aadya&amp;quot;]    

let names = [&amp;quot;Lily&amp;quot;, &amp;quot;Santiago&amp;quot;, &amp;quot;Justyn&amp;quot;, &amp;quot;Aadya&amp;quot;] // Type Inference

let ages = [&amp;quot;Mohsen&amp;quot;: 17, &amp;quot;Amy&amp;quot;: 40, &amp;quot;Graham&amp;quot;: 5]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Modifying-an-Array&quot;&gt;&lt;a href=&quot;#Modifying-an-Array&quot; class=&quot;headerlink&quot; title=&quot;Modifying an Array&quot;&gt;&lt;/a&gt;Modifying an Array&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var packingList = [&amp;quot;Socks&amp;quot;, &amp;quot;Shoes&amp;quot;]    
//[&amp;quot;Socks&amp;quot;, &amp;quot;Shoes&amp;quot;]

print(packingList[0])    
//&amp;quot;Socks&amp;quot;

packingList.append(&amp;quot;Trousers&amp;quot;)    
//[&amp;quot;Socks&amp;quot;, &amp;quot;Shoes&amp;quot;, &amp;quot;Trousers&amp;quot;]

packingList[2] = &amp;quot;Jeans&amp;quot;    
//[&amp;quot;Socks&amp;quot;, &amp;quot;Shoes&amp;quot;, &amp;quot;Jeans&amp;quot;]

packingList.append(contentsOf: [&amp;quot;Shorts&amp;quot;, &amp;quot;Sandals&amp;quot;, &amp;quot;Sunblock&amp;quot;])
//[&amp;quot;Socks&amp;quot;, &amp;quot;Shoes&amp;quot;, &amp;quot;Jeans&amp;quot;, &amp;quot;Shorts&amp;quot;, &amp;quot;Sandals&amp;quot;, &amp;quot;Sunblock&amp;quot;]

packingList[3...5] = [&amp;quot;Hoodie&amp;quot;, &amp;quot;Scarf&amp;quot;]
//[&amp;quot;Socks&amp;quot;, &amp;quot;Shoes&amp;quot;, &amp;quot;Jeans&amp;quot;, &amp;quot;Hoodie&amp;quot;, &amp;quot;Scarf&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Modifying-a-Dictionary&quot;&gt;&lt;a href=&quot;#Modifying-a-Dictionary&quot; class=&quot;headerlink&quot; title=&quot;Modifying a Dictionary&quot;&gt;&lt;/a&gt;Modifying a Dictionary&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var ages = [&amp;quot;Mohsen&amp;quot;: 17, &amp;quot;Amy&amp;quot;: 40, &amp;quot;Graham&amp;quot;: 5]
//[&amp;quot;Mohsen&amp;quot;: 17, &amp;quot;Amy&amp;quot;: 40, &amp;quot;Graham&amp;quot;: 5]

ages[&amp;quot;Justyn&amp;quot;] = 67 // Adds a new value for &amp;quot;Justyn&amp;quot;
//[&amp;quot;Mohsen&amp;quot;: 17, &amp;quot;Amy&amp;quot;: 40, &amp;quot;Graham&amp;quot;: 5, &amp;quot;Justyn&amp;quot;: 67]

ages[&amp;quot;Justyn&amp;quot;] = 68 // Changes the value for &amp;quot;Justyn&amp;quot;
//[&amp;quot;Mohsen&amp;quot;: 17, &amp;quot;Amy&amp;quot;: 40, &amp;quot;Graham&amp;quot;: 5, &amp;quot;Justyn&amp;quot;: 68]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Retrieving-a-Value-from-a-Dictionary&quot;&gt;&lt;a href=&quot;#Retrieving-a-Value-from-a-Dictionary&quot; class=&quot;headerlink&quot; title=&quot;Retrieving a Value from a Dictionary&quot;&gt;&lt;/a&gt;Retrieving a Value from a Dictionary&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let ages = [&amp;quot;Mohsen&amp;quot;: 17, &amp;quot;Amy&amp;quot;: 40, &amp;quot;Graham&amp;quot;: 5]
let possibleAge = ages[&amp;quot;Amy&amp;quot;]    
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;While-amp-For-In-Loop&quot;&gt;&lt;a href=&quot;#While-amp-For-In-Loop&quot; class=&quot;headerlink&quot; title=&quot;While &amp;amp; For-In Loop&quot;&gt;&lt;/a&gt;While &amp;amp; For-In Loop&lt;/h1&gt;&lt;h2 id=&quot;While-and-Repeat-While&quot;&gt;&lt;a href=&quot;#While-and-Repeat-While&quot; class=&quot;headerlink&quot; title=&quot;While and Repeat-While&quot;&gt;&lt;/a&gt;While and Repeat-While&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;while !endOfFile {
readLine()
}


repeat {
performTask()
} while tasksRemaining &amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Characters&quot;&gt;&lt;a href=&quot;#Characters&quot; class=&quot;headerlink&quot; title=&quot;Characters&quot;&gt;&lt;/a&gt;Characters&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let dogString = &amp;quot;Dog⁈🐶&amp;quot;
for character in dogString.characters {
print(character)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Closed-Ranges&quot;&gt;&lt;a href=&quot;#Closed-Ranges&quot; class=&quot;headerlink&quot; title=&quot;Closed Ranges&quot;&gt;&lt;/a&gt;Closed Ranges&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;for number in 1...5 {
print(&amp;quot;\(number) times 4 is \(number * 4)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Half-Closed-Ranges&quot;&gt;&lt;a href=&quot;#Half-Closed-Ranges&quot; class=&quot;headerlink&quot; title=&quot;Half-Closed Ranges&quot;&gt;&lt;/a&gt;Half-Closed Ranges&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let results = [7, 52, 9, 33, 6, 12, 86, 4, 22, 18, 3]
let maxResultCount = 5
for index in 0..&amp;lt;maxResultCount {
print(&amp;quot;Result \(index) is \(results[index])&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Arrays&quot;&gt;&lt;a href=&quot;#Arrays&quot; class=&quot;headerlink&quot; title=&quot;Arrays&quot;&gt;&lt;/a&gt;Arrays&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;for name in [&amp;quot;Lily&amp;quot;, &amp;quot;Santiago&amp;quot;, &amp;quot;Justyn&amp;quot;, &amp;quot;Aadya&amp;quot;] {
print(&amp;quot;Hello, \(name)!&amp;quot;)
}   
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Dictionaries&quot;&gt;&lt;a href=&quot;#Dictionaries&quot; class=&quot;headerlink&quot; title=&quot;Dictionaries&quot;&gt;&lt;/a&gt;Dictionaries&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let ages = [&amp;quot;Mohsen&amp;quot;: 17, &amp;quot;Amy&amp;quot;: 40, &amp;quot;Graham&amp;quot;: 5]
for (name, age) in ages {
print(&amp;quot;\(name) is \(age) years old&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Condition&quot;&gt;&lt;a href=&quot;#Condition&quot; class=&quot;headerlink&quot; title=&quot;Condition&quot;&gt;&lt;/a&gt;Condition&lt;/h1&gt;&lt;h2 id=&quot;If-Statement&quot;&gt;&lt;a href=&quot;#If-Statement&quot; class=&quot;headerlink&quot; title=&quot;If Statement&quot;&gt;&lt;/a&gt;If Statement&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let age = 32
if age == 1 {
print(&amp;quot;Happy first birthday!&amp;quot;)
} else if age == 40 {
print(&amp;quot;Happy 40th birthday!&amp;quot;)
} else {
print(&amp;quot;Happy plain old boring birthday.&amp;quot;)
} 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Switch-Statement（需要将所有情况都考虑到）&quot;&gt;&lt;a href=&quot;#Switch-Statement（需要将所有情况都考虑到）&quot; class=&quot;headerlink&quot; title=&quot;Switch Statement（需要将所有情况都考虑到）&quot;&gt;&lt;/a&gt;Switch Statement（需要将所有情况都考虑到）&lt;/h2&gt;&lt;p&gt;例子1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let age = 32
switch age {
case 1:
    print(&amp;quot;Happy first birthday!&amp;quot;)
case 13...19:
    print(&amp;quot;Happy birthday, teenager!&amp;quot;)
case let decade where decade % 10 == 0:
    print(&amp;quot;Happy significant \(decade)th birthday!&amp;quot;)
default:
    print(&amp;quot;Happy plain old boring birthday.&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例子2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let userName = &amp;quot;bob&amp;quot;
let passwordIsValid = false
switch (userName, passwordIsValid) {
    case (&amp;quot;admin&amp;quot;, true):
print(&amp;quot;Welcome back, administrator!&amp;quot;)
    case (&amp;quot;guest&amp;quot;, _):
print(&amp;quot;Guests are not allowed in this restricted area.&amp;quot;)
    case (_, let isValid):
print(isValid ? &amp;quot;Welcome to the restricted area!&amp;quot; : &amp;quot;ACCESS DENIED.&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Optional&quot;&gt;&lt;a href=&quot;#Optional&quot; class=&quot;headerlink&quot; title=&quot;Optional&quot;&gt;&lt;/a&gt;Optional&lt;/h1&gt;&lt;h2 id=&quot;Checking-for-an-Optional-Value&quot;&gt;&lt;a href=&quot;#Checking-for-an-Optional-Value&quot; class=&quot;headerlink&quot; title=&quot;Checking for an Optional Value&quot;&gt;&lt;/a&gt;Checking for an Optional Value&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let ages = [&amp;quot;Mohsen&amp;quot;: 17, &amp;quot;Amy&amp;quot;: 40, &amp;quot;Graham&amp;quot;: 5]

let possibleAge: Int? = ages[&amp;quot;Daryl&amp;quot;]

if possibleAge == nil {
print(&amp;quot;Age not found.&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;If-Let-Statement-when-use-optional&quot;&gt;&lt;a href=&quot;#If-Let-Statement-when-use-optional&quot; class=&quot;headerlink&quot; title=&quot;If-Let Statement(when use optional)&quot;&gt;&lt;/a&gt;If-Let Statement(when use optional)&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let ages = [&amp;quot;Mohsen&amp;quot;: 17, &amp;quot;Amy&amp;quot;: 40, &amp;quot;Graham&amp;quot;: 5]

if let age = ages[&amp;quot;Amy&amp;quot;] {
print(&amp;quot;An age of \(age) was found.&amp;quot;)
}  

//An age of 40 was found.
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Functions&quot;&gt;&lt;a href=&quot;#Functions&quot; class=&quot;headerlink&quot; title=&quot;Functions&quot;&gt;&lt;/a&gt;Functions&lt;/h1&gt;&lt;h2 id=&quot;Multiple-Parameters&quot;&gt;&lt;a href=&quot;#Multiple-Parameters&quot; class=&quot;headerlink&quot; title=&quot;Multiple Parameters&quot;&gt;&lt;/a&gt;Multiple Parameters&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func sendMessage(recipient: String, shouting: Bool) {
var message = &amp;quot;Hey there, \(recipient)!&amp;quot;
if shouting {
    message = message.uppercased()
}
    print(message)
}
sendMessage(recipient: &amp;quot;Morgan&amp;quot;, shouting: false) 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Explicit-Argument-Labels&quot;&gt;&lt;a href=&quot;#Explicit-Argument-Labels&quot; class=&quot;headerlink&quot; title=&quot;Explicit Argument Labels&quot;&gt;&lt;/a&gt;Explicit Argument Labels&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func sendMessage(to recipient: String, shouting: Bool) {
var message = &amp;quot;Hey there, \(recipient)!&amp;quot;
if shouting {
    message = message.uppercased()
}
    print(message)
}
sendMessage(to: &amp;quot;Morgan&amp;quot;, shouting: false)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Omitting-Argument-Labels&quot;&gt;&lt;a href=&quot;#Omitting-Argument-Labels&quot; class=&quot;headerlink&quot; title=&quot;Omitting Argument Labels&quot;&gt;&lt;/a&gt;Omitting Argument Labels&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func sendMessage(_ message: String, to recipient: String, shouting: Bool) {
var message = &amp;quot;\(message), \(recipient)!&amp;quot;
if shouting {
    message = message.uppercased()
}
    print(message)
}
sendMessage(&amp;quot;See you at the Bash&amp;quot;, to: &amp;quot;Morgan&amp;quot;, shouting: false)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Parameters-with-Default-Values&quot;&gt;&lt;a href=&quot;#Parameters-with-Default-Values&quot; class=&quot;headerlink&quot; title=&quot;Parameters with Default Values&quot;&gt;&lt;/a&gt;Parameters with Default Values&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func sendMessage(_ message: String, to recipient: String, shouting: Bool = false) {
var message = &amp;quot;\(message), \(recipient)!&amp;quot;
if shouting {
    message = message.uppercased()
}
    print(message)
}
sendMessage(&amp;quot;See you at the Bash&amp;quot;, to: &amp;quot;Morgan&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Returning-Optional-Values&quot;&gt;&lt;a href=&quot;#Returning-Optional-Values&quot; class=&quot;headerlink&quot; title=&quot;Returning Optional Values&quot;&gt;&lt;/a&gt;Returning Optional Values&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func firstString(havingPrefix prefix: String, in strings: [String]) -&amp;gt; String? {
for string in strings {
if string.hasPrefix(prefix) {
return string
}
}
return nil
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用if-let，当使用optional value时&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var guests = [&amp;quot;Jack&amp;quot;, &amp;quot;Kumar&amp;quot;, &amp;quot;Anita&amp;quot;, &amp;quot;Anna&amp;quot;]
if let guest = firstString(havingPrefix: &amp;quot;A&amp;quot;, in: guests) {
print(&amp;quot;See you at the party, \(guest)!&amp;quot;)
} else {
print(&amp;quot;Invite must be in the mail.&amp;quot;)
}

//See you at the party, Anita!
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Closure&quot;&gt;&lt;a href=&quot;#Closure&quot; class=&quot;headerlink&quot; title=&quot;Closure&quot;&gt;&lt;/a&gt;Closure&lt;/h1&gt;&lt;h2 id=&quot;Functions-as-Parameters&quot;&gt;&lt;a href=&quot;#Functions-as-Parameters&quot; class=&quot;headerlink&quot; title=&quot;Functions as Parameters&quot;&gt;&lt;/a&gt;Functions as Parameters&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func filterInts(_ numbers: [Int], _ includeNumber: (Int) -&amp;gt; Bool) -&amp;gt; [Int] {
var result: [Int] = []
for number in numbers {
if includeNumber(number) {
    result.append(number)
}
}
    return result
}

let numbers = [4, 17, 34, 41, 82]

func divisibleByTwo(_ number: Int) -&amp;gt; Bool {
    return number % 2 == 0
}
let evenNumbers = filterInts(numbers, divisibleByTwo)

//let evenNumbers = filterInts([4, 17, 34, 41, 82], divisibleByTwo)


print(evenNumbers)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Implicit-Arguments-in-Closures&quot;&gt;&lt;a href=&quot;#Implicit-Arguments-in-Closures&quot; class=&quot;headerlink&quot; title=&quot;Implicit Arguments in Closures&quot;&gt;&lt;/a&gt;Implicit Arguments in Closures&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func filterInts(_ numbers: [Int], _ includeNumber: (Int) -&amp;gt; Bool) -&amp;gt; [Int] {…}
let evenNumbers = filterInts(numbers, { $0 % 2 == 0 })
print(evenNumbers)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Trailing-Closures&quot;&gt;&lt;a href=&quot;#Trailing-Closures&quot; class=&quot;headerlink&quot; title=&quot;Trailing Closures&quot;&gt;&lt;/a&gt;Trailing Closures&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func filterInts(_ numbers: [Int], _ includeNumber: (Int) -&amp;gt; Bool) -&amp;gt; [Int] {…}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;方式1.如果传递的闭包是最后一个参数，可以将其大括号移除到小括号后面方便阅读. $0代表第一个参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let evenNumbers = filterInts(numbers) { $0 % 2 == 0 }
print(evenNumbers)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;方式2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let evenNumbers = filterInts(numbers) { (firstItem) -&amp;gt; Bool in
    return firstItem % 2==0
}
print(evenNumbers)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果闭包是唯一参数，可以将前面的小括号移除&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let names = [&amp;quot;Lily&amp;quot;, &amp;quot;Santiago&amp;quot;, &amp;quot;Aadya&amp;quot;, &amp;quot;Jack&amp;quot;, &amp;quot;Anna&amp;quot;, &amp;quot;Andrés&amp;quot;]
let shortNames = names.filter { name in name.characters.count &amp;lt; 5 }
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Filter-and-Map-Methods&quot;&gt;&lt;a href=&quot;#Filter-and-Map-Methods&quot; class=&quot;headerlink&quot; title=&quot;Filter and Map Methods&quot;&gt;&lt;/a&gt;Filter and Map Methods&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let names = [&amp;quot;Lily&amp;quot;, &amp;quot;Santiago&amp;quot;, &amp;quot;Aadya&amp;quot;, &amp;quot;Jack&amp;quot;, &amp;quot;Anna&amp;quot;, &amp;quot;Andrés&amp;quot;]

let capitalizedShortNames = names.filter { name in name.characters.count &amp;lt; 5 }
    .map { name in name.uppercased() }

print(capitalizedShortNames)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Generic&quot;&gt;&lt;a href=&quot;#Generic&quot; class=&quot;headerlink&quot; title=&quot;Generic&quot;&gt;&lt;/a&gt;Generic&lt;/h1&gt;&lt;h2 id=&quot;Calling-Generic-Functions&quot;&gt;&lt;a href=&quot;#Calling-Generic-Functions&quot; class=&quot;headerlink&quot; title=&quot;Calling Generic Functions&quot;&gt;&lt;/a&gt;Calling Generic Functions&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let numbers = [24,45,65,76,84,200,4]
let names = [&amp;quot;Lily&amp;quot;, &amp;quot;Santiago&amp;quot;, &amp;quot;Aadya&amp;quot;, &amp;quot;Jack&amp;quot;, &amp;quot;Anna&amp;quot;, &amp;quot;Andrés&amp;quot;]

func filter&amp;lt;Element&amp;gt;(_ source: [Element], _ includeElement: (Element) -&amp;gt; Bool) -&amp;gt; [Element] {
    var result: [Element] = []
    for element in source {
        if includeElement(element) {
            result.append(element)
        }
    }
    return result
}

let evenNumbers = filter(numbers) { $0 % 2 == 0 }
let shortNames = filter(names) { name in name.characters.count &amp;lt; 5 }

print(evenNumbers)
print(shortNames)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Generic-Types&quot;&gt;&lt;a href=&quot;#Generic-Types&quot; class=&quot;headerlink&quot; title=&quot;Generic Types&quot;&gt;&lt;/a&gt;Generic Types&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;struct NamedArray&amp;lt;Element&amp;gt; {
    var name: String
    var items: [Element]
}

let boardGames: NamedArray&amp;lt;String&amp;gt; = NamedArray(name: &amp;quot;Board Games&amp;quot;, items: [&amp;quot;Chess&amp;quot;, &amp;quot;Go&amp;quot;])
let primes: NamedArray&amp;lt;Int&amp;gt; = NamedArray(name: &amp;quot;Primes&amp;quot;, items: [1, 3, 5, 7, 13])

//Infer types
//let boardGames: NamedArray = NamedArray(name: &amp;quot;Board Games&amp;quot;, items: [&amp;quot;Chess&amp;quot;, &amp;quot;Go&amp;quot;])
//let primes: NamedArray = NamedArray(name: &amp;quot;Primes&amp;quot;, items: [1, 3, 5, 7, 13])

print(boardGames)
print(primes)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Structures&quot;&gt;&lt;a href=&quot;#Structures&quot; class=&quot;headerlink&quot; title=&quot;Structures&quot;&gt;&lt;/a&gt;Structures&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;struct Rectangle {
    var width = 12
    var height = 10
}

var rectangle = Rectangle()
rectangle.height = 4


struct Rectangle {
var width: Int
var height: Int
}
var rectangle = Rectangle(width: 4, height: 5)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Computed-Properties&quot;&gt;&lt;a href=&quot;#Computed-Properties&quot; class=&quot;headerlink&quot; title=&quot;Computed Properties&quot;&gt;&lt;/a&gt;Computed Properties&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;struct Rectangle {
    var width: Int
    var height: Int
    var area: Int {
        return width * height
    }
}
let rectangle = Rectangle(width: 4, height: 5)
print(&amp;quot;Width is \(rectangle.width) and area is \(rectangle.area).&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Methods&quot;&gt;&lt;a href=&quot;#Methods&quot; class=&quot;headerlink&quot; title=&quot;Methods&quot;&gt;&lt;/a&gt;Methods&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;struct Rectangle {
    var width: Int
    var height: Int
    func fitsInside(_ other: Rectangle) -&amp;gt; Bool {
        return (width &amp;lt; other.width) &amp;amp;&amp;amp; (height &amp;lt; other.height)
    }
}
let small = Rectangle(width: 1, height: 2)
let large = Rectangle(width: 5, height: 5)

print(small.fitsInside(large)) // Returns true
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Initializers&quot;&gt;&lt;a href=&quot;#Initializers&quot; class=&quot;headerlink&quot; title=&quot;Initializers&quot;&gt;&lt;/a&gt;Initializers&lt;/h2&gt;&lt;p&gt;自动生成init method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct Rectangle {
    var width: Int
    var height: Int
}

var rectangl = Rectangle(width: 4, height: 5)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以自己明确的写一个init method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct Rectangle {
    var width: Int
    var height: Int

    init(width: Int, height: Int) {
        self.width = width
        self.height = height
    }
}
var rectangle = Rectangle(width: 4, height: 5)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Classes&quot;&gt;&lt;a href=&quot;#Classes&quot; class=&quot;headerlink&quot; title=&quot;Classes&quot;&gt;&lt;/a&gt;Classes&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;class ScoreLogFile {
    var highScores: [Score]
    func record(score: Score, for player: Player) -&amp;gt; Void {…}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Subclasses-Can-Add-Functionality&quot;&gt;&lt;a href=&quot;#Subclasses-Can-Add-Functionality&quot; class=&quot;headerlink&quot; title=&quot;Subclasses Can Add Functionality&quot;&gt;&lt;/a&gt;Subclasses Can Add Functionality&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Fish {
    func swim() {
        print(&amp;quot;I&amp;apos;m swimming.&amp;quot;)
    }
}

class FlyingFish: Fish {
    func fly() {
        print(&amp;quot;Flying throught the air!&amp;quot;)
    }
    // Inherits swim() with no changes.
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Subclasses-Can-Override-Functionality&quot;&gt;&lt;a href=&quot;#Subclasses-Can-Override-Functionality&quot; class=&quot;headerlink&quot; title=&quot;Subclasses Can Override Functionality&quot;&gt;&lt;/a&gt;Subclasses Can Override Functionality&lt;/h2&gt;&lt;p&gt;需要加上override字符，否则会报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Fish {
    func swim() {
        print(&amp;quot;I&amp;apos;m swimming.&amp;quot;)
    }
}

class ComplainingFish: Fish {
   override func swim() {
        print(&amp;quot;Grumble grumble grumble...&amp;quot;)
        //super.swim()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Subclass-Initializers&quot;&gt;&lt;a href=&quot;#Subclass-Initializers&quot; class=&quot;headerlink&quot; title=&quot;Subclass Initializers&quot;&gt;&lt;/a&gt;Subclass Initializers&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Fish {
    var name: String
    init(name: String) {
        self.name = name
    }
}

class ComplainingFish: Fish {
    var complaint: String
    init(name: String, complaint: String) {
        self.complaint = complaint
        super.init(name: name)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Class-vs-Structure&quot;&gt;&lt;a href=&quot;#Class-vs-Structure&quot; class=&quot;headerlink&quot; title=&quot;Class vs. Structure&quot;&gt;&lt;/a&gt;Class vs. Structure&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;可以复制，不相互影响的object，采用structure。例如两个球员，他们各自的比分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以方便被多处访问的同一个object,采用class。例如比赛记分册，需要被多个球员同时访问。一旦更新，大家都能看见&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要被继承的，采用Class&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/gmaj0jp2hge5547/2016092001.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Enumerations&quot;&gt;&lt;a href=&quot;#Enumerations&quot; class=&quot;headerlink&quot; title=&quot;Enumerations&quot;&gt;&lt;/a&gt;Enumerations&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;enum Alignment {
    case left, right, center
}

let textAlignment = Alignment.left
switch textAlignment {
case .left:
    print(&amp;quot;Lean to the left&amp;quot;)
case .right:
    print(&amp;quot;Lean to the right&amp;quot;)
case .center:
    print(&amp;quot;Stand up straight&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Enumerations-with-Associated-Values&quot;&gt;&lt;a href=&quot;#Enumerations-with-Associated-Values&quot; class=&quot;headerlink&quot; title=&quot;Enumerations with Associated Values&quot;&gt;&lt;/a&gt;Enumerations with Associated Values&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;enum Alignment {

    case left(padding: Double), right(padding: Double), center
}

let textAlignment = Alignment.left(padding: 42.7)

switch textAlignment {

case .left(let padding):
    print(&amp;quot;Left with \(padding) pixels of padding&amp;quot;)

default:
    print(&amp;quot;this is default&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Enumerations-with-Raw-Values&quot;&gt;&lt;a href=&quot;#Enumerations-with-Raw-Values&quot; class=&quot;headerlink&quot; title=&quot;Enumerations with Raw Values&quot;&gt;&lt;/a&gt;Enumerations with Raw Values&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;enum ServerAddress: String {
    case staging = &amp;quot;https://staging.example.com&amp;quot;
    case production = &amp;quot;https://example.com&amp;quot;
}

func findPhotos(matchingQuery query: String, from server: ServerAddress) {
    let serverAddress = server.rawValue
    …
}

findPhotos(matchingQuery: &amp;quot;strawberry&amp;quot;, from: .staging)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Protocols-amp-Extension&quot;&gt;&lt;a href=&quot;#Protocols-amp-Extension&quot; class=&quot;headerlink&quot; title=&quot;Protocols &amp;amp; Extension&quot;&gt;&lt;/a&gt;Protocols &amp;amp; Extension&lt;/h1&gt;&lt;h2 id=&quot;Protocols&quot;&gt;&lt;a href=&quot;#Protocols&quot; class=&quot;headerlink&quot; title=&quot;Protocols&quot;&gt;&lt;/a&gt;Protocols&lt;/h2&gt;&lt;p&gt;protocol is like blueprint ,like interface or abstract classes&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;protocol Player {
    func takeTurn(on board: Board)
}
struct HumanPlayer: Player {
    func takeTurn(on board: Board) { /* Show move UI and wait */ }
}
struct ComputerPlayer: Player {
    func takeTurn(on board: Board) { /* Pick the best legal move using AI */ }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Extensions-for-additional-functionality&quot;&gt;&lt;a href=&quot;#Extensions-for-additional-functionality&quot; class=&quot;headerlink&quot; title=&quot;Extensions for additional functionality&quot;&gt;&lt;/a&gt;Extensions for additional functionality&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;struct Rectangle {
    var width: Int
    var height: Int
}

extension Rectangle {
    func fitsInside(_ other: Rectangle) -&amp;gt; Bool {…}
    var area {…}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Protocols-Extensions&quot;&gt;&lt;a href=&quot;#Protocols-Extensions&quot; class=&quot;headerlink&quot; title=&quot;Protocols + Extensions&quot;&gt;&lt;/a&gt;Protocols + Extensions&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;struct HumanPlayer: Player {…}
extension HumanPlayer: CustomStringConvertible {
    var description: String {
        return &amp;quot;Human player \(name) has a score of \(score)&amp;quot;
    }
}
let player = HumanPlayer(name: &amp;quot;Lynn&amp;quot;, score: 0)
print(player)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Error-Handling&quot;&gt;&lt;a href=&quot;#Error-Handling&quot; class=&quot;headerlink&quot; title=&quot;Error Handling&quot;&gt;&lt;/a&gt;Error Handling&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;enum SomeError: ErrorProtocol {
    case somethingWentWrong, somethingFailed
}
func doSomething() throws -&amp;gt; Data {
    progressBar.visible = true
    defer { progressBar.visible = false }
    let data: Data?
    do {
        data = try somethingThatMightFail()
    } catch SomeError.somethingWentWrong {
        data = nil
    }
    guard let result = summarize(data) else { throw SomeError.somethingFailed }
    return result
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Constants&quot;&gt;&lt;a href=&quot;#Constants&quot; class=&quot;headerlink&quot; title=&quot;Constants&quot;&gt;&lt;/a&gt;Constants&lt;/h1&gt;&lt;p&gt;常量为let,变量为var&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let language:
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
      <category term="WWDC" scheme="http://jackliu17.github.io/tags/WWDC/"/>
    
  </entry>
  
  <entry>
    <title>WWDC2016学习笔记-Introduction_to_Xcode</title>
    <link href="http://jackliu17.github.io/2016/09/19/WWDC2016%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction-to-Xcode/"/>
    <id>http://jackliu17.github.io/2016/09/19/WWDC2016学习笔记-Introduction-to-Xcode/</id>
    <published>2016-09-19T06:12:14.000Z</published>
    <updated>2016-09-19T08:18:10.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Four-scheme-actions&quot;&gt;&lt;a href=&quot;#Four-scheme-actions&quot; class=&quot;headerlink&quot; title=&quot;Four scheme actions&quot;&gt;&lt;/a&gt;Four scheme actions&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/hateetfoio6862m/2016091901.png?dl=1&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run will run my app in the debugger.&lt;/li&gt;
&lt;li&gt;Test will run my tests.&lt;/li&gt;
&lt;li&gt;Profile will run my app in instruments so I can measure its performance.&lt;/li&gt;
&lt;li&gt;Analyze will run Xcode’s static analyzer and help catch problems I might otherwise have missed&lt;/li&gt;
&lt;li&gt;Archive action will build my app for release.This command will become enabled in this menu once I select a device as my run destination.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;查看不同设备屏幕的Storyboard-scene&quot;&gt;&lt;a href=&quot;#查看不同设备屏幕的Storyboard-scene&quot; class=&quot;headerlink&quot; title=&quot;查看不同设备屏幕的Storyboard scene&quot;&gt;&lt;/a&gt;查看不同设备屏幕的Storyboard scene&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ul3z7a59tu6g11f/2016091903.png?dl=1&quot; alt=&quot;3&quot;&gt; &lt;/p&gt;
&lt;h1 id=&quot;Method-classify&quot;&gt;&lt;a href=&quot;#Method-classify&quot; class=&quot;headerlink&quot; title=&quot;Method classify&quot;&gt;&lt;/a&gt;Method classify&lt;/h1&gt;&lt;p&gt;使用TODO or MARK 使方法归类。直接输入可自动弹出搜索框&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/i7s4sjdhkccrs8g/2016091904.png?dl=1&quot; alt=&quot;4&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ke27rzjhnqujrtr/2016091907.png?dl=1&quot; alt=&quot;7&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import Foundation

// TODO: Call Hero

let myHero = &amp;quot;Mother&amp;quot;

func callHero(){

    print (myHero)

}


// MARK: Call Father

func callMather(){

    print (myHero)

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;PO-Command-in-console&quot;&gt;&lt;a href=&quot;#PO-Command-in-console&quot; class=&quot;headerlink&quot; title=&quot;PO Command in console&quot;&gt;&lt;/a&gt;PO Command in console&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/etru1yruuwqk10s/2016091905.png?dl=1&quot; alt=&quot;5&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Search-shortcut-key&quot;&gt;&lt;a href=&quot;#Search-shortcut-key&quot; class=&quot;headerlink&quot; title=&quot;Search shortcut key&quot;&gt;&lt;/a&gt;Search shortcut key&lt;/h1&gt;&lt;p&gt;shift + command + O&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/agc216ypg07sbwj/2016091902.png?dl=1&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/5gld03t9bs8k5wt/2016091906.png?dl=1&quot; alt=&quot;6&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Option-or-Command-click&quot;&gt;&lt;a href=&quot;#Option-or-Command-click&quot; class=&quot;headerlink&quot; title=&quot;Option or Command + click&quot;&gt;&lt;/a&gt;Option or Command + click&lt;/h1&gt;&lt;p&gt;查看某方法或对象的详情&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/p9n8z2j56u8es79/2016091908.png?dl=1&quot; alt=&quot;8&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Project-amp-Target&quot;&gt;&lt;a href=&quot;#Project-amp-Target&quot; class=&quot;headerlink&quot; title=&quot;Project &amp;amp; Target&quot;&gt;&lt;/a&gt;Project &amp;amp; Target&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/g0ispuasi6giib1/2016091909.png?dl=1&quot; alt=&quot;9&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Project&quot;&gt;&lt;a href=&quot;#Project&quot; class=&quot;headerlink&quot; title=&quot;Project&quot;&gt;&lt;/a&gt;Project&lt;/h2&gt;&lt;p&gt;A project is a document that you use to organize your code an resources in Xcode. &lt;/p&gt;
&lt;h2 id=&quot;project-settings&quot;&gt;&lt;a href=&quot;#project-settings&quot; class=&quot;headerlink&quot; title=&quot;project settings&quot;&gt;&lt;/a&gt;project settings&lt;/h2&gt;&lt;p&gt;deployment target is the minimum OS version that your app can run on and support. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/3zaixggkmde6757/2016091910.png?dl=1&quot; alt=&quot;10&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Target&quot;&gt;&lt;a href=&quot;#Target&quot; class=&quot;headerlink&quot; title=&quot;Target&quot;&gt;&lt;/a&gt;Target&lt;/h2&gt;&lt;p&gt;targets which actually build those files into products like your app&lt;/p&gt;
&lt;p&gt;A target contains the instructions to build one thing like an app or a framework.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/rem9glphbydrlfd/2016091911.png?dl=1&quot; alt=&quot;11&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Build-phases&quot;&gt;&lt;a href=&quot;#Build-phases&quot; class=&quot;headerlink&quot; title=&quot;Build phases&quot;&gt;&lt;/a&gt;Build phases&lt;/h2&gt;&lt;p&gt;The thing that your target produces is called its product. The set of steps that your target takes to build its product are called build phases.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/m9b90l0rols1kdi/2016091912.png?dl=1&quot; alt=&quot;12&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Build-Setting-for-project-amp-target&quot;&gt;&lt;a href=&quot;#Build-Setting-for-project-amp-target&quot; class=&quot;headerlink&quot; title=&quot;Build Setting for project &amp;amp; target&quot;&gt;&lt;/a&gt;Build Setting for project &amp;amp; target&lt;/h2&gt;&lt;p&gt;Build settings which configure how your targets build their products, schemes which configure how you perform actions, such as Run, with your targets. &lt;/p&gt;
&lt;p&gt;Both projects and targets have Build settings, and targets inherit the value set at the project level but can override them with a target-specific value.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/zfzt51tr27ues0l/2016091913.png?dl=1&quot; alt=&quot;13&quot;&gt;&lt;/p&gt;
&lt;p&gt;A Build setting contains a name and a value of some aspect that controls some aspect of the build process. &lt;/p&gt;
&lt;p&gt;For example, there are Build settings for specifying which architectures you want to build, whether your code is optimized, what your product is named, and even how you deal with warnings. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/novtmh5kzyp6mqw/2016091916.png?dl=1&quot; alt=&quot;16&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now, Build settings can also vary by what’s called a build configuration, and by default, a project has a debug and a release configuration. For example, when you’re building for debug, you probably don’t want your code to be optimized, but when you’re building for release, you do want your code to be optimized.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/v6i6eqoks9w784s/2016091917.png?dl=1&quot; alt=&quot;17&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Target’s-build-phases&quot;&gt;&lt;a href=&quot;#Target’s-build-phases&quot; class=&quot;headerlink&quot; title=&quot;Target’s build phases&quot;&gt;&lt;/a&gt;Target’s build phases&lt;/h2&gt;&lt;p&gt;A target’s build phases do things like cause dependencies to build first, compile the source files in that target, and link the target against libraries and frameworks.&lt;/p&gt;
&lt;p&gt;You can also add what’s called a run script build phase to configure other aspects of the build that you’d like. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/8mhu1l1mg676b30/2016091914.png?dl=1&quot; alt=&quot;14&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Capabilities&quot;&gt;&lt;a href=&quot;#Capabilities&quot; class=&quot;headerlink&quot; title=&quot;Capabilities&quot;&gt;&lt;/a&gt;Capabilities&lt;/h2&gt;&lt;p&gt;Capabilities, which allows you to easily turn on specific features.&lt;/p&gt;
&lt;p&gt;For example, for iOS, there are capabilities for enabling in-app purchases and Apple Maps integration&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/nrryd26rfql0wkn/2016091918.png?dl=1&quot; alt=&quot;18&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Workspaces&quot;&gt;&lt;a href=&quot;#Workspaces&quot; class=&quot;headerlink&quot; title=&quot;Workspaces&quot;&gt;&lt;/a&gt;Workspaces&lt;/h1&gt;&lt;p&gt;Two projects that share the same framework and you like to work on them together.&lt;/p&gt;
&lt;p&gt;In this situation, you can create an Xcode workspace that references your projects. So when you open your workspace in Xcode, &lt;/p&gt;
&lt;p&gt;it’ll contain all of the contents of the projects that you’ve referenced, which makes it easy to edit and navigate across them &lt;/p&gt;
&lt;p&gt;as related code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/c4ki5is4pwvicip/2016091919.png?dl=1&quot; alt=&quot;19&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;有待进一步学习的地方&quot;&gt;&lt;a href=&quot;#有待进一步学习的地方&quot; class=&quot;headerlink&quot; title=&quot;有待进一步学习的地方&quot;&gt;&lt;/a&gt;有待进一步学习的地方&lt;/h1&gt;&lt;p&gt;Review &amp;amp; Commit&lt;/p&gt;
&lt;p&gt;Edit Scheme&lt;/p&gt;
&lt;p&gt;Test&lt;/p&gt;
&lt;p&gt;Debug&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Four-scheme-actions&quot;&gt;&lt;a href=&quot;#Four-scheme-actions&quot; class=&quot;headerlink&quot; title=&quot;Four scheme actions&quot;&gt;&lt;/a&gt;Four scheme actions&lt;/h1&gt;&lt;p&gt;&lt;i
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="Xcode" scheme="http://jackliu17.github.io/tags/Xcode/"/>
    
      <category term="WWDC" scheme="http://jackliu17.github.io/tags/WWDC/"/>
    
  </entry>
  
  <entry>
    <title>TableView with searchBr视图的构建</title>
    <link href="http://jackliu17.github.io/2016/09/07/TableView%20with%20searchBr%E8%A7%86%E5%9B%BE%E7%9A%84%E6%9E%84%E5%BB%BA/"/>
    <id>http://jackliu17.github.io/2016/09/07/TableView with searchBr视图的构建/</id>
    <published>2016-09-07T01:21:42.000Z</published>
    <updated>2016-09-21T07:51:06.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Table-View&quot;&gt;&lt;a href=&quot;#Table-View&quot; class=&quot;headerlink&quot; title=&quot;Table View&quot;&gt;&lt;/a&gt;Table View&lt;/h1&gt;&lt;h2 id=&quot;TableView-创建&quot;&gt;&lt;a href=&quot;#TableView-创建&quot; class=&quot;headerlink&quot; title=&quot;TableView 创建&quot;&gt;&lt;/a&gt;TableView 创建&lt;/h2&gt;&lt;p&gt;在视图中拖入一个tableView,并设置约束&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/816psmm80wngd9o/2016091201.png?dl=1&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;TableView的行高&quot;&gt;&lt;a href=&quot;#TableView的行高&quot; class=&quot;headerlink&quot; title=&quot;TableView的行高&quot;&gt;&lt;/a&gt;TableView的行高&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/1gr7l5mac02az42/2016091203.png?dl=1&quot; alt=&quot;3&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;TableView的代理&quot;&gt;&lt;a href=&quot;#TableView的代理&quot; class=&quot;headerlink&quot; title=&quot;TableView的代理&quot;&gt;&lt;/a&gt;TableView的代理&lt;/h2&gt;&lt;p&gt;ctrl drag tableView to the controller&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ayu3maiwfsghw87/2016091204.png?dl=1&quot; alt=&quot;4&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;TableView-IBOutlet-in-controller&quot;&gt;&lt;a href=&quot;#TableView-IBOutlet-in-controller&quot; class=&quot;headerlink&quot; title=&quot;TableView IBOutlet in controller&quot;&gt;&lt;/a&gt;TableView IBOutlet in controller&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/co4pzk3rpvkw894/2016091210.png?dl=1&quot; alt=&quot;10&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ViewController-conforms-to-protocol&quot;&gt;&lt;a href=&quot;#ViewController-conforms-to-protocol&quot; class=&quot;headerlink&quot; title=&quot;ViewController conforms to protocol&quot;&gt;&lt;/a&gt;ViewController conforms to protocol&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/w5qzdx3ul0l7p9e/2016091211.png?dl=1&quot; alt=&quot;11&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Table-view-cell&quot;&gt;&lt;a href=&quot;#Table-view-cell&quot; class=&quot;headerlink&quot; title=&quot;Table view cell&quot;&gt;&lt;/a&gt;Table view cell&lt;/h1&gt;&lt;h2 id=&quot;TableView中设置cell&quot;&gt;&lt;a href=&quot;#TableView中设置cell&quot; class=&quot;headerlink&quot; title=&quot;TableView中设置cell&quot;&gt;&lt;/a&gt;TableView中设置cell&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/2mhplzoreycp3hn/2016091202.png?dl=1&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;TableViewCell-ID&quot;&gt;&lt;a href=&quot;#TableViewCell-ID&quot; class=&quot;headerlink&quot; title=&quot;TableViewCell ID&quot;&gt;&lt;/a&gt;TableViewCell ID&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/9zhlhcqifo64m0y/2016091205.png?dl=1&quot; alt=&quot;5&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;TableViewCell-custom-class&quot;&gt;&lt;a href=&quot;#TableViewCell-custom-class&quot; class=&quot;headerlink&quot; title=&quot;TableViewCell custom class&quot;&gt;&lt;/a&gt;TableViewCell custom class&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/sn53qqj3j38diib/2016091209.png?dl=1&quot; alt=&quot;9&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;TableViewCell取消分割线&quot;&gt;&lt;a href=&quot;#TableViewCell取消分割线&quot; class=&quot;headerlink&quot; title=&quot;TableViewCell取消分割线&quot;&gt;&lt;/a&gt;TableViewCell取消分割线&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/7tdn4oxn6jptqeg/2016091212.png?dl=1&quot; alt=&quot;12&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;采用UIView作为分割线&quot;&gt;&lt;a href=&quot;#采用UIView作为分割线&quot; class=&quot;headerlink&quot; title=&quot;采用UIView作为分割线&quot;&gt;&lt;/a&gt;采用UIView作为分割线&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/33hjj0qf66a1csq/2016091213.png?dl=1&quot; alt=&quot;13&quot;&gt;&lt;/p&gt;
&lt;p&gt;黑色，透明度2%&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/gdvn98bqwqb2w2g/2016091214.png?dl=1&quot; alt=&quot;14&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;UIStoryBoard中的Constraints&quot;&gt;&lt;a href=&quot;#UIStoryBoard中的Constraints&quot; class=&quot;headerlink&quot; title=&quot;UIStoryBoard中的Constraints&quot;&gt;&lt;/a&gt;UIStoryBoard中的Constraints&lt;/h1&gt;&lt;p&gt;两者顶部对齐&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/o3yxuzsv4t40sly/2016091206.png?dl=1&quot; alt=&quot;6&quot;&gt;&lt;/p&gt;
&lt;p&gt;两者底部对齐&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/nl3h820ypcielce/2016091207.png?dl=1&quot; alt=&quot;7&quot;&gt;&lt;/p&gt;
&lt;p&gt;两者中线对齐&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/1ocfn5c0u4l9m8y/2016091208.png?dl=1&quot; alt=&quot;8&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;View中的元素&quot;&gt;&lt;a href=&quot;#View中的元素&quot; class=&quot;headerlink&quot; title=&quot;View中的元素&quot;&gt;&lt;/a&gt;View中的元素&lt;/h1&gt;&lt;h2 id=&quot;Lable内文字可以自动换行&quot;&gt;&lt;a href=&quot;#Lable内文字可以自动换行&quot; class=&quot;headerlink&quot; title=&quot;Lable内文字可以自动换行&quot;&gt;&lt;/a&gt;Lable内文字可以自动换行&lt;/h2&gt;&lt;p&gt;设为0&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/7l8215vih3w5zw6/2016091215.png?dl=1&quot; alt=&quot;15&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ImageView设为AspectFit&quot;&gt;&lt;a href=&quot;#ImageView设为AspectFit&quot; class=&quot;headerlink&quot; title=&quot;ImageView设为AspectFit&quot;&gt;&lt;/a&gt;ImageView设为AspectFit&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/m9tgd7woh0qbdsf/2016091216.png?dl=1&quot; alt=&quot;16&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Search-View&quot;&gt;&lt;a href=&quot;#Search-View&quot; class=&quot;headerlink&quot; title=&quot;Search View&quot;&gt;&lt;/a&gt;Search View&lt;/h1&gt;&lt;h2 id=&quot;主视图中添加导航栏视图&quot;&gt;&lt;a href=&quot;#主视图中添加导航栏视图&quot; class=&quot;headerlink&quot; title=&quot;主视图中添加导航栏视图&quot;&gt;&lt;/a&gt;主视图中添加导航栏视图&lt;/h2&gt;&lt;p&gt;创建一个高度为64的导航栏视图，并将其底部与table view顶部相连接&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/5pxhv35sqp1i979/2016091402.png?dl=1&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/7vpj5w66dpc464a/2016091403.png?dl=1&quot; alt=&quot;3&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/79zvuo5j4oixf0z/2016091406.png?dl=1&quot; alt=&quot;6&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;导航栏内嵌UIView-for-searchBar&quot;&gt;&lt;a href=&quot;#导航栏内嵌UIView-for-searchBar&quot; class=&quot;headerlink&quot; title=&quot;导航栏内嵌UIView for searchBar&quot;&gt;&lt;/a&gt;导航栏内嵌UIView for searchBar&lt;/h2&gt;&lt;p&gt;在导航栏中内嵌一个UIView 高度为44，透明&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/5cjfu4g007l72hq/2016091407.png?dl=1&quot; alt=&quot;7&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/nfsf4tfive1u0e6/2016091408.png?dl=1&quot; alt=&quot;8&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/tog01z4o4zr458c/2016091409.png?dl=1&quot; alt=&quot;9&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;搜索结果界面创建&quot;&gt;&lt;a href=&quot;#搜索结果界面创建&quot; class=&quot;headerlink&quot; title=&quot;搜索结果界面创建&quot;&gt;&lt;/a&gt;搜索结果界面创建&lt;/h2&gt;&lt;p&gt;在storyboard中复制一个view controller scene 为search controller scene&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/eg23hrkhohgqv7k/2016091401.png?dl=1&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;搜索结果界面的导航栏和主视图的一致，内嵌view for searchbar, 不需要cell&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/p2gr5uw6mrlrrxr/2016091410.png?dl=1&quot; alt=&quot;10&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/4ub3sd8064j57tz/2016091412.png?dl=1&quot; alt=&quot;12&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;custom-class-和-storyboard-ID&quot;&gt;&lt;a href=&quot;#custom-class-和-storyboard-ID&quot; class=&quot;headerlink&quot; title=&quot;custom class 和 storyboard ID&quot;&gt;&lt;/a&gt;custom class 和 storyboard ID&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/hl4qxhc0tsyp8sb/2016091413.png?dl=1&quot; alt=&quot;13&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Table-View&quot;&gt;&lt;a href=&quot;#Table-View&quot; 
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="Xcode" scheme="http://jackliu17.github.io/tags/Xcode/"/>
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>CodePractice</title>
    <link href="http://jackliu17.github.io/2016/09/02/CodePractice/"/>
    <id>http://jackliu17.github.io/2016/09/02/CodePractice/</id>
    <published>2016-09-02T03:00:36.000Z</published>
    <updated>2016-09-03T02:35:42.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;h2 id=&quot;将数组中的最后一个字符合并&quot;&gt;&lt;a href=&quot;#将数组中的最后一个字符合并&quot; class=&quot;headerlink&quot; title=&quot;将数组中的最后一个字符合并&quot;&gt;&lt;/a&gt;将数组中的最后一个字符合并&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var nonsenseArray = [&amp;quot;bungalow&amp;quot;, &amp;quot;buffalo&amp;quot;, &amp;quot;indigo&amp;quot;, &amp;quot;although&amp;quot;, &amp;quot;Ontario&amp;quot;, &amp;quot;albino&amp;quot;, &amp;quot;%$&amp;amp;#!&amp;quot;]

func combineLastCharacters(wordArray:[String]) -&amp;gt; String {

    var newWord = &amp;quot;&amp;quot;
    for var word in wordArray {
        let lastCharacter = word.removeAtIndex(word.endIndex.predecessor())
        newWord.append(lastCharacter)
    }
    return newWord
}

combineLastCharacters(nonsenseArray)

//output :&amp;quot;woohoo!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;字符串中有数字则返回true-字符则false&quot;&gt;&lt;a href=&quot;#字符串中有数字则返回true-字符则false&quot; class=&quot;headerlink&quot; title=&quot;字符串中有数字则返回true,字符则false&quot;&gt;&lt;/a&gt;字符串中有数字则返回true,字符则false&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//创建只有数字的set
let digits = NSCharacterSet.decimalDigitCharacterSet()

func digitsOnly(word: String) -&amp;gt; Bool {

    for character in word.unicodeScalars {

        if !digits.longCharacterIsMember(character.value) {
            return false
        }
    }
    return true
}

digitsOnly(&amp;quot;123&amp;quot;)  //output : true

digitsOnly(&amp;quot;12a&amp;quot;)  //output : false
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;h2 id=&quot;去除掉数组中四个字母的字符串&quot;&gt;&lt;a href=&quot;#去除掉数组中四个字母的字符串&quot; class=&quot;headerlink&quot; title=&quot;去除掉数组中四个字母的字符串&quot;&gt;&lt;/a&gt;去除掉数组中四个字母的字符串&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let dirtyWordsArray = [&amp;quot;phooey&amp;quot;, &amp;quot;darn&amp;quot;, &amp;quot;drat&amp;quot;, &amp;quot;blurgh&amp;quot;, &amp;quot;jupiters&amp;quot;, &amp;quot;argh&amp;quot;, &amp;quot;fudge&amp;quot;]

func cleanUp(dirtyArray: [String]) -&amp;gt; [String] {
    var cleanArray = [String]()
    for word in dirtyArray {
        if word.characters.count == 4 {
        } else {
            cleanArray.append(word)
        }
    }
    return cleanArray
}

cleanUp(dirtyWordsArray) //output : [&amp;quot;phooey&amp;quot;, &amp;quot;blurgh&amp;quot;, &amp;quot;jupiters&amp;quot;, &amp;quot;fudge&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;字典&quot;&gt;&lt;a href=&quot;#字典&quot; class=&quot;headerlink&quot; title=&quot;字典&quot;&gt;&lt;/a&gt;字典&lt;/h1&gt;&lt;h2 id=&quot;筛选出字典中指定value的key值数组&quot;&gt;&lt;a href=&quot;#筛选出字典中指定value的key值数组&quot; class=&quot;headerlink&quot; title=&quot;筛选出字典中指定value的key值数组&quot;&gt;&lt;/a&gt;筛选出字典中指定value的key值数组&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var movies:Dictionary&amp;lt;String,String&amp;gt; = [ &amp;quot;Boyhood&amp;quot;:&amp;quot;Richard Linklater&amp;quot;,&amp;quot;Inception&amp;quot;:&amp;quot;Christopher Nolan&amp;quot;, &amp;quot;The Hurt Locker&amp;quot;:&amp;quot;Kathryn Bigelow&amp;quot;, &amp;quot;Selma&amp;quot;:&amp;quot;Ava Du Vernay&amp;quot;, &amp;quot;Interstellar&amp;quot;:&amp;quot;Christopher Nolan&amp;quot;]

class MovieArchive {
    func filterByDirector(currentDirector:String, movies: Dictionary&amp;lt;String, String&amp;gt;) -&amp;gt; [String] {
        var filteredArray = [String]()
        for (movie, director) in movies {
            if director == currentDirector {
                filteredArray.append(movie)
            }
        }
        return filteredArray
    }
}

// Solution
var myArchive = MovieArchive()
myArchive.filterByDirector(&amp;quot;Richard Linklater&amp;quot;, movies: movies)    //output : [&amp;quot;Boyhood&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;UIView&quot;&gt;&lt;a href=&quot;#UIView&quot; class=&quot;headerlink&quot; title=&quot;UIView&quot;&gt;&lt;/a&gt;UIView&lt;/h1&gt;&lt;h2 id=&quot;Fade-Out-and-Fade-in&quot;&gt;&lt;a href=&quot;#Fade-Out-and-Fade-in&quot; class=&quot;headerlink&quot; title=&quot;Fade Out and Fade in&quot;&gt;&lt;/a&gt;Fade Out and Fade in&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;@IBAction func sunRiseAndSet(sender: AnyObject) {
       // Fade out

       UIView.animateWithDuration(1.0, delay: 0.0, options: UIViewAnimationOptions.CurveEaseIn, animations: {

           self.imageView.alpha = 0.0

           }, completion: {
               (finished: Bool) -&amp;gt; Void in

               //Once the label is completely invisible, set the text and fade it back in
               if (self.imageView.image == UIImage(named: &amp;quot;sunrise&amp;quot;)) {
                   self.imageView.image = UIImage(named:&amp;quot;sunset&amp;quot;)!
               } else {
                   self.imageView.image = UIImage(named:&amp;quot;sunrise&amp;quot;)!
               }

               // Fade in
               UIView.animateWithDuration(1.0, delay:0.0, options:UIViewAnimationOptions.CurveEaseIn, animations: {
                   self.imageView.alpha = 1.0
                   }, completion: nil)
       })
   }
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;h2 id=&quot;将数组中的最后一个字符合并&quot;&gt;&lt;a href=&quot;#将数组中的最后一个字符合并&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Asset目录下的XML文件慎用字符！</title>
    <link href="http://jackliu17.github.io/2016/08/25/asset%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84XML%E6%96%87%E4%BB%B6%E6%85%8E%E7%94%A8%E5%AD%97%E7%AC%A6%EF%BC%81/"/>
    <id>http://jackliu17.github.io/2016/08/25/asset目录下的XML文件慎用字符！/</id>
    <published>2016-08-25T11:01:14.000Z</published>
    <updated>2016-08-25T11:06:07.000Z</updated>
    
    <content type="html">&lt;p&gt;写安卓的代码真心不爽啊! Android Studio的用户体验真心不如Xcode.现在实在忍不住要吐槽一下。今天debug了一个晚上，xml的解析始终报错，网上搜索解决方案许久许久，才发现原来是xml文件中多了个 “&amp;amp;” 字符而已！你不说清楚，我咋知道咧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;写安卓的代码真心不爽啊! Android Studio的用户体验真心不如Xcode.现在实在忍不住要吐槽一下。今天debug了一个晚上，xml的解析始终报错，网上搜索解决方案许久许久，才发现原来是xml文件中多了个 “&amp;amp;” 字符而已！你不说清楚，我咋知道咧！&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="Android" scheme="http://jackliu17.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Swift进阶</title>
    <link href="http://jackliu17.github.io/2016/08/19/Swift%E8%BF%9B%E9%98%B6/"/>
    <id>http://jackliu17.github.io/2016/08/19/Swift进阶/</id>
    <published>2016-08-19T00:06:55.000Z</published>
    <updated>2016-08-19T01:22:05.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Swift与Foundation&quot;&gt;&lt;a href=&quot;#Swift与Foundation&quot; class=&quot;headerlink&quot; title=&quot;Swift与Foundation&quot;&gt;&lt;/a&gt;Swift与Foundation&lt;/h1&gt;&lt;p&gt;Swift原生类型是对Foudation更好的补充。无缝兼容 Foundation:将变量类型声明为NSXX即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var str:NSString = &amp;quot;Hello, playground&amp;quot;
str.substringWithRange(NSRange(location: 0,length: 5))

var array:NSArray = [1,2,3,4]
array.componentsJoinedByString(&amp;quot;,&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;String - NSString&lt;/li&gt;
&lt;li&gt;Int, Float, Double, Bool 以及其他与数字有关的类型 - NSNumber&lt;/li&gt;
&lt;li&gt;Array - NSArray&lt;/li&gt;
&lt;li&gt;Dictionary - NSDictionary&lt;/li&gt;
&lt;li&gt;Set – NSSet&lt;/li&gt;
&lt;li&gt;AnyObject – NSObject&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;值类型和引用类型&quot;&gt;&lt;a href=&quot;#值类型和引用类型&quot; class=&quot;headerlink&quot; title=&quot;值类型和引用类型&quot;&gt;&lt;/a&gt;值类型和引用类型&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;struct 和 enum 定义的类型是值类型，使用 class 定义的为引用类型。&lt;/li&gt;
&lt;li&gt;基本数据类型全是struct&lt;/li&gt;
&lt;li&gt;处理大量数据并且频繁增减元素时, NSMutableArray、NSMutableDictionary和NSMutableSet,其他情况 Array 、Dictionary和Set好一点&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;命名空间&quot;&gt;&lt;a href=&quot;#命名空间&quot; class=&quot;headerlink&quot; title=&quot;命名空间&quot;&gt;&lt;/a&gt;命名空间&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;一个module 代表一个命名空间&lt;/li&gt;
&lt;li&gt;主target就是一个module,创建framework和target就是新的module&lt;/li&gt;
&lt;li&gt;不同module中就算类名相同,也可以通过module名进行区分, 不再需要给类名加上各种奇怪的前缀了&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;OC与Swift互相调用&quot;&gt;&lt;a href=&quot;#OC与Swift互相调用&quot; class=&quot;headerlink&quot; title=&quot;OC与Swift互相调用&quot;&gt;&lt;/a&gt;OC与Swift互相调用&lt;/h1&gt;&lt;p&gt;OC调用Swift&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# import &amp;quot;(moduleName)-Swift.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Swift调用OC:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//动态库:
 import moduleName

//静态库:
 moduleName-Bridging-Header.h  中引入OC头文件
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;使用C指针&quot;&gt;&lt;a href=&quot;#使用C指针&quot; class=&quot;headerlink&quot; title=&quot;使用C指针&quot;&gt;&lt;/a&gt;使用C指针&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;const Type *        UnsafePointer&amp;lt;Type&amp;gt; 
Type *               UnsafeMutablePointer&amp;lt;Type&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;int，bool 和 char 的对应 类型分别是 CInt，CBool 和 CChar.内存需要自己管理&lt;/p&gt;
&lt;h1 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h1&gt;&lt;p&gt;泛型代码可以让你写出根据自我需求定义、适用于任何类型的，灵活且可重用的函数和类型。它可以让你避免重复的代码，用一种清晰和抽象的方式来表达代码的意图。&lt;br&gt;Swift 的数组和字典类型都是泛型集。 &lt;/p&gt;
&lt;h1 id=&quot;异常处理&quot;&gt;&lt;a href=&quot;#异常处理&quot; class=&quot;headerlink&quot; title=&quot;异常处理&quot;&gt;&lt;/a&gt;异常处理&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;enum Result&amp;lt;T&amp;gt; {
    case Success(T)
    case Failure(NSError)
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;ErrorType&lt;/li&gt;
&lt;li&gt;同步 API 使用异常机制: do try catch throw throws&lt;/li&gt;
&lt;li&gt;异步 API 使用泛型枚举&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;guard&quot;&gt;&lt;a href=&quot;#guard&quot; class=&quot;headerlink&quot; title=&quot;guard&quot;&gt;&lt;/a&gt;guard&lt;/h1&gt;&lt;p&gt;可以把guard近似的看做是Assert，但是你可以优雅的退出而非崩溃.guard中解包得得到值可以用于后面的代码&lt;/p&gt;
&lt;h1 id=&quot;属性观察&quot;&gt;&lt;a href=&quot;#属性观察&quot; class=&quot;headerlink&quot; title=&quot;属性观察&quot;&gt;&lt;/a&gt;属性观察&lt;/h1&gt;&lt;p&gt;willSet didSet&lt;br&gt;初始化对象并不会触发&lt;br&gt;同样可以设置 NSLayoutConstraint的constant&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@IBOutlet weak var myLabel: UILabel! {
    didSet {
        myLabel.textColor = UIColor.purpleColor()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Extensions&quot;&gt;&lt;a href=&quot;#Extensions&quot; class=&quot;headerlink&quot; title=&quot;Extensions&quot;&gt;&lt;/a&gt;Extensions&lt;/h1&gt;&lt;p&gt;扩展：就是向一个已有的类、结构体、枚举类型或者协议类型添加新功能。这包括在没有权限获取原始源代码的情况下扩展类型的能力（即逆向建模）&lt;/p&gt;
&lt;h1 id=&quot;协议扩展&quot;&gt;&lt;a href=&quot;#协议扩展&quot; class=&quot;headerlink&quot; title=&quot;协议扩展&quot;&gt;&lt;/a&gt;协议扩展&lt;/h1&gt;&lt;p&gt;在Swift2.0中，可以对协议进行属性或者方法的扩展，和扩展类与结构体类似。这让我们开启了面向协议编程的篇章。&lt;/p&gt;
&lt;h1 id=&quot;map-flatMap-filter&quot;&gt;&lt;a href=&quot;#map-flatMap-filter&quot; class=&quot;headerlink&quot; title=&quot;map flatMap filter&quot;&gt;&lt;/a&gt;map flatMap filter&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;map：得到一个由闭包里面的返回值组成的新序列&lt;/li&gt;
&lt;li&gt;flatMap：与map类似的功能,但是会过滤掉返回值里面的nil值&lt;/li&gt;
&lt;li&gt;Filter：得到一个由闭包返回值为true的值组成的新序列&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;单例&quot;&gt;&lt;a href=&quot;#单例&quot; class=&quot;headerlink&quot; title=&quot;单例&quot;&gt;&lt;/a&gt;单例&lt;/h1&gt;&lt;p&gt;单例：表示一个类在系统中只有一个实例对象。通过全局的一个入口点对这个实例对象进行访问。&lt;/p&gt;
&lt;h1 id=&quot;framework介绍&quot;&gt;&lt;a href=&quot;#framework介绍&quot; class=&quot;headerlink&quot; title=&quot;framework介绍&quot;&gt;&lt;/a&gt;framework介绍&lt;/h1&gt;&lt;p&gt;iOS 8后苹果开放了framework,也就是动态库的功能.和静态库在编译时和app代码链接并打进同一个二进制包中不同，动态库可以在运行时手动加载，这样就可以做很多事情&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;应用插件化&lt;/li&gt;
&lt;li&gt;软件版本实时模块升级&lt;/li&gt;
&lt;li&gt;共享可执行文件(仅可用于App Extension)&lt;/li&gt;
&lt;li&gt;use_frameworks! CocoaPods生成一个动态框架，其中包含了所有pods而非一个静态库 import moduleName&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Swift与Foundation&quot;&gt;&lt;a href=&quot;#Swift与Foundation&quot; class=&quot;headerlink&quot; title=&quot;Swift与Foundation&quot;&gt;&lt;/a&gt;Swift与Foundation&lt;/h1&gt;&lt;p&gt;Swift原生类型是对Fou
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>NSAttributedString使用详解</title>
    <link href="http://jackliu17.github.io/2016/08/14/NSAttributedString%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jackliu17.github.io/2016/08/14/NSAttributedString使用详解/</id>
    <published>2016-08-14T10:23:13.000Z</published>
    <updated>2016-08-14T10:43:17.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;NSAttributedString-的基本使用&quot;&gt;&lt;a href=&quot;#NSAttributedString-的基本使用&quot; class=&quot;headerlink&quot; title=&quot;NSAttributedString 的基本使用&quot;&gt;&lt;/a&gt;NSAttributedString 的基本使用&lt;/h1&gt;&lt;h2 id=&quot;处理简单的字符串&quot;&gt;&lt;a href=&quot;#处理简单的字符串&quot; class=&quot;headerlink&quot; title=&quot;处理简单的字符串&quot;&gt;&lt;/a&gt;处理简单的字符串&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;NSString *string = @&amp;quot;天道酬勤&amp;quot;;
NSMutableAttributedString *attributedString = [[NSMutableAttributedString alloc] initWithString:string];

// 设置富文本样式
[attributedString addAttribute:NSForegroundColorAttributeName
                         value:[UIColor redColor]
                         range:NSMakeRange(0, 1)];

[attributedString addAttribute:NSFontAttributeName
                         value:[UIFont systemFontOfSize:24.f]
                         range:NSMakeRange(0, 2)];

UILabel *label       = [[UILabel alloc] initWithFrame:CGRectMake(0, 100, 320, 30)];
label.attributedText = attributedString;
[self.view addSubview:label];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;处理段落样式&quot;&gt;&lt;a href=&quot;#处理段落样式&quot; class=&quot;headerlink&quot; title=&quot;处理段落样式&quot;&gt;&lt;/a&gt;处理段落样式&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;NSString *string = @&amp;quot;天道酬勤天道酬勤天道酬勤天道酬勤天道酬勤天道酬勤天道酬勤天道酬勤\n天道酬勤真不错！&amp;quot;;
NSMutableAttributedString *attributedString = [[NSMutableAttributedString alloc] initWithString:string];

// 设置富文本 - 段落样式
NSMutableParagraphStyle *style = [[NSMutableParagraphStyle alloc] init];
style.lineSpacing              = 10.f;
style.paragraphSpacing         = 20.f;

[attributedString addAttribute:NSParagraphStyleAttributeName
                         value:style
                         range:NSMakeRange(0, string.length)];

UILabel *label       = [[UILabel alloc] initWithFrame:CGRectMake(0, 100, 320, 400)];

//设置段落样式的时候，numberOfLines必须为0
label.numberOfLines  = 0;
label.attributedText = attributedString;
[self.view addSubview:label];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;NSAttributedString设置的作用域&quot;&gt;&lt;a href=&quot;#NSAttributedString设置的作用域&quot; class=&quot;headerlink&quot; title=&quot;NSAttributedString设置的作用域&quot;&gt;&lt;/a&gt;NSAttributedString设置的作用域&lt;/h2&gt;&lt;p&gt;设置富文本的时候，先设置的先显示，后设置的，如果与先设置的样式不一致，是不会覆盖的，富文本设置的效果具有先后顺序&lt;/p&gt;
&lt;h1 id=&quot;NSAtrributedString的简易封装&quot;&gt;&lt;a href=&quot;#NSAtrributedString的简易封装&quot; class=&quot;headerlink&quot; title=&quot;NSAtrributedString的简易封装&quot;&gt;&lt;/a&gt;NSAtrributedString的简易封装&lt;/h1&gt;&lt;p&gt;ViewController.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;
#import &amp;quot;NSString+AttributeStyle.h&amp;quot;
#import &amp;quot;ForeGroundColorStyle.h&amp;quot;
#import &amp;quot;FontStyle.h&amp;quot;

@interface ViewController ()

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

NSString *string = @&amp;quot;极客学院&amp;quot;;

UILabel *label       = [[UILabel alloc] initWithFrame:CGRectMake(0, 100, 320, 30)];
label.attributedText = \
    [string createAttributedStringWithStyles:\
       @[colorStyle([UIColor redColor],             NSMakeRange(0, 2)),
         fontStyle ([UIFont systemFontOfSize:20.f], NSMakeRange(1, 2))]];

[self.view addSubview:label];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;AttributedStyle.h&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;UIKit/UIKit.h&amp;gt;

@interface AttributedStyle : NSObject

@property (nonatomic, strong) NSString  *attributeName;
@property (nonatomic, strong) id         value;
@property (nonatomic)         NSRange    range;

/**
 *  便利构造器
 *
 *  @param attributeName 属性名字
 *  @param value         设置的值
 *  @param range         取值范围
 *
 *  @return 实例对象
 */
+ (AttributedStyle *)attributeName:(NSString *)attributeName value:(id)value range:(NSRange)range;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;AttributedStyle.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;AttributedStyle.h&amp;quot;

@implementation AttributedStyle

+ (AttributedStyle *)attributeName:(NSString *)attributeName value:(id)value range:(NSRange)range {

AttributedStyle *style = [[self class] new];

style.attributeName = attributeName;
style.value         = value;
style.range         = range;

return style;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;NSString + AttributeStyle.h&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;quot;AttributedStyle.h&amp;quot;

@interface NSString (AttributeStyle)

/**
 *  根据styles数组创建出富文本
 *
 *  @param styles AttributedStyle对象构成的数组
 *
 *  @return 富文本
 */
- (NSAttributedString *)createAttributedStringWithStyles:(NSArray *)styles;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;NSString + AttributeStyle.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;NSString+AttributeStyle.h&amp;quot;

@implementation NSString (AttributeStyle)

- (NSAttributedString *)createAttributedStringWithStyles:(NSArray *)styles {
if (self.length &amp;lt;= 0) {
    return nil;
}

NSMutableAttributedString *attributedString = [[NSMutableAttributedString alloc] initWithString:self];

for (int count = 0; count &amp;lt; styles.count; count++) {
    AttributedStyle *style = styles[count];

    [attributedString addAttribute:style.attributeName
                             value:style.value
                             range:style.range];
}


return attributedString;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ForeGroundColorStyle.h&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;AttributedStyle.h&amp;quot;

@interface ForeGroundColorStyle : AttributedStyle

+ (id)withColor:(UIColor *)color range:(NSRange)range;

@end

/**
 *  内联函数
 *
 *  @param color 颜色
 *  @param range 范围
 *
 *  @return 实例对象
 */
static inline AttributedStyle* colorStyle(UIColor *color, NSRange range) {
return [ForeGroundColorStyle withColor:color range:range];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ForeGroundColorStyle.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;ForeGroundColorStyle.h&amp;quot;

@implementation ForeGroundColorStyle

+ (id)withColor:(UIColor *)color range:(NSRange)range {

id style = [super attributeName:NSForegroundColorAttributeName
                          value:color
                          range:range];

return style;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;FontStyle.h&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;AttributedStyle.h&amp;quot;

@interface FontStyle : AttributedStyle

+ (id)withFont:(UIFont *)font range:(NSRange)range;

@end

/**
 *  内联函数
 *
 *  @param font  字体
 *  @param range 范围
 *
 *  @return 实例对象
 */
static inline AttributedStyle* fontStyle(UIFont *font, NSRange range) {
return [FontStyle withFont:font range:range];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;FontStyle.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;FontStyle.h&amp;quot;

@implementation FontStyle

+ (id)withFont:(UIFont *)font range:(NSRange)range {

id fontStyle = [super attributeName:NSFontAttributeName
                              value:font
                              range:range];

return fontStyle;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;使用开源代码GONMarkupPaser处理富文本-略&quot;&gt;&lt;a href=&quot;#使用开源代码GONMarkupPaser处理富文本-略&quot; class=&quot;headerlink&quot; title=&quot;使用开源代码GONMarkupPaser处理富文本 (略)&quot;&gt;&lt;/a&gt;使用开源代码GONMarkupPaser处理富文本 (略)&lt;/h1&gt;&lt;h1 id=&quot;UITextKit简介-略&quot;&gt;&lt;a href=&quot;#UITextKit简介-略&quot; class=&quot;headerlink&quot; title=&quot;UITextKit简介(略)&quot;&gt;&lt;/a&gt;UITextKit简介(略)&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;NSAttributedString-的基本使用&quot;&gt;&lt;a href=&quot;#NSAttributedString-的基本使用&quot; class=&quot;headerlink&quot; title=&quot;NSAttributedString 的基本使用&quot;&gt;&lt;/a&gt;NSAttributedSt
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_String" scheme="http://jackliu17.github.io/tags/iOS-String/"/>
    
  </entry>
  
  <entry>
    <title>使用CoreImage处理图片</title>
    <link href="http://jackliu17.github.io/2016/08/12/%E4%BD%BF%E7%94%A8CoreImage%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87/"/>
    <id>http://jackliu17.github.io/2016/08/12/使用CoreImage处理图片/</id>
    <published>2016-08-12T10:49:06.000Z</published>
    <updated>2016-08-15T06:24:06.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;CoreImage滤镜的使用&quot;&gt;&lt;a href=&quot;#CoreImage滤镜的使用&quot; class=&quot;headerlink&quot; title=&quot;CoreImage滤镜的使用&quot;&gt;&lt;/a&gt;CoreImage滤镜的使用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;CoreImage是苹果公司为了简化图片处理的难度而开发出来的类库。&lt;/li&gt;
&lt;li&gt;随着iOS版本升级以及硬件性能的不断提升，CoreImage将支持越来越多的滤镜。&lt;br&gt;大部分的滤镜都很容易使用。&lt;/li&gt;
&lt;li&gt;core image也可以支持视频&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/hg32v15woj86uai/20160812_coreImage1.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];

// 0. 导入CIImage图片
CIImage *ciImage = [[CIImage alloc] initWithImage:[UIImage imageNamed:@&amp;quot;demo&amp;quot;]];

// 1. 创建出Filter滤镜.使用另一款滤镜，换个名字即可
CIFilter *filter = [CIFilter filterWithName:@&amp;quot;CIPixellate&amp;quot;];

[filter setValue:ciImage
          forKey:kCIInputImageKey];

NSLog(@&amp;quot;%@&amp;quot;, filter.attributes);

[filter setDefaults];

CIImage *outImage = [filter valueForKey:kCIOutputImageKey];

// 2. 用CIContext将滤镜中的图片渲染出来
CIContext *context = [CIContext contextWithOptions:nil];

CGImageRef cgImage = [context createCGImage:outImage
                                   fromRect:[outImage extent]];

// 3. 导出图片
UIImage *showImage = [UIImage imageWithCGImage:cgImage];

//需要手动释放
CGImageRelease(cgImage);

// 4. 加载出来
UIImageView *imageView = [[UIImageView alloc] initWithImage:showImage];
imageView.center       = self.view.center;
[self.view addSubview:imageView];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;CoreImage滤镜的组合&quot;&gt;&lt;a href=&quot;#CoreImage滤镜的组合&quot; class=&quot;headerlink&quot; title=&quot;CoreImage滤镜的组合&quot;&gt;&lt;/a&gt;CoreImage滤镜的组合&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;不同的滤镜可以组合在一起使用。&lt;/li&gt;
&lt;li&gt;可以动态的修改滤镜组合中单个滤镜的参数来实现一种动态调整的效果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/8gffrjzwk4ddb4r/20160812_coreImage2.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];

// 0. 导入CIImage图片
CIImage *ciImage = [[CIImage alloc] initWithImage:[UIImage imageNamed:@&amp;quot;demo&amp;quot;]];

// 1. 创建出Filter滤镜
CIFilter *filterOne = [CIFilter filterWithName:@&amp;quot;CIPixellate&amp;quot;];

[filterOne setValue:ciImage
             forKey:kCIInputImageKey];

[filterOne setDefaults];

CIImage *outImage = [filterOne valueForKey:kCIOutputImageKey];

CIFilter *filterTwo = [CIFilter filterWithName:@&amp;quot;CIHueAdjust&amp;quot;];
[filterTwo setValue:outImage
             forKey:kCIInputImageKey];

[filterTwo setDefaults];

[filterTwo setValue:@(3.14)
             forKey:kCIInputAngleKey];

CIImage *outputImage = [filterTwo valueForKey:kCIOutputImageKey];

// 2. 用CIContext将滤镜中的图片渲染出来
CIContext *context = [CIContext contextWithOptions:nil];

CGImageRef cgImage = [context createCGImage:outputImage
                                   fromRect:[outImage extent]];

// 3. 导出图片
UIImage *showImage = [UIImage imageWithCGImage:cgImage];

CGImageRelease(cgImage);

// 4. 加载出来
UIImageView *imageView = [[UIImageView alloc] initWithImage:showImage];
imageView.center       = self.view.center;
[self.view addSubview:imageView];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;在OpenGLES下进行渲染&quot;&gt;&lt;a href=&quot;#在OpenGLES下进行渲染&quot; class=&quot;headerlink&quot; title=&quot;在OpenGLES下进行渲染&quot;&gt;&lt;/a&gt;在OpenGLES下进行渲染&lt;/h1&gt;&lt;p&gt;在OpenGLES下进行滤镜的渲染可以提高效率。如果需要实时查看多个滤镜动态渲染的效果，使用OpenGLES是一个好的选择。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;
#import &amp;lt;GLKit/GLKit.h&amp;gt;

@interface ViewController ()
@property (nonatomic, strong) GLKView   *glkView; // 渲染用的buffer视图

@property (nonatomic, strong) CIFilter  *filter;
@property (nonatomic, strong) CIImage   *ciImage;
@property (nonatomic, strong) CIContext *ciContext;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

UIImage *showImage = [UIImage imageNamed:@&amp;quot;demo&amp;quot;];
CGRect  rect       = CGRectMake(0, 0, showImage.size.width, showImage.size.height);

// 获取OpenGLES渲染的上下文
EAGLContext *eagContext = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];

// 创建出渲染的buffer
_glkView = [[GLKView alloc] initWithFrame:rect
                                  context:eagContext];
[_glkView bindDrawable];
[self.view addSubview:_glkView];

// 创建出CoreImage用的上下文
_ciContext = [CIContext contextWithEAGLContext:eagContext
                                       options:@{kCIContextWorkingColorSpace : [NSNull null]}];

// CoreImage相关设置
_ciImage = [[CIImage alloc] initWithImage:showImage];

_filter = [CIFilter filterWithName:@&amp;quot;CISepiaTone&amp;quot;];

[_filter setValue:_ciImage forKey:kCIInputImageKey];
[_filter setValue:@(0) forKey:kCIInputIntensityKey];

// 开始渲染
[_ciContext drawImage:[_filter outputImage]
               inRect:CGRectMake(0, 0, _glkView.drawableWidth, _glkView.drawableHeight)
             fromRect:[_ciImage extent]];
[_glkView display];

// 动态渲染
UISlider *slider    = [[UISlider alloc] initWithFrame:CGRectMake(0, 400, 320, 20)];
slider.minimumValue = 0.f;
slider.maximumValue = 1.f;
[slider addTarget:self action:@selector(sliderEvent:) forControlEvents:UIControlEventValueChanged];
[self.view addSubview:slider];
}

- (void)sliderEvent:(UISlider *)slider {


[_filter setValue:_ciImage forKey:kCIInputImageKey];
[_filter setValue:@(slider.value)
           forKey:kCIInputIntensityKey];

// 开始渲染
[_ciContext drawImage:[_filter outputImage]
               inRect:CGRectMake(0, 0, _glkView.drawableWidth, _glkView.drawableHeight)
             fromRect:[_ciImage extent]];
[_glkView display];
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CoreImage滤镜的使用&quot;&gt;&lt;a href=&quot;#CoreImage滤镜的使用&quot; class=&quot;headerlink&quot; title=&quot;CoreImage滤镜的使用&quot;&gt;&lt;/a&gt;CoreImage滤镜的使用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;CoreImage是苹果公司为了
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_image" scheme="http://jackliu17.github.io/tags/iOS-image/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目22.瀑布流</title>
    <link href="http://jackliu17.github.io/2016/08/12/iOS%E9%A1%B9%E7%9B%AE22-%E7%80%91%E5%B8%83%E6%B5%81/"/>
    <id>http://jackliu17.github.io/2016/08/12/iOS项目22-瀑布流/</id>
    <published>2016-08-12T06:13:38.000Z</published>
    <updated>2016-08-15T06:25:50.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;实现瀑布流有三种方式&quot;&gt;&lt;a href=&quot;#实现瀑布流有三种方式&quot; class=&quot;headerlink&quot; title=&quot;实现瀑布流有三种方式:&quot;&gt;&lt;/a&gt;实现瀑布流有三种方式:&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;scrollView视图重用&lt;/li&gt;
&lt;li&gt;tableView滑动同步&lt;/li&gt;
&lt;li&gt;collectionView布局&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;collectionView的使用&quot;&gt;&lt;a href=&quot;#collectionView的使用&quot; class=&quot;headerlink&quot; title=&quot;collectionView的使用&quot;&gt;&lt;/a&gt;collectionView的使用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;自定义布局类&lt;/li&gt;
&lt;li&gt;自定义视图&lt;/li&gt;
&lt;li&gt;完善功能&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note:记住返回类型，系统就会调用出相关的方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/w48cvdqi5drgm3q/20160812_WaterFall.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实现瀑布流有三种方式&quot;&gt;&lt;a href=&quot;#实现瀑布流有三种方式&quot; class=&quot;headerlink&quot; title=&quot;实现瀑布流有三种方式:&quot;&gt;&lt;/a&gt;实现瀑布流有三种方式:&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;scrollView视图重用&lt;/li&gt;
&lt;li&gt;tableV
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目21聚合数据_车辆违章查询</title>
    <link href="http://jackliu17.github.io/2016/08/11/iOS%E9%A1%B9%E7%9B%AE21%E8%81%9A%E5%90%88%E6%95%B0%E6%8D%AE-%E8%BD%A6%E8%BE%86%E8%BF%9D%E7%AB%A0%E6%9F%A5%E8%AF%A2/"/>
    <id>http://jackliu17.github.io/2016/08/11/iOS项目21聚合数据-车辆违章查询/</id>
    <published>2016-08-11T09:40:42.000Z</published>
    <updated>2016-08-11T09:47:52.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;添加聚合SDK和相关的library&quot;&gt;&lt;a href=&quot;#添加聚合SDK和相关的library&quot; class=&quot;headerlink&quot; title=&quot;添加聚合SDK和相关的library&quot;&gt;&lt;/a&gt;添加聚合SDK和相关的library&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/dk2wx0luth9cohq/20160811_Juhe1.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;创建PCH-file&quot;&gt;&lt;a href=&quot;#创建PCH-file&quot; class=&quot;headerlink&quot; title=&quot;创建PCH file&quot;&gt;&lt;/a&gt;创建PCH file&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/0ompd2wv2rn7n23/20160811_Juhe2.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ug3ezce588an8gy/20160811_Juhe3.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;在新建的PCH-file中引入头文件&quot;&gt;&lt;a href=&quot;#在新建的PCH-file中引入头文件&quot; class=&quot;headerlink&quot; title=&quot;在新建的PCH file中引入头文件&quot;&gt;&lt;/a&gt;在新建的PCH file中引入头文件&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/q62kc03zr5pfsdn/20160811_Juhe4.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;PCH文件预编译-YES&quot;&gt;&lt;a href=&quot;#PCH文件预编译-YES&quot; class=&quot;headerlink&quot; title=&quot;PCH文件预编译-YES&quot;&gt;&lt;/a&gt;PCH文件预编译-YES&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/f8r7gaigk9a33hj/20160811_Juhe5.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;PCH文件设置路径&quot;&gt;&lt;a href=&quot;#PCH文件设置路径&quot; class=&quot;headerlink&quot; title=&quot;PCH文件设置路径&quot;&gt;&lt;/a&gt;PCH文件设置路径&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/xckirmf934qn2vc/20160811_Juhe6.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/4un7afctulk5de4/20160811_Juhe7.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;添加聚合SDK和相关的library&quot;&gt;&lt;a href=&quot;#添加聚合SDK和相关的library&quot; class=&quot;headerlink&quot; title=&quot;添加聚合SDK和相关的library&quot;&gt;&lt;/a&gt;添加聚合SDK和相关的library&lt;/h3&gt;&lt;p&gt;&lt;img s
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
      <category term="iOS_conf" scheme="http://jackliu17.github.io/tags/iOS-conf/"/>
    
  </entry>
  
  <entry>
    <title>iOS界面动画教程之自动布局</title>
    <link href="http://jackliu17.github.io/2016/08/09/iOS%E7%95%8C%E9%9D%A2%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80/"/>
    <id>http://jackliu17.github.io/2016/08/09/iOS界面动画教程之自动布局/</id>
    <published>2016-08-09T02:23:30.000Z</published>
    <updated>2016-08-10T11:17:37.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/n1xwivjmrxpo7cj/20160809_autoLayout18.png?dl=1&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h1 id=&quot;为view设置约束&quot;&gt;&lt;a href=&quot;#为view设置约束&quot; class=&quot;headerlink&quot; title=&quot;为view设置约束&quot;&gt;&lt;/a&gt;为view设置约束&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ca23zlj8lh2agvk/20160809_autoLayout1.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/0qk6ha5s8r9x5tn/20160809_autoLayout2.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;为标签设置约束-相对父视图&quot;&gt;&lt;a href=&quot;#为标签设置约束-相对父视图&quot; class=&quot;headerlink&quot; title=&quot;为标签设置约束(相对父视图)&quot;&gt;&lt;/a&gt;为标签设置约束(相对父视图)&lt;/h1&gt;&lt;h2 id=&quot;水平居中-垂直居中&quot;&gt;&lt;a href=&quot;#水平居中-垂直居中&quot; class=&quot;headerlink&quot; title=&quot;水平居中+垂直居中&quot;&gt;&lt;/a&gt;水平居中+垂直居中&lt;/h2&gt;&lt;p&gt;press it with drag to view&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/10i3o2mha5xocyp/20160809_autoLayout3.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;橘黄线条意味着与实际显示有差异&quot;&gt;&lt;a href=&quot;#橘黄线条意味着与实际显示有差异&quot; class=&quot;headerlink&quot; title=&quot;橘黄线条意味着与实际显示有差异&quot;&gt;&lt;/a&gt;橘黄线条意味着与实际显示有差异&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;橘黄实线。当前位置&lt;/li&gt;
&lt;li&gt;橘黄虚线。应该所在的位置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/jltvu1edtfhz5s6/20160809_autoLayout4.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;标签下移5pt&quot;&gt;&lt;a href=&quot;#标签下移5pt&quot; class=&quot;headerlink&quot; title=&quot;标签下移5pt&quot;&gt;&lt;/a&gt;标签下移5pt&lt;/h2&gt;&lt;p&gt;在约束里的constant里修改&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/y72cps6ccje1325/20160809_autoLayout5.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;为菜单按钮设置约束&quot;&gt;&lt;a href=&quot;#为菜单按钮设置约束&quot; class=&quot;headerlink&quot; title=&quot;为菜单按钮设置约束&quot;&gt;&lt;/a&gt;为菜单按钮设置约束&lt;/h1&gt;&lt;h2 id=&quot;相对父视图的右侧间隔&quot;&gt;&lt;a href=&quot;#相对父视图的右侧间隔&quot; class=&quot;headerlink&quot; title=&quot;相对父视图的右侧间隔&quot;&gt;&lt;/a&gt;相对父视图的右侧间隔&lt;/h2&gt;&lt;p&gt;press it with drag to view&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/1ylpl0li28jx67l/20160809_autoLayout6.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;与标签水平对齐&quot;&gt;&lt;a href=&quot;#与标签水平对齐&quot; class=&quot;headerlink&quot; title=&quot;与标签水平对齐&quot;&gt;&lt;/a&gt;与标签水平对齐&lt;/h2&gt;&lt;p&gt;press it with drag to label&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/lavmxyhn4semuej/20160809_autoLayout7.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;更新frame&quot;&gt;&lt;a href=&quot;#更新frame&quot; class=&quot;headerlink&quot; title=&quot;更新frame&quot;&gt;&lt;/a&gt;更新frame&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/a6lgyr1mb8keawr/20160809_autoLayout8.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;为tableView设置约束&quot;&gt;&lt;a href=&quot;#为tableView设置约束&quot; class=&quot;headerlink&quot; title=&quot;为tableView设置约束&quot;&gt;&lt;/a&gt;为tableView设置约束&lt;/h1&gt;&lt;h2 id=&quot;四周边界&quot;&gt;&lt;a href=&quot;#四周边界&quot; class=&quot;headerlink&quot; title=&quot;四周边界&quot;&gt;&lt;/a&gt;四周边界&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/5uongq74a0uifgv/20160809_autoLayout9.png?dl=1&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h2 id=&quot;更新frame-1&quot;&gt;&lt;a href=&quot;#更新frame-1&quot; class=&quot;headerlink&quot; title=&quot;更新frame&quot;&gt;&lt;/a&gt;更新frame&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/eotshq0z0nwgfkt/20160809_autoLayout10.png?dl=1&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h1 id=&quot;拖入tableViewCell并设置id&quot;&gt;&lt;a href=&quot;#拖入tableViewCell并设置id&quot; class=&quot;headerlink&quot; title=&quot;拖入tableViewCell并设置id&quot;&gt;&lt;/a&gt;拖入tableViewCell并设置id&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/j078za7g3o05mg5/20160809_autoLayout11.png?dl=1&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h1 id=&quot;IB约束与代码中的关联&quot;&gt;&lt;a href=&quot;#IB约束与代码中的关联&quot; class=&quot;headerlink&quot; title=&quot;IB约束与代码中的关联&quot;&gt;&lt;/a&gt;IB约束与代码中的关联&lt;/h1&gt;&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;@IBOutlet var menuHeightConstraint:NSLayoutConstraint!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;p&gt;点击菜单view –&amp;gt;选择右侧的高度约束 –&amp;gt;选择其connect属性 –&amp;gt;drag new reference outlet to ViewController&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/jcz8x68k8sh7liz/20160809_autoLayout13.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/tx17tkjf0rcjq59/20160809_autoLayout14.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;打印所有约束&quot;&gt;&lt;a href=&quot;#打印所有约束&quot; class=&quot;headerlink&quot; title=&quot;打印所有约束&quot;&gt;&lt;/a&gt;打印所有约束&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;@IBAction func actionToggleMenu(sender: AnyObject) {

    //打印所有约束
    for con in titleLabel.superview!.constraints {
        print(&amp;quot; -&amp;gt; \(con.description) &amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/vejtc2uuktrc84v/20160809_autoLayout15.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;为IB中的约束设置Id&quot;&gt;&lt;a href=&quot;#为IB中的约束设置Id&quot; class=&quot;headerlink&quot; title=&quot;为IB中的约束设置Id&quot;&gt;&lt;/a&gt;为IB中的约束设置Id&lt;/h1&gt;&lt;p&gt;选择对应的约束 –&amp;gt; 在Identifier里设置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/kemvryq6cwvn6nv/20160809_autoLayout16.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/iot5t0r1u1wlkod/20160809_autoLayout17.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Pin设置约束：使用pin设置的约束是。Spacing to nearest neighbor。与最近的UI元素间隔&lt;/li&gt;
&lt;li&gt;使用auto layout，不能在代码里设置bounds,frame等属性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/5lrdyqzox1pg4tw/20160810_NSLayoutConstraints1.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/nond7i23od9a8kh/20160810_NSLayoutConstraints2.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/paeysc5vf4945om/20160810_NSLayoutConstraints3.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/hgiy434fmsdl4aq/20160810_NSLayoutConstraints4.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/h8uvd9gy6s3cmsb/20160810_NSLayoutConstraints5.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/n1xwivjmrxpo7cj/20160809_autoL
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="UI" scheme="http://jackliu17.github.io/tags/UI/"/>
    
      <category term="iOS_animation" scheme="http://jackliu17.github.io/tags/iOS-animation/"/>
    
  </entry>
  
  <entry>
    <title>罗辑思维听后感</title>
    <link href="http://jackliu17.github.io/2016/08/07/%E7%BD%97%E8%BE%91%E6%80%9D%E7%BB%B4%E5%90%AC%E5%90%8E%E6%84%9F/"/>
    <id>http://jackliu17.github.io/2016/08/07/罗辑思维听后感/</id>
    <published>2016-08-07T10:38:31.000Z</published>
    <updated>2016-09-12T10:33:56.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;什么是战略&quot;&gt;&lt;a href=&quot;#什么是战略&quot; class=&quot;headerlink&quot; title=&quot;什么是战略&quot;&gt;&lt;/a&gt;什么是战略&lt;/h1&gt;&lt;p&gt;战略是均势思维，注重找到势力的均衡点，并且稍强于对方。以此来推断目前该做些什么&lt;/p&gt;
&lt;p&gt;战术是你死我活的决斗，其状态必然不稳定。&lt;/p&gt;
&lt;h1 id=&quot;黄执中-你如何听懂我说的话&quot;&gt;&lt;a href=&quot;#黄执中-你如何听懂我说的话&quot; class=&quot;headerlink&quot; title=&quot;黄执中:你如何听懂我说的话&quot;&gt;&lt;/a&gt;黄执中:你如何听懂我说的话&lt;/h1&gt;&lt;p&gt;黄执中是辩论界的大神，听他的课还是有些收获的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简单。尽可能精简自己的语句，用最生动的故事或例子来表达。比如肯尼迪对太空工业的表达”将人送上去，将人带回来”。太过于空洞的套话是无效传递。&lt;/li&gt;
&lt;li&gt;意外。一个人会对他人的言语表达下意识的进行预测，自身的意见会因为意外而产生反思，因为惊吓而会产生改变。例如: 我们顾客至上的理念的诠释:他来我们店里成功退货一条围巾，即使我们没有卖这种围巾。愤怒的时候，会让人自信，会对自身的论据信心满满，会很固执，但这样是说服不了别人的。要成功的说服别人，需要做到两点: 1. 要有另人意外的观点，能引起关注。2. 要让他有内在信服。(外在信服是大众公认的，内在信服是自身体验的，如NBA新星球员对艾滋病预防培训的案例)&lt;/li&gt;
&lt;li&gt;具体。具体的细节能让人产生深刻的印象。例如法庭上的两种证词: 妈妈很爱她，每晚陪她用小猫牙刷刷牙 / 每晚陪她刷牙。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是战略&quot;&gt;&lt;a href=&quot;#什么是战略&quot; class=&quot;headerlink&quot; title=&quot;什么是战略&quot;&gt;&lt;/a&gt;什么是战略&lt;/h1&gt;&lt;p&gt;战略是均势思维，注重找到势力的均衡点，并且稍强于对方。以此来推断目前该做些什么&lt;/p&gt;
&lt;p&gt;战术是你死我活的决斗，
    
    </summary>
    
      <category term="情感杂谈" scheme="http://jackliu17.github.io/categories/%E6%83%85%E6%84%9F%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="Thoughts" scheme="http://jackliu17.github.io/tags/Thoughts/"/>
    
  </entry>
  
  <entry>
    <title>AdaptiveLayout设计用户界面</title>
    <link href="http://jackliu17.github.io/2016/08/07/AdaptiveLayout%E8%AE%BE%E8%AE%A1%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/"/>
    <id>http://jackliu17.github.io/2016/08/07/AdaptiveLayout设计用户界面/</id>
    <published>2016-08-07T05:02:22.000Z</published>
    <updated>2016-08-18T23:30:58.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;使用Adaptive-Layout&quot;&gt;&lt;a href=&quot;#使用Adaptive-Layout&quot; class=&quot;headerlink&quot; title=&quot;使用Adaptive Layout&quot;&gt;&lt;/a&gt;使用Adaptive Layout&lt;/h1&gt;&lt;h2 id=&quot;Device里选择Universal&quot;&gt;&lt;a href=&quot;#Device里选择Universal&quot; class=&quot;headerlink&quot; title=&quot;Device里选择Universal&quot;&gt;&lt;/a&gt;Device里选择Universal&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/px81xxqmt4opae6/20160807_adaptive1.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;AutoLayout基本布局和SizeClasses的个别调整&quot;&gt;&lt;a href=&quot;#AutoLayout基本布局和SizeClasses的个别调整&quot; class=&quot;headerlink&quot; title=&quot;AutoLayout基本布局和SizeClasses的个别调整&quot;&gt;&lt;/a&gt;AutoLayout基本布局和SizeClasses的个别调整&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ttx2r0rlsz7lkfe/20160807_adaptive2.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;设置初始约束&quot;&gt;&lt;a href=&quot;#设置初始约束&quot; class=&quot;headerlink&quot; title=&quot;设置初始约束&quot;&gt;&lt;/a&gt;设置初始约束&lt;/h1&gt;&lt;h2 id=&quot;为ImageView设置约束&quot;&gt;&lt;a href=&quot;#为ImageView设置约束&quot; class=&quot;headerlink&quot; title=&quot;为ImageView设置约束&quot;&gt;&lt;/a&gt;为ImageView设置约束&lt;/h2&gt;&lt;h3 id=&quot;约束1：水平居中&quot;&gt;&lt;a href=&quot;#约束1：水平居中&quot; class=&quot;headerlink&quot; title=&quot;约束1：水平居中&quot;&gt;&lt;/a&gt;约束1：水平居中&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/fcv3tds5qp51qo9/20160807_adaptive3.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;约束2：顶部置顶-含电池边距&quot;&gt;&lt;a href=&quot;#约束2：顶部置顶-含电池边距&quot; class=&quot;headerlink&quot; title=&quot;约束2：顶部置顶(含电池边距)&quot;&gt;&lt;/a&gt;约束2：顶部置顶(含电池边距)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/is0gh2p27vr6dhs/20160807_adaptive4.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;约束3：与下方view的垂直高度&quot;&gt;&lt;a href=&quot;#约束3：与下方view的垂直高度&quot; class=&quot;headerlink&quot; title=&quot;约束3：与下方view的垂直高度&quot;&gt;&lt;/a&gt;约束3：与下方view的垂直高度&lt;/h3&gt;&lt;p&gt;按住imageview + ctrl 拖向下方的view，选择vertical spacing&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/276deqb1udpey1i/20160807_adaptive5.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击image view，在右侧可以看见已经设定的约束,Edit vertical spacing to 20&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/fuazugw3fjk3xjw/20160807_adaptive20.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;约束4：与父视图的关系-高度40&quot;&gt;&lt;a href=&quot;#约束4：与父视图的关系-高度40&quot; class=&quot;headerlink&quot; title=&quot;约束4：与父视图的关系-高度40%&quot;&gt;&lt;/a&gt;约束4：与父视图的关系-高度40%&lt;/h3&gt;&lt;p&gt;ctrl + 按住image view 拖向view,设定其与父视图的关系&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/m7ef3ambbfckb0q/20160807_adaptive13.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ysfu2ds12yi4upl/20160807_adaptive14.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;为view设置约束&quot;&gt;&lt;a href=&quot;#为view设置约束&quot; class=&quot;headerlink&quot; title=&quot;为view设置约束&quot;&gt;&lt;/a&gt;为view设置约束&lt;/h2&gt;&lt;h3 id=&quot;左-中-下&quot;&gt;&lt;a href=&quot;#左-中-下&quot; class=&quot;headerlink&quot; title=&quot;左 + 中 + 下&quot;&gt;&lt;/a&gt;左 + 中 + 下&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/op5hztvdwsyy4tf/20160807_adaptive6.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ImageSet为项目添加相关图片&quot;&gt;&lt;a href=&quot;#ImageSet为项目添加相关图片&quot; class=&quot;headerlink&quot; title=&quot;ImageSet为项目添加相关图片&quot;&gt;&lt;/a&gt;ImageSet为项目添加相关图片&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/zqks25yybeid6us/20160807_adaptive8.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;双击后为图片组更名&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/rhgz1ine9uhtykg/20160807_adaptive9.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;更新frame让约束生效&quot;&gt;&lt;a href=&quot;#更新frame让约束生效&quot; class=&quot;headerlink&quot; title=&quot;更新frame让约束生效&quot;&gt;&lt;/a&gt;更新frame让约束生效&lt;/h2&gt;&lt;p&gt;橘红色的是可以调整的，红色的是有问题的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/zgrlxmwrngcq21h/20160807_adaptive10.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;预览功能查看不同设备屏幕&quot;&gt;&lt;a href=&quot;#预览功能查看不同设备屏幕&quot; class=&quot;headerlink&quot; title=&quot;预览功能查看不同设备屏幕&quot;&gt;&lt;/a&gt;预览功能查看不同设备屏幕&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ojpckspdj8bo45g/20160807_adaptive11.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/quy3ojxr8jlpzw1/20160807_adaptive12.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;为label1设定约束&quot;&gt;&lt;a href=&quot;#为label1设定约束&quot; class=&quot;headerlink&quot; title=&quot;为label1设定约束&quot;&gt;&lt;/a&gt;为label1设定约束&lt;/h2&gt;&lt;h3 id=&quot;水平居中&quot;&gt;&lt;a href=&quot;#水平居中&quot; class=&quot;headerlink&quot; title=&quot;水平居中&quot;&gt;&lt;/a&gt;水平居中&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/u8sluq2j9wyhmnj/20160807_adaptive15.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;顶部置顶&quot;&gt;&lt;a href=&quot;#顶部置顶&quot; class=&quot;headerlink&quot; title=&quot;顶部置顶&quot;&gt;&lt;/a&gt;顶部置顶&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/3wxg7vm8gf7avwb/20160807_adaptive16.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;为label2设定约束&quot;&gt;&lt;a href=&quot;#为label2设定约束&quot; class=&quot;headerlink&quot; title=&quot;为label2设定约束&quot;&gt;&lt;/a&gt;为label2设定约束&lt;/h2&gt;&lt;h3 id=&quot;水平居中-1&quot;&gt;&lt;a href=&quot;#水平居中-1&quot; class=&quot;headerlink&quot; title=&quot;水平居中&quot;&gt;&lt;/a&gt;水平居中&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/a5orqx2vb626l1i/20160807_adaptive17.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;下部间隔&quot;&gt;&lt;a href=&quot;#下部间隔&quot; class=&quot;headerlink&quot; title=&quot;下部间隔&quot;&gt;&lt;/a&gt;下部间隔&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/89ypns9m1muwtag/20160807_adaptive18.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;更新frame让约束生效-1&quot;&gt;&lt;a href=&quot;#更新frame让约束生效-1&quot; class=&quot;headerlink&quot; title=&quot;更新frame让约束生效&quot;&gt;&lt;/a&gt;更新frame让约束生效&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/er9295gpjdftvo5/20160807_adaptive19.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Size-Classes的使用&quot;&gt;&lt;a href=&quot;#Size-Classes的使用&quot; class=&quot;headerlink&quot; title=&quot;Size Classes的使用&quot;&gt;&lt;/a&gt;Size Classes的使用&lt;/h1&gt;&lt;h2 id=&quot;两种尺寸组合表达所有设备-Regular-and-Compact&quot;&gt;&lt;a href=&quot;#两种尺寸组合表达所有设备-Regular-and-Compact&quot; class=&quot;headerlink&quot; title=&quot;两种尺寸组合表达所有设备: Regular and Compact&quot;&gt;&lt;/a&gt;两种尺寸组合表达所有设备: Regular and Compact&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/u2gdmu6k1d8gksd/20160807_sizeClass.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;构建iPhone-landscape-size-Class&quot;&gt;&lt;a href=&quot;#构建iPhone-landscape-size-Class&quot; class=&quot;headerlink&quot; title=&quot;构建iPhone landscape size Class&quot;&gt;&lt;/a&gt;构建iPhone landscape size Class&lt;/h2&gt;&lt;p&gt;点击下方的”W any H any”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/lp1del2ve1g92r7/20160807_adaptive21.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/1mb2xqh4xsit8w6/20160807_adaptive22.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;重设image-view约束-仅在该sizeClass&quot;&gt;&lt;a href=&quot;#重设image-view约束-仅在该sizeClass&quot; class=&quot;headerlink&quot; title=&quot;重设image view约束(仅在该sizeClass)&quot;&gt;&lt;/a&gt;重设image view约束(仅在该sizeClass)&lt;/h2&gt;&lt;h3 id=&quot;卸载所有约束&quot;&gt;&lt;a href=&quot;#卸载所有约束&quot; class=&quot;headerlink&quot; title=&quot;卸载所有约束&quot;&gt;&lt;/a&gt;卸载所有约束&lt;/h3&gt;&lt;p&gt;点击image view，在右侧删除所有约束 - （只是在这个size class里uninstalling ）&lt;br&gt;&lt;img src=&quot;https://www.dropbox.com/s/j8diywf0anrlric/20160807_adaptive23.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/gsm084vyj5aw8uc/20160807_adaptive24.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/zskuue3ap4eri39/20160807_adaptive25.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;将所有约束删除&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/698wfvuerw06ue3/20160807_adaptive26.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;新约束1-垂直居中&quot;&gt;&lt;a href=&quot;#新约束1-垂直居中&quot; class=&quot;headerlink&quot; title=&quot;新约束1:垂直居中&quot;&gt;&lt;/a&gt;新约束1:垂直居中&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/e9md11gwb2e1z7b/20160807_adaptive27.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;新约束2-左间隔10&quot;&gt;&lt;a href=&quot;#新约束2-左间隔10&quot; class=&quot;headerlink&quot; title=&quot;新约束2:左间隔10&quot;&gt;&lt;/a&gt;新约束2:左间隔10&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/at6xdz1d14j04kh/20160807_adaptive28.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;新约束3-与父视图的宽度比例为40&quot;&gt;&lt;a href=&quot;#新约束3-与父视图的宽度比例为40&quot; class=&quot;headerlink&quot; title=&quot;新约束3:与父视图的宽度比例为40%&quot;&gt;&lt;/a&gt;新约束3:与父视图的宽度比例为40%&lt;/h3&gt;&lt;p&gt;ctrl拖动到父视图view，设置宽度比例&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/7fm6lqc1kvhqtu9/20160807_adaptive29.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/nbrng2hh4j6hmm6/20160807_adaptive30.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;重设TextContainer约束-仅在该sizeClass&quot;&gt;&lt;a href=&quot;#重设TextContainer约束-仅在该sizeClass&quot; class=&quot;headerlink&quot; title=&quot;重设TextContainer约束(仅在该sizeClass)&quot;&gt;&lt;/a&gt;重设TextContainer约束(仅在该sizeClass)&lt;/h2&gt;&lt;h3 id=&quot;卸载约束&quot;&gt;&lt;a href=&quot;#卸载约束&quot; class=&quot;headerlink&quot; title=&quot;卸载约束&quot;&gt;&lt;/a&gt;卸载约束&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/7xxgxvse0a9jhdp/20160807_adaptive31.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;设定与父视图的顶部间距和宽度比例&quot;&gt;&lt;a href=&quot;#设定与父视图的顶部间距和宽度比例&quot; class=&quot;headerlink&quot; title=&quot;设定与父视图的顶部间距和宽度比例&quot;&gt;&lt;/a&gt;设定与父视图的顶部间距和宽度比例&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/c5ef55gf4riqlir/20160807_adaptive32.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/4c9wlje6hqr8a39/20160807_adaptive33.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/of9a0fnkofgvw24/20160807_adaptive34.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;更新Frame&quot;&gt;&lt;a href=&quot;#更新Frame&quot; class=&quot;headerlink&quot; title=&quot;更新Frame&quot;&gt;&lt;/a&gt;更新Frame&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ou0qkqjww0zxpyf/20160807_adaptive35.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;在故事板中设置自适应字体&quot;&gt;&lt;a href=&quot;#在故事板中设置自适应字体&quot; class=&quot;headerlink&quot; title=&quot;在故事板中设置自适应字体&quot;&gt;&lt;/a&gt;在故事板中设置自适应字体&lt;/h1&gt;&lt;h2 id=&quot;回到Any界面-w-h&quot;&gt;&lt;a href=&quot;#回到Any界面-w-h&quot; class=&quot;headerlink&quot; title=&quot;回到Any界面(w+h)&quot;&gt;&lt;/a&gt;回到Any界面(w+h)&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/i5nn0nh63yfzkda/20160807_adaptive36.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置某个size-class类别下的字体&quot;&gt;&lt;a href=&quot;#设置某个size-class类别下的字体&quot; class=&quot;headerlink&quot; title=&quot;设置某个size class类别下的字体&quot;&gt;&lt;/a&gt;设置某个size class类别下的字体&lt;/h2&gt;&lt;p&gt;点击字体旁的 + 按钮&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/dlcyxnxaoyb71ho/20160807_adaptive37.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/xbz1zln8m1d2uoy/20160807_adaptive38.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置字体能自动缩小50&quot;&gt;&lt;a href=&quot;#设置字体能自动缩小50&quot; class=&quot;headerlink&quot; title=&quot;设置字体能自动缩小50%&quot;&gt;&lt;/a&gt;设置字体能自动缩小50%&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/s9a8ba0ja9gxae1/20160807_adaptive39.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置label与父视图的约束&quot;&gt;&lt;a href=&quot;#设置label与父视图的约束&quot; class=&quot;headerlink&quot; title=&quot;设置label与父视图的约束&quot;&gt;&lt;/a&gt;设置label与父视图的约束&lt;/h2&gt;&lt;p&gt;避免标签的尺寸超出父视图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/0msqdq39diijzsh/20160807_adaptive40.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;设置适配不同设备的图片&quot;&gt;&lt;a href=&quot;#设置适配不同设备的图片&quot; class=&quot;headerlink&quot; title=&quot;设置适配不同设备的图片&quot;&gt;&lt;/a&gt;设置适配不同设备的图片&lt;/h1&gt;&lt;p&gt;点击图片组，分别选择右侧的 iPhone , iPad。拖入图片，将针对不同设备采用不同的图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/zfphysc527297i5/20160807_adaptive42.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;表格单元格的自我调整（代码略）&quot;&gt;&lt;a href=&quot;#表格单元格的自我调整（代码略）&quot; class=&quot;headerlink&quot; title=&quot;表格单元格的自我调整（代码略）&quot;&gt;&lt;/a&gt;表格单元格的自我调整（代码略）&lt;/h1&gt;&lt;h2 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/3oeercgj23sylge/20160807_adaptive52.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;单元格的设定&quot;&gt;&lt;a href=&quot;#单元格的设定&quot; class=&quot;headerlink&quot; title=&quot;单元格的设定&quot;&gt;&lt;/a&gt;单元格的设定&lt;/h2&gt;&lt;p&gt;style为custom,selection为none &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/u41c4qfpofo9e5y/20160807_adaptive43.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;imageView约束设定-铺满整个cell&quot;&gt;&lt;a href=&quot;#imageView约束设定-铺满整个cell&quot; class=&quot;headerlink&quot; title=&quot;imageView约束设定(铺满整个cell)&quot;&gt;&lt;/a&gt;imageView约束设定(铺满整个cell)&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/b6m5iq0uu17k7g0/20160807_adaptive44.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Label约束设定&quot;&gt;&lt;a href=&quot;#Label约束设定&quot; class=&quot;headerlink&quot; title=&quot;Label约束设定&quot;&gt;&lt;/a&gt;Label约束设定&lt;/h2&gt;&lt;p&gt;Press ctrl to drag to contentView and press shift to select all&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/oa17kouurjo6ymi/20160807_adaptive45.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/3sqz1wu3zbfwzf7/20160807_adaptive49.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;场景布局与实际布局不符合，就会出现橘红色的标注&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ipd4pfvj76i94gj/20160807_adaptive48.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Label字体-背景色-透明度设定&quot;&gt;&lt;a href=&quot;#Label字体-背景色-透明度设定&quot; class=&quot;headerlink&quot; title=&quot;Label字体/背景色/透明度设定&quot;&gt;&lt;/a&gt;Label字体/背景色/透明度设定&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/qqk6shnj0vqet6z/20160807_adaptive50.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置单元格高度解决冲突&quot;&gt;&lt;a href=&quot;#设置单元格高度解决冲突&quot; class=&quot;headerlink&quot; title=&quot;设置单元格高度解决冲突&quot;&gt;&lt;/a&gt;设置单元格高度解决冲突&lt;/h2&gt;&lt;p&gt;点击单元格，将高度拖至120&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/juqfxh9wrp3olnu/20160807_adaptive46.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;更新frame&quot;&gt;&lt;a href=&quot;#更新frame&quot; class=&quot;headerlink&quot; title=&quot;更新frame&quot;&gt;&lt;/a&gt;更新frame&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/rgslw0en2jnsxa1/20160807_adaptive47.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置table-cell之间的分割符&quot;&gt;&lt;a href=&quot;#设置table-cell之间的分割符&quot; class=&quot;headerlink&quot; title=&quot;设置table cell之间的分割符&quot;&gt;&lt;/a&gt;设置table cell之间的分割符&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/eq7nntoh41ec8kc/20160807_adaptive51.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在Controller中必须添加的两行代码&quot;&gt;&lt;a href=&quot;#在Controller中必须添加的两行代码&quot; class=&quot;headerlink&quot; title=&quot;在Controller中必须添加的两行代码&quot;&gt;&lt;/a&gt;在Controller中必须添加的两行代码&lt;/h2&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;override func viewDidLoad() {
  super.viewDidLoad()

  tableView.rowHeight = UITableViewAutomaticDimension
  tableView.estimatedRowHeight = 100
  }
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;必须要由tableView来决定表格的宽度&lt;/li&gt;
&lt;li&gt;Autolayout必须约束高度，并且不能有冲突。比如该例子中的label。需要手动调整高度&lt;/li&gt;
&lt;li&gt;两行代码&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;安装集合视图（代码略）&quot;&gt;&lt;a href=&quot;#安装集合视图（代码略）&quot; class=&quot;headerlink&quot; title=&quot;安装集合视图（代码略）&quot;&gt;&lt;/a&gt;安装集合视图（代码略）&lt;/h1&gt;&lt;h2 id=&quot;效果图-1&quot;&gt;&lt;a href=&quot;#效果图-1&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/bo371qdejtb4x9w/20160807_adaptive62.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装ContainerView并添加约束&quot;&gt;&lt;a href=&quot;#安装ContainerView并添加约束&quot; class=&quot;headerlink&quot; title=&quot;安装ContainerView并添加约束&quot;&gt;&lt;/a&gt;安装ContainerView并添加约束&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/t9y6oxw2614n8mf/20160807_adaptive59.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ContainerView会自动创建ViewController&quot;&gt;&lt;a href=&quot;#ContainerView会自动创建ViewController&quot; class=&quot;headerlink&quot; title=&quot;ContainerView会自动创建ViewController&quot;&gt;&lt;/a&gt;ContainerView会自动创建ViewController&lt;/h2&gt;&lt;p&gt;本案例不需要，可以删除&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/4pi06h57oynyxsh/20160807_adaptive53.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Container内嵌集合视图-代码略&quot;&gt;&lt;a href=&quot;#Container内嵌集合视图-代码略&quot; class=&quot;headerlink&quot; title=&quot;Container内嵌集合视图 (代码略)&quot;&gt;&lt;/a&gt;Container内嵌集合视图 (代码略)&lt;/h2&gt;&lt;p&gt;Press ctrl to drag to collectionView ,选择 Embed&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/2wmy6xolald7x2w/20160807_adaptive54.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/w45ig9dn298sq64/20160807_adaptive55.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;重新设定Label约束&quot;&gt;&lt;a href=&quot;#重新设定Label约束&quot; class=&quot;headerlink&quot; title=&quot;重新设定Label约束&quot;&gt;&lt;/a&gt;重新设定Label约束&lt;/h2&gt;&lt;h3 id=&quot;删除顶部约束&quot;&gt;&lt;a href=&quot;#删除顶部约束&quot; class=&quot;headerlink&quot; title=&quot;删除顶部约束&quot;&gt;&lt;/a&gt;删除顶部约束&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/iynvi7o4ahb5idw/20160807_adaptive56.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;与Container的顶部垂直距离为0&quot;&gt;&lt;a href=&quot;#与Container的顶部垂直距离为0&quot; class=&quot;headerlink&quot; title=&quot;与Container的顶部垂直距离为0&quot;&gt;&lt;/a&gt;与Container的顶部垂直距离为0&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/l7ptx3cy8l9uyt0/20160807_adaptive60.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/x4tclqlyrule5r1/20160807_adaptive61.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;在iPhone横屏中去除集合视图&quot;&gt;&lt;a href=&quot;#在iPhone横屏中去除集合视图&quot; class=&quot;headerlink&quot; title=&quot;在iPhone横屏中去除集合视图&quot;&gt;&lt;/a&gt;在iPhone横屏中去除集合视图&lt;/h1&gt;&lt;h2 id=&quot;效果图-2&quot;&gt;&lt;a href=&quot;#效果图-2&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/6y3wvxbxdjrfsi4/20160807_adaptive70.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;设定iPhone横屏size-class&quot;&gt;&lt;a href=&quot;#设定iPhone横屏size-class&quot; class=&quot;headerlink&quot; title=&quot;设定iPhone横屏size class&quot;&gt;&lt;/a&gt;设定iPhone横屏size class&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ne3xclzasd478pn/20160807_adaptive63.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在该size-class中卸载container&quot;&gt;&lt;a href=&quot;#在该size-class中卸载container&quot; class=&quot;headerlink&quot; title=&quot;在该size class中卸载container&quot;&gt;&lt;/a&gt;在该size class中卸载container&lt;/h2&gt;&lt;p&gt;cmd + Delete = 卸载&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/xidc81x6efg170g/20160807_adaptive64.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;卸载container-view的约束-右侧删除&quot;&gt;&lt;a href=&quot;#卸载container-view的约束-右侧删除&quot; class=&quot;headerlink&quot; title=&quot;卸载container view的约束(右侧删除)&quot;&gt;&lt;/a&gt;卸载container view的约束(右侧删除)&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/t66clmb7wps0is2/20160807_adaptive65.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;重设label约束&quot;&gt;&lt;a href=&quot;#重设label约束&quot; class=&quot;headerlink&quot; title=&quot;重设label约束&quot;&gt;&lt;/a&gt;重设label约束&lt;/h2&gt;&lt;h3 id=&quot;显示Label所有约束-含卸载&quot;&gt;&lt;a href=&quot;#显示Label所有约束-含卸载&quot; class=&quot;headerlink&quot; title=&quot;显示Label所有约束(含卸载)&quot;&gt;&lt;/a&gt;显示Label所有约束(含卸载)&lt;/h3&gt;&lt;p&gt;点击All&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ndu6u825kaucjco/20160807_adaptive66.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;重设当前sizeClass约束&quot;&gt;&lt;a href=&quot;#重设当前sizeClass约束&quot; class=&quot;headerlink&quot; title=&quot;重设当前sizeClass约束&quot;&gt;&lt;/a&gt;重设当前sizeClass约束&lt;/h3&gt;&lt;p&gt;点击 + 号，选择size class ,然后install&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/kxz5ictnoofm02c/20160807_adaptive67.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/d8052c6i2p3qweo/20160807_adaptive68.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/leefz9n24lncaec/20160807_adaptive69.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;iPhone竖屏上去除集合视图&quot;&gt;&lt;a href=&quot;#iPhone竖屏上去除集合视图&quot; class=&quot;headerlink&quot; title=&quot;iPhone竖屏上去除集合视图&quot;&gt;&lt;/a&gt;iPhone竖屏上去除集合视图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/caualyqwgggl55d/20160807_adaptive75.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;DetailViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; override func viewDidLoad() {
    super.viewDidLoad()
    // Do any additional setup after loading the view, typically from a nib.
    self.configureView()
    provideDataToChildViewControllers()

    navigationItem.leftItemsSupplementBackButton = true
    navigationItem.hidesBackButton = false

    configureTraitOverrideForSize(view.bounds.size)
}

override func viewWillTransitionToSize(size: CGSize, withTransitionCoordinator coordinator: UIViewControllerTransitionCoordinator) {
    configureTraitOverrideForSize(size)
}

private func configureTraitOverrideForSize(size:CGSize) {
    var traitOverride: UITraitCollection?

    if size.height &amp;lt; 1000 {
        traitOverride = UITraitCollection(verticalSizeClass: .Compact)
    }

    for vc in childViewControllers {
        setOverrideTraitCollection(traitOverride, forChildViewController: vc)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;为SizeClass配置相关图片&quot;&gt;&lt;a href=&quot;#为SizeClass配置相关图片&quot; class=&quot;headerlink&quot; title=&quot;为SizeClass配置相关图片&quot;&gt;&lt;/a&gt;为SizeClass配置相关图片&lt;/h1&gt;&lt;h2 id=&quot;效果图-3&quot;&gt;&lt;a href=&quot;#效果图-3&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h2&gt;&lt;p&gt;如图，集合视图和顶部所使用的图片不一样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/maja4iharq45ruh/20160807_adaptive71.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在ImageAsset中构建size-class&quot;&gt;&lt;a href=&quot;#在ImageAsset中构建size-class&quot; class=&quot;headerlink&quot; title=&quot;在ImageAsset中构建size class&quot;&gt;&lt;/a&gt;在ImageAsset中构建size class&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;选择右侧width – Any&amp;amp;Compact&lt;/li&gt;
&lt;li&gt;Universal打勾，对应拖入图片。 * 代表 any, - 代表compact , + 代表regular&lt;/li&gt;
&lt;li&gt;右侧取消iPhone,iPad&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/9yinto1b1fghzac/20160807_adaptive77.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关代码&quot;&gt;&lt;a href=&quot;#相关代码&quot; class=&quot;headerlink&quot; title=&quot;相关代码&quot;&gt;&lt;/a&gt;相关代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;override func viewDidLoad() {
    super.viewDidLoad()
    // Do any additional setup after loading the view.
    configureView()

    let traitOverride = UITraitCollection(horizontalSizeClass: .Compact)

    for vc in childViewControllers {
        setOverrideTraitCollection(traitOverride, forChildViewController: vc)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;隐藏导航栏&quot;&gt;&lt;a href=&quot;#隐藏导航栏&quot; class=&quot;headerlink&quot; title=&quot;隐藏导航栏&quot;&gt;&lt;/a&gt;隐藏导航栏&lt;/h1&gt;&lt;h2 id=&quot;效果图-4&quot;&gt;&lt;a href=&quot;#效果图-4&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h2&gt;&lt;p&gt;如图，点击屏幕将导航栏隐藏&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/sv4rvtm0fgc6u3d/20160807_adaptive72.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/2u7qh3xm9o3uvwe/20160807_adaptive74.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;UIStoryboard中设置NavigationBar&quot;&gt;&lt;a href=&quot;#UIStoryboard中设置NavigationBar&quot; class=&quot;headerlink&quot; title=&quot;UIStoryboard中设置NavigationBar&quot;&gt;&lt;/a&gt;UIStoryboard中设置NavigationBar&lt;/h2&gt;&lt;p&gt;选中NavigationController,在右侧hide bar打勾:“on tap” + “when vertically compact”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/fdb56pi2p8awn5k/20160807_adaptive73.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;定制横竖屏的文字&quot;&gt;&lt;a href=&quot;#定制横竖屏的文字&quot; class=&quot;headerlink&quot; title=&quot;定制横竖屏的文字&quot;&gt;&lt;/a&gt;定制横竖屏的文字&lt;/h1&gt;&lt;h2 id=&quot;效果图-5&quot;&gt;&lt;a href=&quot;#效果图-5&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h2&gt;&lt;p&gt;横屏文字较小，竖屏文字较大&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/caualyqwgggl55d/20160807_adaptive75.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/sv4rvtm0fgc6u3d/20160807_adaptive72.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关代码-1&quot;&gt;&lt;a href=&quot;#相关代码-1&quot; class=&quot;headerlink&quot; title=&quot;相关代码&quot;&gt;&lt;/a&gt;相关代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;private func prepareNavigationBarAppearance() {
    let font = UIFont(name: &amp;quot;HelveticaNeue-Light&amp;quot;, size: 30)!
    let regularVertical = UITraitCollection(verticalSizeClass: .Regular)
    UINavigationBar.appearanceForTraitCollection(regularVertical).titleTextAttributes = [NSFontAttributeName: font]
    let compactVertical = UITraitCollection(verticalSizeClass: .Compact)
    UINavigationBar.appearanceForTraitCollection(compactVertical).titleTextAttributes = [NSFontAttributeName: font.fontWithSize(20)]
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;设定某UI元素height或width的约束&quot;&gt;&lt;a href=&quot;#设定某UI元素height或width的约束&quot; class=&quot;headerlink&quot; title=&quot;设定某UI元素height或width的约束&quot;&gt;&lt;/a&gt;设定某UI元素height或width的约束&lt;/h1&gt;&lt;p&gt;ctrl + drag 在该元素内部拖动&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/xigfhpio2unf7le/20160819_autoLayout.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Adaptive-Layout&quot;&gt;&lt;a href=&quot;#使用Adaptive-Layout&quot; class=&quot;headerlink&quot; title=&quot;使用Adaptive Layout&quot;&gt;&lt;/a&gt;使用Adaptive Layout&lt;/h1&gt;&lt;h2 id=&quot;Devic
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="UI" scheme="http://jackliu17.github.io/tags/UI/"/>
    
      <category term="Xcode" scheme="http://jackliu17.github.io/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Alamofire简介</title>
    <link href="http://jackliu17.github.io/2016/08/05/Alamofire%E7%AE%80%E4%BB%8B/"/>
    <id>http://jackliu17.github.io/2016/08/05/Alamofire简介/</id>
    <published>2016-08-05T01:43:01.000Z</published>
    <updated>2016-08-05T10:57:40.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iOS中的网络连接方案&quot;&gt;&lt;a href=&quot;#iOS中的网络连接方案&quot; class=&quot;headerlink&quot; title=&quot;iOS中的网络连接方案&quot;&gt;&lt;/a&gt;iOS中的网络连接方案&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;NSURLConnection：用法简单，最古老最经典最直接的一种方案&lt;/li&gt;
&lt;li&gt;NSURLSession：iOS 7 新出的技术，功能比 NSURLConnection 更加强大&lt;/li&gt;
&lt;li&gt;AFNetworking：简单易用，提供了基本够用的常用功能&lt;/li&gt;
&lt;li&gt;Alamofire：纯Swift网络请求库&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Alamofire响应处理&quot;&gt;&lt;a href=&quot;#Alamofire响应处理&quot; class=&quot;headerlink&quot; title=&quot;Alamofire响应处理&quot;&gt;&lt;/a&gt;Alamofire响应处理&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Alamofire.request(.GET, &amp;quot;https://httpbin.org/get&amp;quot;, parameters: [&amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;])
.responseJSON { response in
    print(response.request)  // 初始URL请求
    print(response.response) // URL响应
    print(response.data)     // 服务器数据
    print(response.result)   // 响应序列化的结果

    if let JSON = response.result.value {
        print(&amp;quot;JSON: \(JSON)&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Alamofire-HTTP-Headers&quot;&gt;&lt;a href=&quot;#Alamofire-HTTP-Headers&quot; class=&quot;headerlink&quot; title=&quot;Alamofire - HTTP Headers&quot;&gt;&lt;/a&gt;Alamofire - HTTP Headers&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let headers = [
&amp;quot;Authorization&amp;quot;: &amp;quot;Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==&amp;quot;,
&amp;quot;Content-Type&amp;quot;: &amp;quot;application/x-www-form-urlencoded&amp;quot;
]

Alamofire.request(.GET, &amp;quot;https://httpbin.org/get&amp;quot;, headers: headers)
.responseJSON { response in
    debugPrint(response)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Alamofire-使用默认的Download-Destination&quot;&gt;&lt;a href=&quot;#Alamofire-使用默认的Download-Destination&quot; class=&quot;headerlink&quot; title=&quot;Alamofire 使用默认的Download Destination&quot;&gt;&lt;/a&gt;Alamofire 使用默认的Download Destination&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let destination = Alamofire.Request.suggestedDownloadDestination(directory: .DocumentDirectory, domain: .UserDomainMask)
Alamofire.download(.GET, &amp;quot;https://httpbin.org/stream/100&amp;quot;, destination: destination)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Alamofire-下载失败访问恢复文件&quot;&gt;&lt;a href=&quot;#Alamofire-下载失败访问恢复文件&quot; class=&quot;headerlink&quot; title=&quot;Alamofire 下载失败访问恢复文件&quot;&gt;&lt;/a&gt;Alamofire 下载失败访问恢复文件&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Alamofire.download(.GET, &amp;quot;https://httpbin.org/stream/100&amp;quot;, destination: destination).response { _, _, data, _ in
    if let data = data, resumeDataString = NSString(data: data, encoding: NSUTF8StringEncoding) {
        print(&amp;quot;Resume Data: \(resumeDataString)&amp;quot;)
    } else {
        print(&amp;quot;Resume Data was empty&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Alamofire-URLStringConvertible&quot;&gt;&lt;a href=&quot;#Alamofire-URLStringConvertible&quot; class=&quot;headerlink&quot; title=&quot;Alamofire - URLStringConvertible&quot;&gt;&lt;/a&gt;Alamofire - URLStringConvertible&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let string = NSString(string: &amp;quot;https://httpbin.org/post&amp;quot;)
Alamofire.request(.POST, string)

let URL = NSURL(string: string)!
Alamofire.request(.POST, URL)

let URLRequest = NSURLRequest(URL: URL)
Alamofire.request(.POST, URLRequest) // overrides `HTTPMethod` of `URLRequest`

let URLComponents = NSURLComponents(URL: URL, resolvingAgainstBaseURL: true)
Alamofire.request(.POST, URLComponents)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Bug&quot;&gt;&lt;a href=&quot;#Bug&quot; class=&quot;headerlink&quot; title=&quot;Bug&quot;&gt;&lt;/a&gt;Bug&lt;/h1&gt;&lt;p&gt;Xcode的bug: 从cocoapods导入时，识别不了Alamofire。只要先Run一次，再import Alamofire就可以了&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS中的网络连接方案&quot;&gt;&lt;a href=&quot;#iOS中的网络连接方案&quot; class=&quot;headerlink&quot; title=&quot;iOS中的网络连接方案&quot;&gt;&lt;/a&gt;iOS中的网络连接方案&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;NSURLConnection：用法简单，最古老最经典最
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS_networking" scheme="http://jackliu17.github.io/tags/iOS-networking/"/>
    
  </entry>
  
  <entry>
    <title>使用CocoaPods管理iOS库</title>
    <link href="http://jackliu17.github.io/2016/08/04/%E4%BD%BF%E7%94%A8CocoaPods%E7%AE%A1%E7%90%86iOS%E5%BA%93/"/>
    <id>http://jackliu17.github.io/2016/08/04/使用CocoaPods管理iOS库/</id>
    <published>2016-08-04T04:17:13.000Z</published>
    <updated>2016-08-04T11:18:29.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iOS库的介绍&quot;&gt;&lt;a href=&quot;#iOS库的介绍&quot; class=&quot;headerlink&quot; title=&quot;iOS库的介绍&quot;&gt;&lt;/a&gt;iOS库的介绍&lt;/h1&gt;&lt;h2 id=&quot;动态库和静态库&quot;&gt;&lt;a href=&quot;#动态库和静态库&quot; class=&quot;headerlink&quot; title=&quot;动态库和静态库&quot;&gt;&lt;/a&gt;动态库和静态库&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;动态库在运行时实时部署，静态库必须在编译时连接到代码&lt;/li&gt;
&lt;li&gt;动态库加载到内存后可以重复使用,静态库每次import都引入一次&lt;/li&gt;
&lt;li&gt;自定义的动态库只能部署在 iOS8 以上系统&lt;/li&gt;
&lt;li&gt;.a(静态库，只有代码，没有任何资源,图片xib文件等)&lt;/li&gt;
&lt;li&gt;.dylib (动态库，只有代码，没有任何资源)&lt;/li&gt;
&lt;li&gt;.framework 可以包含资源，分为两种：dynamic 和 static&lt;/li&gt;
&lt;li&gt;use_frameworks! 生成 dynamic framework&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/4avj4s13s02p584/20160804_dylib.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;制作库&quot;&gt;&lt;a href=&quot;#制作库&quot; class=&quot;headerlink&quot; title=&quot;制作库&quot;&gt;&lt;/a&gt;制作库&lt;/h2&gt;&lt;p&gt;iOS 体系结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;armv7： iPhone 4/4s&lt;/li&gt;
&lt;li&gt;armv7s：iPhone 5 和 iPhone 5C&lt;/li&gt;
&lt;li&gt;arm64：iPhone 5S+&lt;/li&gt;
&lt;li&gt;x86-64、i386：模拟器&lt;/li&gt;
&lt;li&gt;lipo –info – 查看库支持的体系结构&lt;/li&gt;
&lt;li&gt;lipo -create  -output  - 将模拟器和真机的库合成一个库&lt;/li&gt;
&lt;li&gt;Build Active Architecture Only (Debug,Release) – 只编译当前设备体系结构的包&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;设定系统为8-0以上才能部署自定义动态库&quot;&gt;&lt;a href=&quot;#设定系统为8-0以上才能部署自定义动态库&quot; class=&quot;headerlink&quot; title=&quot;设定系统为8.0以上才能部署自定义动态库&quot;&gt;&lt;/a&gt;设定系统为8.0以上才能部署自定义动态库&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/dpfrluxleicxjaq/20160804_dylib1.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;创建一个库&quot;&gt;&lt;a href=&quot;#创建一个库&quot; class=&quot;headerlink&quot; title=&quot;创建一个库&quot;&gt;&lt;/a&gt;创建一个库&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ih94n4pgrsh6ik9/20160804_dylib2.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;MyFramework-swift&quot;&gt;&lt;a href=&quot;#MyFramework-swift&quot; class=&quot;headerlink&quot; title=&quot;MyFramework.swift&quot;&gt;&lt;/a&gt;MyFramework.swift&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;import UIKit

public class MyFramework: NSObject {

static let bundle = NSBundle(forClass: MyFramework.self)

static let MyFrameworkStr = &amp;quot;MyFramework&amp;quot;

public static func openVCFromStoryboard() {
    let vc  = UIStoryboard(name: MyFrameworkStr, bundle: bundle).instantiateViewControllerWithIdentifier(&amp;quot;MyFrameworkViewController&amp;quot;)
    UIApplication.sharedApplication().keyWindow?.rootViewController?.presentViewController(vc, animated: true, completion: nil)
}

public static func openVCFromXib() {
    let vc = MyFrameworkViewController(nibName: MyFrameworkStr, bundle: bundle)
    UIApplication.sharedApplication().keyWindow?.rootViewController?.presentViewController(vc, animated: true, completion: nil)
}

public static func loadImage() -&amp;gt; UIImage{
    let image = UIImage(named: MyFrameworkStr + &amp;quot;.png&amp;quot;, inBundle: bundle, compatibleWithTraitCollection: nil)
    return image!
}


}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;分别在真机和模拟下运行，Product下生成，在show-in-finder中打开&quot;&gt;&lt;a href=&quot;#分别在真机和模拟下运行，Product下生成，在show-in-finder中打开&quot; class=&quot;headerlink&quot; title=&quot;分别在真机和模拟下运行，Product下生成，在show in finder中打开&quot;&gt;&lt;/a&gt;分别在真机和模拟下运行，Product下生成，在show in finder中打开&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/51aymh1bamnxr95/20160804_dylib3.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;找到xxx-framework目录下的MyFramework文件，如图所示&quot;&gt;&lt;a href=&quot;#找到xxx-framework目录下的MyFramework文件，如图所示&quot; class=&quot;headerlink&quot; title=&quot;找到xxx.framework目录下的MyFramework文件，如图所示&quot;&gt;&lt;/a&gt;找到xxx.framework目录下的MyFramework文件，如图所示&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/wc19di7fthutx26/20160804_dylib4.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;合并真机和模拟器的动态库。将其拖入到“lipo-create”后-路径&quot;&gt;&lt;a href=&quot;#合并真机和模拟器的动态库。将其拖入到“lipo-create”后-路径&quot; class=&quot;headerlink&quot; title=&quot;合并真机和模拟器的动态库。将其拖入到“lipo -create”后(路径)&quot;&gt;&lt;/a&gt;合并真机和模拟器的动态库。将其拖入到“lipo -create”后(路径)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/se9l6dzpq9i5nth/20160804_dylib5.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/wj51h5qpx9zvjf5/20160804_dylib6.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;合并库中的module也要模拟器module-真机module&quot;&gt;&lt;a href=&quot;#合并库中的module也要模拟器module-真机module&quot; class=&quot;headerlink&quot; title=&quot;合并库中的module也要模拟器module + 真机module&quot;&gt;&lt;/a&gt;合并库中的module也要模拟器module + 真机module&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/2m7pz7k1p3d69v7/20160804_dylib7.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用库&quot;&gt;&lt;a href=&quot;#使用库&quot; class=&quot;headerlink&quot; title=&quot;使用库&quot;&gt;&lt;/a&gt;使用库&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;手动导入：Linked Frameworks and  Libraries 、 Embedded Binaries&lt;/li&gt;
&lt;li&gt;使用 pod：use_frameworks!&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;利用-dynamic-库实时部署&quot;&gt;&lt;a href=&quot;#利用-dynamic-库实时部署&quot; class=&quot;headerlink&quot; title=&quot;利用 dynamic 库实时部署&quot;&gt;&lt;/a&gt;利用 dynamic 库实时部署&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let libPath = &amp;quot;\(NSHomeDirectory())/Documents/MyFramework.framework/MyFramework&amp;quot;
if let bundle = NSBundle(path: libPath) {
do {
    try bundle.loadAndReturnError()
    if let myFramework = NSClassFromString(&amp;quot;MyFramework&amp;quot;) as? MyFramework.Type{
        myFramework.init().whereIsFrom()
    }
} catch {
    print(&amp;quot;动态库加载失败&amp;quot;)
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Cocoapods&quot;&gt;&lt;a href=&quot;#Cocoapods&quot; class=&quot;headerlink&quot; title=&quot;Cocoapods&quot;&gt;&lt;/a&gt;Cocoapods&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;在Terminal输入以下安装命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;出现以下报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You don&amp;apos;t have write permissions for the /Library/Ruby/Gems/2.0.0 directory.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再Terminal输入以下命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还是出现以下报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Operation not permitted - /usr/bin/xcodeproj
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参考官方文档&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/issues/3692&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Operation not permitted&lt;/a&gt;输入以下命令，成功&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem install -n /usr/local/bin cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;CocoaPods基础知识-—-使用步骤&quot;&gt;&lt;a href=&quot;#CocoaPods基础知识-—-使用步骤&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods基础知识 — 使用步骤&quot;&gt;&lt;/a&gt;CocoaPods基础知识 — 使用步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;创建或打开 Xcode 项目&lt;/li&gt;
&lt;li&gt;命令行 cd 到项目目录 (拖曳文件夹到cd后面就是路径)&lt;/li&gt;
&lt;li&gt;使用 pod init 创建 Podfile&lt;/li&gt;
&lt;li&gt;pod search Alamofire &lt;/li&gt;
&lt;li&gt;修改 Podfile&lt;/li&gt;
&lt;li&gt;pod install&lt;/li&gt;
&lt;li&gt;打开 pod 创建的 xcworkspace&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;CocoaPods基础知识-—-Podfile&quot;&gt;&lt;a href=&quot;#CocoaPods基础知识-—-Podfile&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods基础知识 — Podfile&quot;&gt;&lt;/a&gt;CocoaPods基础知识 — Podfile&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;platform : ios &amp;apos;9.0&amp;apos;
use_frameworks! (swift下必须使用)
inhibit_all_warnings! (隐藏所有报错信息)
target  &amp;apos;PodTest&amp;apos; do
    pod &amp;apos;AFNetworking&amp;apos;,  &amp;apos;~&amp;gt; 3.0&amp;apos;
    pod &amp;apos;FBSDKCoreKit&amp;apos;, &amp;apos;~&amp;gt; 4.9&amp;apos;
end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Podfile-lock&quot;&gt;&lt;a href=&quot;#Podfile-lock&quot; class=&quot;headerlink&quot; title=&quot;Podfile.lock&quot;&gt;&lt;/a&gt;Podfile.lock&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;第一次 pod install 时生成记录每个 Pod 版本&lt;/li&gt;
&lt;li&gt;Podfile.lock 锁定当前各依赖库的版本之后 pod install 不会更改版本pod update 才会改版本&lt;/li&gt;
&lt;li&gt;多人协作时防止第三方库升级时造成版本不一致&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;pod-install-和-pod-update&quot;&gt;&lt;a href=&quot;#pod-install-和-pod-update&quot; class=&quot;headerlink&quot; title=&quot;pod install 和 pod update&quot;&gt;&lt;/a&gt;pod install 和 pod update&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;pod install: 每次安装Podfile.lock 中锁定的版本的pods 及 新的pods&lt;/li&gt;
&lt;li&gt;pod update: 会将指定的pod更新到最新版本或 podfile 中指定版本&lt;/li&gt;
&lt;li&gt;使用 pod update podName 来更新指定 pod 的版本&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS库的介绍&quot;&gt;&lt;a href=&quot;#iOS库的介绍&quot; class=&quot;headerlink&quot; title=&quot;iOS库的介绍&quot;&gt;&lt;/a&gt;iOS库的介绍&lt;/h1&gt;&lt;h2 id=&quot;动态库和静态库&quot;&gt;&lt;a href=&quot;#动态库和静态库&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS_conf" scheme="http://jackliu17.github.io/tags/iOS-conf/"/>
    
  </entry>
  
  <entry>
    <title>GCD编程</title>
    <link href="http://jackliu17.github.io/2016/08/02/GCD%E7%BC%96%E7%A8%8B/"/>
    <id>http://jackliu17.github.io/2016/08/02/GCD编程/</id>
    <published>2016-08-02T11:01:19.000Z</published>
    <updated>2016-08-10T11:25:34.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;串行队列&quot;&gt;&lt;a href=&quot;#串行队列&quot; class=&quot;headerlink&quot; title=&quot;串行队列&quot;&gt;&lt;/a&gt;串行队列&lt;/h1&gt;&lt;p&gt;串行队列一次只执行一个线程，按照添加到队列的顺序依次执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[self serailQueue];
}


//串行队列
- (void)serailQueue {

//创建出了队列
GCDQueue *queue = [[GCDQueue alloc]initSerial];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;1&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;2&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;3&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;4&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;5&amp;quot;);
}];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;并发队列&quot;&gt;&lt;a href=&quot;#并发队列&quot; class=&quot;headerlink&quot; title=&quot;并发队列&quot;&gt;&lt;/a&gt;并发队列&lt;/h1&gt;&lt;p&gt;并发队列一次可以执行多个线程，线程的执行没有先后顺序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[self serailQueue];
}

//并发队列,5个线程同时执行
- (void)initConcurrent{

//创建出了队列
GCDQueue *queue = [[GCDQueue alloc]initConcurrent];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;1&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;2&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;3&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;4&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;5&amp;quot;);
}];

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;UI界面所在的线程队列是串行队列&quot;&gt;&lt;a href=&quot;#UI界面所在的线程队列是串行队列&quot; class=&quot;headerlink&quot; title=&quot;UI界面所在的线程队列是串行队列&quot;&gt;&lt;/a&gt;UI界面所在的线程队列是串行队列&lt;/h1&gt;&lt;p&gt;在子线程中处理业务逻辑，在主线程中更新UI&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {

self.imageView        = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];
self.imageView.center = self.view.center;
[self.view addSubview:self.imageView];

[GCDQueue executeInGlobalQueue:^{

    //处理业务逻辑,下载操作

    NSString *netUrlString = @&amp;quot;http://pic.cnitblog.com/avatar/607542/20140226182241.png&amp;quot;;
    NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:netUrlString]];
    NSData *picData = [NSURLConnection sendSynchronousRequest:request
                                            returningResponse:nil
                                                        error:nil];


    [GCDQueue executeInMainQueue:^{

        //更新UI
        self.imageView.image = [[UIImage alloc] initWithData:picData];

    }];

}];

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;延时操作&quot;&gt;&lt;a href=&quot;#延时操作&quot; class=&quot;headerlink&quot; title=&quot;延时操作&quot;&gt;&lt;/a&gt;延时操作&lt;/h1&gt;&lt;h2 id=&quot;NSThread方式&quot;&gt;&lt;a href=&quot;#NSThread方式&quot; class=&quot;headerlink&quot; title=&quot;NSThread方式&quot;&gt;&lt;/a&gt;NSThread方式&lt;/h2&gt;&lt;p&gt;优点:时间比较精确，而且可以用方法取消。缺点:比较繁琐&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {

[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

NSLog(@&amp;quot;启动&amp;quot;);

//NSThread方式的延时执行操作
[self performSelector:@selector(threadEvent:)
           withObject:self
           afterDelay:2.f];

//取消延时执行操作
[NSObject cancelPreviousPerformRequestsWithTarget:self];

}

- (void)threadEvent:(id)sender{
NSLog(@&amp;quot;线程事件&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;GCD方式&quot;&gt;&lt;a href=&quot;#GCD方式&quot; class=&quot;headerlink&quot; title=&quot;GCD方式&quot;&gt;&lt;/a&gt;GCD方式&lt;/h2&gt;&lt;p&gt;优点:简单快捷。缺点:时间不够精确，不能取消。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

NSLog(@&amp;quot;启动&amp;quot;);
//GCD方式的延时执行操作
[GCDQueue executeInMainQueue:^{
    NSLog(@&amp;quot;GCD线程事件&amp;quot;);
} afterDelaySecs:2.f];

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;GCD线程组-管理线程&quot;&gt;&lt;a href=&quot;#GCD线程组-管理线程&quot; class=&quot;headerlink&quot; title=&quot;GCD线程组(管理线程)&quot;&gt;&lt;/a&gt;GCD线程组(管理线程)&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

//初始化线程组合
GCDGroup *group = [[GCDGroup alloc]init];

//创建一个线程队列
GCDQueue *queue = [[GCDQueue alloc]initConcurrent];

//让线程在group中执行线程1
[queue execute:^{
    sleep(1);
    NSLog(@&amp;quot;线程1执行完毕&amp;quot;);
} inGroup:group];

//让线程在group中执行线程2
[queue execute:^{
     sleep(3);
    NSLog(@&amp;quot;线程2执行完毕&amp;quot;);
} inGroup:group];

//监听线程组是否执行结束，然后执行线程3
[queue notify:^{
    NSLog(@&amp;quot;线程3执行完毕&amp;quot;);
} inGroup:group];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;定时器&quot;&gt;&lt;a href=&quot;#定时器&quot; class=&quot;headerlink&quot; title=&quot;定时器&quot;&gt;&lt;/a&gt;定时器&lt;/h1&gt;&lt;h2 id=&quot;GCD定时器&quot;&gt;&lt;a href=&quot;#GCD定时器&quot; class=&quot;headerlink&quot; title=&quot;GCD定时器&quot;&gt;&lt;/a&gt;GCD定时器&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;@interface ViewController ()
@property (nonatomic, strong) GCDTimer *timer;
@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

self.timer = [[GCDTimer alloc] initInQueue:[GCDQueue mainQueue]];
[self.timer event:^{
    NSLog(@&amp;quot;GCD定时器&amp;quot;);
} timeInterval:NSEC_PER_SEC];

[self.timer start];
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;NSTimer定时器&quot;&gt;&lt;a href=&quot;#NSTimer定时器&quot; class=&quot;headerlink&quot; title=&quot;NSTimer定时器&quot;&gt;&lt;/a&gt;NSTimer定时器&lt;/h2&gt;&lt;p&gt;仅运行在当前runloop? 不能用于tableView?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()
@property (nonatomic,strong)NSTimer *normalTimer;
@end

- (void)viewDidLoad {
[super viewDidLoad];   
 self.normalTimer = [NSTimer scheduledTimerWithTimeInterval:1
                                                    target:self
                                                  selector:@selector(timerEvent)
                                                  userInfo:nil
                                                   repeats:YES];
}

- (void)timerEvent{
NSLog(@&amp;quot;NSTimer定时器&amp;quot;);
}    
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;GCD信号量-异步线程转换为同步线程&quot;&gt;&lt;a href=&quot;#GCD信号量-异步线程转换为同步线程&quot; class=&quot;headerlink&quot; title=&quot;GCD信号量- 异步线程转换为同步线程&quot;&gt;&lt;/a&gt;GCD信号量- 异步线程转换为同步线程&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

//必须线程1先执行完，然后再执行完线程2

//创建信号量, 可以将异步线程转化为同步线程
GCDSemaphore * semaphore = [[GCDSemaphore alloc]init];


//线程1 - 异步
[GCDQueue executeInGlobalQueue:^{
    NSLog(@&amp;quot;线程1&amp;quot;);

    //发送信号
    [semaphore signal];

}];

//线程2 - 异步
[GCDQueue executeInGlobalQueue:^{

    //等待信号，这时会堵塞住，不会往下执行，直到接收到信号
    [semaphore wait];

    NSLog(@&amp;quot;线程2&amp;quot;);
}];

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;综合使用-采用GCD逐一下载图片&quot;&gt;&lt;a href=&quot;#综合使用-采用GCD逐一下载图片&quot; class=&quot;headerlink&quot; title=&quot;综合使用:采用GCD逐一下载图片&quot;&gt;&lt;/a&gt;综合使用:采用GCD逐一下载图片&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;
#import &amp;quot;GCD.h&amp;quot;

@interface ViewController ()

@property(nonatomic, strong) UIImageView *view1;
@property(nonatomic, strong) UIImageView *view2;
@property(nonatomic, strong) UIImageView *view3;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

self.view1 = [self createImageViewWithFrame:CGRectMake(0, 0, 100, 100)];
self.view2 = [self createImageViewWithFrame:CGRectMake(100, 0, 100, 100)];
self.view3 = [self createImageViewWithFrame:CGRectMake(200, 0, 100, 100)];

NSString *net1 = @&amp;quot;http://pic.cnitblog.com/avatar/607542/20140226182241.png&amp;quot;;
NSString *net2 = @&amp;quot;http://pic.cnitblog.com/avatar/708810/20141230105233.png&amp;quot;;
NSString *net3 = @&amp;quot;http://pic.cnitblog.com/avatar/704178/20141216150843.png&amp;quot;;

//初始化信号量
GCDSemaphore *semaphore = [[GCDSemaphore alloc]init];


//图片1
[GCDQueue executeInGlobalQueue:^{
    UIImage *image1 = [self accessDataByNetString:net1];

    [GCDQueue executeInMainQueue:^{

        [UIView animateWithDuration:2.f animations:^{
            self.view1.image = image1;
            self.view1.alpha = 1.f;
        } completion:^(BOOL finished) {

            //发送信号
            [semaphore signal];
        }];
    }];
}];

//图片2
[GCDQueue executeInGlobalQueue:^{

    UIImage *image2 = [self accessDataByNetString:net2];

    [semaphore wait];

    [GCDQueue executeInMainQueue:^{

        [UIView animateWithDuration:2.f animations:^{
            self.view2.image = image2;
            self.view2.alpha = 1.f;
        } completion:^(BOOL finished) {

            //发送信号
            [semaphore signal];

        }];
    }];
}];

//图片3
[GCDQueue executeInGlobalQueue:^{

    UIImage *image3 = [self accessDataByNetString:net3];

    [semaphore wait];

    [GCDQueue executeInMainQueue:^{

        [UIView animateWithDuration:2.f animations:^{
            self.view3.image = image3;
            self.view3.alpha = 1.f;
        } completion:^(BOOL finished) {
            //发送信号
            [semaphore signal];            }];
    }];
}];
}

//创建view
- (UIImageView *)createImageViewWithFrame:(CGRect)frame {

UIImageView *imageView = [[UIImageView alloc]initWithFrame:frame];
imageView.alpha = 0.f;
[self.view addSubview:imageView];

return imageView;
}

//获取网络图片
- (UIImage *)accessDataByNetString:(NSString *)string{

NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:string]];

NSData *data = [NSURLConnection sendSynchronousRequest:request
                                 returningResponse:nil
                                             error:nil];

return [UIImage imageWithData:data];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;GCD和NSOperationQueue的区别&quot;&gt;&lt;a href=&quot;#GCD和NSOperationQueue的区别&quot; class=&quot;headerlink&quot; title=&quot;GCD和NSOperationQueue的区别&quot;&gt;&lt;/a&gt;GCD和NSOperationQueue的区别&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;GCD是纯C语言的API，NSOperationQueue是基于GCD的OC版本封装&lt;/li&gt;
&lt;li&gt;GCD只支持FIFO的队列，NSOperationQueue可以很方便的调整执行顺序，设置最大并发数量&lt;/li&gt;
&lt;li&gt;NSOperationQueue可以轻松在Operation间设置依赖关系，而GCD需要写很多的代码才能实现&lt;/li&gt;
&lt;li&gt;NSOperatinQueue支持KVO，可以监测operation是否正在执行(isExecuted)，是否结束(isFinished），是否取消(isCanceled)&lt;/li&gt;
&lt;li&gt;GCD的执行速度比NSOperationQueue快&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总结:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;任务之间不太互相依赖:GCD&lt;/li&gt;
&lt;li&gt;任务之间有依赖\或者要监听任务的执行情况:NSOperationQueue&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;串行队列&quot;&gt;&lt;a href=&quot;#串行队列&quot; class=&quot;headerlink&quot; title=&quot;串行队列&quot;&gt;&lt;/a&gt;串行队列&lt;/h1&gt;&lt;p&gt;串行队列一次只执行一个线程，按照添加到队列的顺序依次执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoa
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS_GCD" scheme="http://jackliu17.github.io/tags/iOS-GCD/"/>
    
  </entry>
  
  <entry>
    <title>Blocks</title>
    <link href="http://jackliu17.github.io/2016/08/02/Blocks/"/>
    <id>http://jackliu17.github.io/2016/08/02/Blocks/</id>
    <published>2016-08-02T05:19:02.000Z</published>
    <updated>2016-08-02T07:31:03.000Z</updated>
    
    <content type="html">&lt;p&gt;原文链接:&lt;a href=&quot;http://wiki.jikexueyuan.com/project/programming-with-objective-c/working-with-blocks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;working with block&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;什么是block&quot;&gt;&lt;a href=&quot;#什么是block&quot; class=&quot;headerlink&quot; title=&quot;什么是block&quot;&gt;&lt;/a&gt;什么是block&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;块是添加在 c，object-c 和 c++ 语言中的语言级别的形式，它允许你编写一个独特的代码段，这个代码段能够在作为值方法和函数中传递。&lt;/li&gt;
&lt;li&gt;块是 object-c 的对象，这意味着他们能够被添加到像NASArray或是NSDictionary的集合中.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;没有参数和返回值的块&quot;&gt;&lt;a href=&quot;#没有参数和返回值的块&quot; class=&quot;headerlink&quot; title=&quot;没有参数和返回值的块&quot;&gt;&lt;/a&gt;没有参数和返回值的块&lt;/h1&gt;&lt;p&gt;定义一个块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;^{
     NSLog(@&amp;quot;This is a block&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;声明块变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void (^simpleBlock)(void);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;块变量赋值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void (^simpleBlock)(void) = ^{
    NSLog(@&amp;quot;This is a block&amp;quot;);
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;块变量赋值的简约形式   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;simpleBlock = ^{
    NSLog(@&amp;quot;This is a block&amp;quot;);
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调用块命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;simpleBlock();
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;有参数和返回值的块&quot;&gt;&lt;a href=&quot;#有参数和返回值的块&quot; class=&quot;headerlink&quot; title=&quot;有参数和返回值的块&quot;&gt;&lt;/a&gt;有参数和返回值的块&lt;/h1&gt;&lt;p&gt;定义一个块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//1.

^ (double firstValue, double secondValue) {
    return firstValue * secondValue;
}

//2.
^ double (double firstValue, double secondValue) {
    return firstValue * secondValue;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;声明块变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;double (^multiplyTwoValues)(double, double);    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调用块命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;double (^multiplyTwoValues)(double, double) =
                          ^(double firstValue, double secondValue) {
                              return firstValue * secondValue;
                          };

double result = multiplyTwoValues(2,4);

NSLog(@&amp;quot;The result is %f&amp;quot;, result);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;块的值域&quot;&gt;&lt;a href=&quot;#块的值域&quot; class=&quot;headerlink&quot; title=&quot;块的值域&quot;&gt;&lt;/a&gt;块的值域&lt;/h1&gt;&lt;p&gt;如果你在一个方法中声明了块，他可以捕捉到任何在方法域中可以访问到的值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)testMethod {
int anInteger = 42;

void (^testBlock)(void) = ^{
    NSLog(@&amp;quot;Integer is: %i&amp;quot;, anInteger);
};

testBlock();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一旦捕获后，即使在捕获后和调用期间改变值，不受影响.块不能够改变初始变量的值，或者是被捕获的值  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int anInteger = 42;

void (^testBlock)(void) = ^{
    NSLog(@&amp;quot;Integer is: %i&amp;quot;, anInteger);
};

anInteger = 84;

testBlock();  

//Integer is: 42 
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;block变量（块变量的改变）&quot;&gt;&lt;a href=&quot;#block变量（块变量的改变）&quot; class=&quot;headerlink&quot; title=&quot;__block变量（块变量的改变）&quot;&gt;&lt;/a&gt;__block变量（块变量的改变）&lt;/h1&gt;&lt;p&gt;变量和块共享存储空间。变量改变，块内的也改变&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;__block int anInteger = 42;

void (^testBlock)(void) = ^{
NSLog(@&amp;quot;Integer is: %i&amp;quot;, anInteger);
};

anInteger = 84;
testBlock(); 

//Integer is：84
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;变量可以在块内被改变&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;__block int anInteger = 42;

void (^testBlock)(void) = ^{
    NSLog(@&amp;quot;Integer is: %i&amp;quot;, anInteger);
    anInteger = 100;
};

testBlock();
NSLog(@&amp;quot;Value of original variable is now: %i&amp;quot;, anInteger); 

//Integer is: 42
//Value of original variable is now: 100  
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;块作为方法或函数的参数&quot;&gt;&lt;a href=&quot;#块作为方法或函数的参数&quot; class=&quot;headerlink&quot; title=&quot;块作为方法或函数的参数&quot;&gt;&lt;/a&gt;块作为方法或函数的参数&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)beginTaskWithCallbackBlock:(void (^)(void))callbackBlock;


- (void)beginTaskWithCallbackBlock:(void (^)(void))callbackBlock {
...
callbackBlock();
}

- (void)doSomethingWithBlock:(void (^)(double, double))block {
...
block(21.0, 2.0);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;块应该总是一个方法的最后一个参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//声明
- (void)beginTaskWithName:(NSString *)name completion:(void(^)(void))callback;

//调用
[self beginTaskWithName:@&amp;quot;MyTask&amp;quot; completion:^{
    NSLog(@&amp;quot;The task is complete&amp;quot;);
}];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;块也用于回调 — 定义了当一个任务结束时将被执行的代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (IBAction)fetchRemoteInformation:(id)sender {
[self showProgressIndicator];

XYZWebTask *task = ...

[task beginTaskWithCallbackBlock:^{
    [self hideProgressIndicator];
}];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;定义块的数据类型&quot;&gt;&lt;a href=&quot;#定义块的数据类型&quot; class=&quot;headerlink&quot; title=&quot;定义块的数据类型&quot;&gt;&lt;/a&gt;定义块的数据类型&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;typedef void (^XYZSimpleBlock)(void);


XYZSimpleBlock anotherBlock = ^{
    ...
};


- (void)beginFetchWithCallbackBlock:(XYZSimpleBlock)callbackBlock {

...
callbackBlock();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该 complexBlock 变量是指一个块需要另一块作为一个参数（ABLOCK）并返回另一个块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void (^(^complexBlock)(void (^)(void)))(void) = ^ (void (^aBlock)(void)) {
...
return ^{
    ...
};
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重写代码使用类型定义使其可读性更高，将块定义成数据类型&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;XYZSimpleBlock (^betterBlock)(XYZSimpleBlock) = ^ (XYZSimpleBlock aBlock) {
...
return ^{
    ...
};
};
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;定义块为属性&quot;&gt;&lt;a href=&quot;#定义块为属性&quot; class=&quot;headerlink&quot; title=&quot;定义块为属性&quot;&gt;&lt;/a&gt;定义块为属性&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;@interface XYZObject : NSObject
@property (copy) void (^blockProperty)(void);  //通常使用copy,why?
@end


self.blockProperty = ^{
    ...
};
self.blockProperty();


使用块属性声明的类型定义

typedef void (^XYZSimpleBlock)(void);

@interface XYZObject : NSObject
@property (copy) XYZSimpleBlock blockProperty;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Avoid-Strong-Reference-Cycles-when-Capturing-self&quot;&gt;&lt;a href=&quot;#Avoid-Strong-Reference-Cycles-when-Capturing-self&quot; class=&quot;headerlink&quot; title=&quot;Avoid Strong Reference Cycles when Capturing self&quot;&gt;&lt;/a&gt;Avoid Strong Reference Cycles when Capturing self&lt;/h1&gt;&lt;p&gt;Blocks maintain strong references to any captured objects, including self, which means that it’s easy to end up with a strong reference cycle。 block对任何捕获的对象是强引用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface XYZBlockKeeper : NSObject
@property (copy) void (^block)(void);
@end

@implementation XYZBlockKeeper
- (void)configureBlock {
self.block = ^{
    [self doSomething];    // capturing a strong reference to self
                           // creates a strong reference cycle
};
}
...
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正确做法如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)configureBlock {
XYZBlockKeeper * __weak weakSelf = self;
self.block = ^{
    [weakSelf doSomething];   // capture the weak reference
                              // to avoid the reference cycle
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By capturing the weak pointer to self, the block won’t maintain a strong relationship back to the XYZBlockKeeper object. If that object is deallocated before the block is called, the weakSelf pointer will simply be set to nil.&lt;/p&gt;
&lt;h1 id=&quot;块可以简化枚举-待阅&quot;&gt;&lt;a href=&quot;#块可以简化枚举-待阅&quot; class=&quot;headerlink&quot; title=&quot;块可以简化枚举 (待阅)&quot;&gt;&lt;/a&gt;块可以简化枚举 (待阅)&lt;/h1&gt;&lt;h1 id=&quot;使用块操作与运行队列-待阅&quot;&gt;&lt;a href=&quot;#使用块操作与运行队列-待阅&quot; class=&quot;headerlink&quot; title=&quot;使用块操作与运行队列 (待阅)&quot;&gt;&lt;/a&gt;使用块操作与运行队列 (待阅)&lt;/h1&gt;&lt;h1 id=&quot;用GCD技术在调度队列调度块-待阅&quot;&gt;&lt;a href=&quot;#用GCD技术在调度队列调度块-待阅&quot; class=&quot;headerlink&quot; title=&quot;用GCD技术在调度队列调度块 (待阅)&quot;&gt;&lt;/a&gt;用GCD技术在调度队列调度块 (待阅)&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接:&lt;a href=&quot;http://wiki.jikexueyuan.com/project/programming-with-objective-c/working-with-blocks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;w
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="objective-C" scheme="http://jackliu17.github.io/tags/objective-C/"/>
    
  </entry>
  
  <entry>
    <title>AFNetworking简介</title>
    <link href="http://jackliu17.github.io/2016/08/01/AFNetworking%E7%AE%80%E4%BB%8B/"/>
    <id>http://jackliu17.github.io/2016/08/01/AFNetworking简介/</id>
    <published>2016-08-01T07:25:21.000Z</published>
    <updated>2016-08-03T11:12:49.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;HTTP请求&quot;&gt;&lt;a href=&quot;#HTTP请求&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求&quot;&gt;&lt;/a&gt;HTTP请求&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;NSString *urlStr = @&amp;quot;http://api.openweathermap.org/data/2.5/forecast/city?id=524901&amp;amp;APPID=bf791ba9eeca14dd22823b4c21ce7e2d&amp;quot;;

AFHTTPRequestOperationManager *manager            = [AFHTTPRequestOperationManager manager];

// 设置回复内容信息
manager.responseSerializer.acceptableContentTypes = [manager.responseSerializer.acceptableContentTypes
                                                     setByAddingObject:@&amp;quot;text/html&amp;quot;];

[manager GET:urlStr
  parameters:nil

     success:^(AFHTTPRequestOperation *operation, id responseObject) {

         //请求正文数据
         //NSLog(@&amp;quot;%@&amp;quot;,responseObject);

         //请求头部信息(我们执行网络请求的时候给服务器发送的信息)
         //NSLog(@&amp;quot;%@&amp;quot;,operation.request.allHTTPHeaderFields);

         //服务器返回的包的头部信息
         NSLog(@&amp;quot;%@&amp;quot;,operation.response);
     }
     failure:^(AFHTTPRequestOperation *operation, NSError *error) {

         NSLog(@&amp;quot;%@&amp;quot;,error);

     }];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;请求方法&quot;&gt;&lt;a href=&quot;#请求方法&quot; class=&quot;headerlink&quot; title=&quot;请求方法&quot;&gt;&lt;/a&gt;请求方法&lt;/h2&gt;&lt;p&gt;(GET、POST等)  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hypertext Transfer Protocol&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 执行POST请求，需要将参数写在parameter处，而不能如同get方法一样直接写在地址栏

[manager POST:@&amp;quot;http://webservice.webxml.com.cn/WebServices/MobileCodeWS.asmx/getMobileCodeInfo&amp;quot;
   parameters:@{@&amp;quot;mobileCode&amp;quot; : @&amp;quot;15910514636&amp;quot;,
                @&amp;quot;userID&amp;quot;     : @&amp;quot;&amp;quot;}
      success:^(AFHTTPRequestOperation *operation, id responseObject) {
          NSLog(@&amp;quot;%@&amp;quot;, responseObject);

      }
      failure:^(AFHTTPRequestOperation *operation, NSError *error) {
          NSLog(@&amp;quot;%@&amp;quot;, error);
      }];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;请求头&quot;&gt;&lt;a href=&quot;#请求头&quot; class=&quot;headerlink&quot; title=&quot;请求头&quot;&gt;&lt;/a&gt;请求头&lt;/h2&gt;&lt;p&gt;(HttpHeaderFields) &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_HTTP_header_fields&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;List of HTTP header fields&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//请求头部信息(我们执行网络请求的时候给服务器发送的信息)
NSLog(@&amp;quot;%@&amp;quot;,operation.request.allHTTPHeaderFields);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;请求正文-数据&quot;&gt;&lt;a href=&quot;#请求正文-数据&quot; class=&quot;headerlink&quot; title=&quot;请求正文 (数据)&quot;&gt;&lt;/a&gt;请求正文 (数据)&lt;/h2&gt;&lt;p&gt;问号后的字符串，使用get方法是可以在地址栏中看见的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSString *urlStr = @&amp;quot;http://api.openweathermap.org/data/2.5/forecast/city?id=524901&amp;amp;APPID=bf791ba9eeca14dd22823b4c21ce7e2d&amp;quot;;            
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;序列化&quot;&gt;&lt;a href=&quot;#序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化&quot;&gt;&lt;/a&gt;序列化&lt;/h2&gt;&lt;p&gt;采用不同的序列化格式，得到不同的response结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AFHTTPRequestOperationManager *manager            = [AFHTTPRequestOperationManager manager];

// 请求的序列化
manager.requestSerializer = [AFHTTPRequestSerializer serializer];

// 回复序列化

//responseObject就变成二进制文件
manager.responseSerializer[AFHTTPResponseSerializer serializer];

//responseObject就变成JSON格式
manager.responseSerializer = [AFJSONResponseSerializer serializer];

//responseObject成为xml格式
manager.responseSerializer = [AFXMLParserResponseSerializer serializer];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;上传文件&quot;&gt;&lt;a href=&quot;#上传文件&quot; class=&quot;headerlink&quot; title=&quot;上传文件&quot;&gt;&lt;/a&gt;上传文件&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;// 获取数据
UIImage *image  = [UIImage imageNamed:@&amp;quot;demo&amp;quot;];
NSData *dataObj = UIImageJPEGRepresentation(image, 1.0);

// 参数
NSDictionary *paras = @{@&amp;quot;ContactName&amp;quot;        : @&amp;quot;Lilis&amp;quot;,
                        @&amp;quot;ContactPhoneNumber&amp;quot; : @&amp;quot;15910514635&amp;quot;,
                        @&amp;quot;LoseDetail&amp;quot;         : @&amp;quot;...&amp;quot;,
                        @&amp;quot;address&amp;quot;            : @&amp;quot;&amp;quot;,
                        @&amp;quot;gender&amp;quot;             : @&amp;quot;2&amp;quot;,
                        @&amp;quot;verify&amp;quot;             : @&amp;quot;012460&amp;quot;};


[Networking UploadDataWithUrlString:BASE_URL // 请更换网址
                         parameters:paras
                    timeoutInterval:nil
                        requestType:HTTPRequestType
                       responseType:JSONResponseType
          constructingBodyWithBlock:^(id&amp;lt;AFMultipartFormData&amp;gt; formData) {
              // 构造数据的地方
              [formData appendPartWithFileData:dataObj name:@&amp;quot;upload&amp;quot; fileName:@&amp;quot;image1.jpg&amp;quot; mimeType:@&amp;quot;&amp;quot;];
              [formData appendPartWithFileData:dataObj name:@&amp;quot;upload&amp;quot; fileName:@&amp;quot;image2.jpg&amp;quot; mimeType:@&amp;quot;&amp;quot;];
          }
                            success:^(AFHTTPRequestOperation *operation, id responseObject) {

                                // 请求头
                                NSLog(@&amp;quot;%@&amp;quot;, operation.request.allHTTPHeaderFields);

                                // 服务器回复的头
                                NSLog(@&amp;quot;%@&amp;quot;, operation.response);

                                NSLog(@&amp;quot;%@&amp;quot;, responseObject);
                            }
                            failure:^(AFHTTPRequestOperation *operation, NSError *error) {


                            }];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;断点下载&quot;&gt;&lt;a href=&quot;#断点下载&quot; class=&quot;headerlink&quot; title=&quot;断点下载&quot;&gt;&lt;/a&gt;断点下载&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:@&amp;quot;http://c.hiphotos.baidu.com/image/pic/item/f3d3572c11dfa9ec78e256df60d0f703908fc12e.jpg&amp;quot;]];
AFDownloadRequestOperation *operation = [[AFDownloadRequestOperation alloc] initWithRequest:request
                                                                             fileIdentifier:@&amp;quot;fuck.jpg&amp;quot;
                                                                                 targetPath:[NSHomeDirectory() stringByAppendingPathComponent:@&amp;quot;/Library/Caches/fuck.jpg&amp;quot;]
                                                                               shouldResume:YES];
operation.shouldOverwrite = YES;


// 开始下载
[operation start];

// 2s后暂停
[GCDQueue executeInMainQueue:^{
    NSLog(@&amp;quot;暂停&amp;quot;);
    [operation pause];
} afterDelaySecs:2.f];

// 4s后继续恢复
[GCDQueue executeInMainQueue:^{
    NSLog(@&amp;quot;开始&amp;quot;);
    [operation resume];
} afterDelaySecs:4.f];

// 查看下载进度
[operation setProgressiveDownloadProgressBlock:^(AFDownloadRequestOperation *operation, NSInteger bytesRead, long long totalBytesRead, long long totalBytesExpected, long long totalBytesReadForFile, long long totalBytesExpectedToReadForFile) {

    CGFloat percent = (float)totalBytesReadForFile / (float)totalBytesExpectedToReadForFile;
    NSLog(@&amp;quot;百分比:%.3f%% %ld  %lld  %lld  %lld&amp;quot;, percent * 100, (long)bytesRead, totalBytesRead, totalBytesReadForFile, totalBytesExpectedToReadForFile);
}];

// 结束block
[operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) {

    NSLog(@&amp;quot;下载成功 %@&amp;quot;, responseObject);

} failure:^(AFHTTPRequestOperation *operation, NSError *error) {

    NSLog(@&amp;quot;下载失败 %@&amp;quot;, error);

}];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;监听网络&quot;&gt;&lt;a href=&quot;#监听网络&quot; class=&quot;headerlink&quot; title=&quot;监听网络&quot;&gt;&lt;/a&gt;监听网络&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {

// 开启网络指示器
[[AFNetworkActivityIndicatorManager sharedManager] setEnabled:YES];

NSURL *url = [NSURL URLWithString:@&amp;quot;http://baidu.com&amp;quot;];

AFHTTPRequestOperationManager *manager = [[AFHTTPRequestOperationManager alloc] initWithBaseURL:url];
NSOperationQueue *operationQueue       = manager.operationQueue;

[manager.reachabilityManager setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {

    switch (status) {
        case AFNetworkReachabilityStatusReachableViaWWAN:
        case AFNetworkReachabilityStatusReachableViaWiFi:

            [operationQueue setSuspended:NO];

            NSLog(@&amp;quot;有网络&amp;quot;);

            break;

        case AFNetworkReachabilityStatusNotReachable:
        default:

            [operationQueue setSuspended:YES];

            NSLog(@&amp;quot;无网络&amp;quot;);

            break;
    }

}];

// 开始监听
[manager.reachabilityManager startMonitoring];

return YES;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;下载图片（Category）&quot;&gt;&lt;a href=&quot;#下载图片（Category）&quot; class=&quot;headerlink&quot; title=&quot;下载图片（Category）&quot;&gt;&lt;/a&gt;下载图片（Category）&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;
#import &amp;quot;AFNetworking.h&amp;quot;
#import &amp;quot;UIKit+AFNetworking.h&amp;quot;
@interface ViewController ()

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

UIImageView *imageView = [[UIImageView alloc] initWithFrame:self.view.bounds];
[self.view addSubview:imageView];

// 加载图片
[imageView setImageWithURL:[NSURL URLWithString:@&amp;quot;http://c.hiphotos.baidu.com/image/pic/item/f3d3572c11dfa9ec78e256df60d0f703908fc12e.jpg&amp;quot;]
          placeholderImage:nil];
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP请求&quot;&gt;&lt;a href=&quot;#HTTP请求&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求&quot;&gt;&lt;/a&gt;HTTP请求&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;NSString *urlStr = @&amp;quot;http://api.openweath
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS_networking" scheme="http://jackliu17.github.io/tags/iOS-networking/"/>
    
  </entry>
  
  <entry>
    <title>手机屏幕图像尺寸说明</title>
    <link href="http://jackliu17.github.io/2016/07/29/%E6%89%8B%E6%9C%BA%E5%B1%8F%E5%B9%95%E5%9B%BE%E5%83%8F%E5%B0%BA%E5%AF%B8%E8%AF%B4%E6%98%8E/"/>
    <id>http://jackliu17.github.io/2016/07/29/手机屏幕图像尺寸说明/</id>
    <published>2016-07-29T06:41:29.000Z</published>
    <updated>2016-08-15T06:23:18.000Z</updated>
    
    <content type="html">&lt;p&gt;其他都当放屁，只要记住一点，iphone设计稿以640&lt;em&gt;1136像素做（我一般使用750&lt;/em&gt;1334），android设计稿以1080&lt;em&gt;1920像素做，余下的尺寸，开发会自己去做适配，不需要你再出设计稿。切图的话，需要切一份1倍和一份2倍的。设计稿上图形元素，如图标，线条，色块，全部用矢量图形的做，不要用像素位图，以免&lt;/em&gt;2后模糊。&lt;/p&gt;
&lt;h1 id=&quot;分辨率&quot;&gt;&lt;a href=&quot;#分辨率&quot; class=&quot;headerlink&quot; title=&quot;分辨率&quot;&gt;&lt;/a&gt;分辨率&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/kv8kxm9prub5bsx/MobileImageSize1.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;屏幕尺寸&quot;&gt;&lt;a href=&quot;#屏幕尺寸&quot; class=&quot;headerlink&quot; title=&quot;屏幕尺寸&quot;&gt;&lt;/a&gt;屏幕尺寸&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/prqfsl2tl84m01l/MobileImageSize2.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;像素密度&quot;&gt;&lt;a href=&quot;#像素密度&quot; class=&quot;headerlink&quot; title=&quot;像素密度&quot;&gt;&lt;/a&gt;像素密度&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ybjgllir4rb1xie/MobileImageSize3.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/x7jmtbnkqptdxhl/MobileImageSize4.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;逻辑像素与物理像素&quot;&gt;&lt;a href=&quot;#逻辑像素与物理像素&quot; class=&quot;headerlink&quot; title=&quot;逻辑像素与物理像素&quot;&gt;&lt;/a&gt;逻辑像素与物理像素&lt;/h1&gt;&lt;p&gt;苹果引进一个逻辑像素的概念(pt)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/vjhiwkcwwvjxbyv/MobileImageSize5.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/kve933ie18u0o04/MobileImageSize6.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/75nt73meb7zfica/MobileImageSize7.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;iPhone手机尺寸&quot;&gt;&lt;a href=&quot;#iPhone手机尺寸&quot; class=&quot;headerlink&quot; title=&quot;iPhone手机尺寸&quot;&gt;&lt;/a&gt;iPhone手机尺寸&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/mgwnsz022fn7n1e/MobileImageSize8.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/b4zff1iwnm9jknd/MobileImageSize9.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Android手机尺寸&quot;&gt;&lt;a href=&quot;#Android手机尺寸&quot; class=&quot;headerlink&quot; title=&quot;Android手机尺寸&quot;&gt;&lt;/a&gt;Android手机尺寸&lt;/h1&gt;&lt;p&gt;Android引进一个逻辑像素概念(dp)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/1r6tqvm5t0vp2sa/MobileImageSize10.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/bgoe3jpr14a9oh8/MobileImageSize11.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/lmrademl1wb6p1i/MobileImageSize12.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/3sz0oyx2rmdo8ob/MobileImageSize13.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;其他都当放屁，只要记住一点，iphone设计稿以640&lt;em&gt;1136像素做（我一般使用750&lt;/em&gt;1334），android设计稿以1080&lt;em&gt;1920像素做，余下的尺寸，开发会自己去做适配，不需要你再出设计稿。切图的话，需要切一份1倍和一份2倍的。设计稿上图形元
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="UI" scheme="http://jackliu17.github.io/tags/UI/"/>
    
  </entry>
  
</feed>
