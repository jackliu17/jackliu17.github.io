<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cowboy Tech</title>
  <subtitle>The best preparation for tomorrow is doing your best today</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jackliu17.github.io/"/>
  <updated>2016-08-10T11:17:37.000Z</updated>
  <id>http://jackliu17.github.io/</id>
  
  <author>
    <name>Jack Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS界面动画教程之自动布局</title>
    <link href="http://jackliu17.github.io/2016/08/09/iOS%E7%95%8C%E9%9D%A2%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80/"/>
    <id>http://jackliu17.github.io/2016/08/09/iOS界面动画教程之自动布局/</id>
    <published>2016-08-09T02:23:30.000Z</published>
    <updated>2016-08-10T11:17:37.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/n1xwivjmrxpo7cj/20160809_autoLayout18.png?dl=1&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h1 id=&quot;为view设置约束&quot;&gt;&lt;a href=&quot;#为view设置约束&quot; class=&quot;headerlink&quot; title=&quot;为view设置约束&quot;&gt;&lt;/a&gt;为view设置约束&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ca23zlj8lh2agvk/20160809_autoLayout1.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/0qk6ha5s8r9x5tn/20160809_autoLayout2.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;为标签设置约束-相对父视图&quot;&gt;&lt;a href=&quot;#为标签设置约束-相对父视图&quot; class=&quot;headerlink&quot; title=&quot;为标签设置约束(相对父视图)&quot;&gt;&lt;/a&gt;为标签设置约束(相对父视图)&lt;/h1&gt;&lt;h2 id=&quot;水平居中-垂直居中&quot;&gt;&lt;a href=&quot;#水平居中-垂直居中&quot; class=&quot;headerlink&quot; title=&quot;水平居中+垂直居中&quot;&gt;&lt;/a&gt;水平居中+垂直居中&lt;/h2&gt;&lt;p&gt;press it with drag to view&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/10i3o2mha5xocyp/20160809_autoLayout3.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;橘黄线条意味着与实际显示有差异&quot;&gt;&lt;a href=&quot;#橘黄线条意味着与实际显示有差异&quot; class=&quot;headerlink&quot; title=&quot;橘黄线条意味着与实际显示有差异&quot;&gt;&lt;/a&gt;橘黄线条意味着与实际显示有差异&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;橘黄实线。当前位置&lt;/li&gt;
&lt;li&gt;橘黄虚线。应该所在的位置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/jltvu1edtfhz5s6/20160809_autoLayout4.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;标签下移5pt&quot;&gt;&lt;a href=&quot;#标签下移5pt&quot; class=&quot;headerlink&quot; title=&quot;标签下移5pt&quot;&gt;&lt;/a&gt;标签下移5pt&lt;/h2&gt;&lt;p&gt;在约束里的constant里修改&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/y72cps6ccje1325/20160809_autoLayout5.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;为菜单按钮设置约束&quot;&gt;&lt;a href=&quot;#为菜单按钮设置约束&quot; class=&quot;headerlink&quot; title=&quot;为菜单按钮设置约束&quot;&gt;&lt;/a&gt;为菜单按钮设置约束&lt;/h1&gt;&lt;h2 id=&quot;相对父视图的右侧间隔&quot;&gt;&lt;a href=&quot;#相对父视图的右侧间隔&quot; class=&quot;headerlink&quot; title=&quot;相对父视图的右侧间隔&quot;&gt;&lt;/a&gt;相对父视图的右侧间隔&lt;/h2&gt;&lt;p&gt;press it with drag to view&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/1ylpl0li28jx67l/20160809_autoLayout6.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;与标签水平对齐&quot;&gt;&lt;a href=&quot;#与标签水平对齐&quot; class=&quot;headerlink&quot; title=&quot;与标签水平对齐&quot;&gt;&lt;/a&gt;与标签水平对齐&lt;/h2&gt;&lt;p&gt;press it with drag to label&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/lavmxyhn4semuej/20160809_autoLayout7.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;更新frame&quot;&gt;&lt;a href=&quot;#更新frame&quot; class=&quot;headerlink&quot; title=&quot;更新frame&quot;&gt;&lt;/a&gt;更新frame&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/a6lgyr1mb8keawr/20160809_autoLayout8.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;为tableView设置约束&quot;&gt;&lt;a href=&quot;#为tableView设置约束&quot; class=&quot;headerlink&quot; title=&quot;为tableView设置约束&quot;&gt;&lt;/a&gt;为tableView设置约束&lt;/h1&gt;&lt;h2 id=&quot;四周边界&quot;&gt;&lt;a href=&quot;#四周边界&quot; class=&quot;headerlink&quot; title=&quot;四周边界&quot;&gt;&lt;/a&gt;四周边界&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/5uongq74a0uifgv/20160809_autoLayout9.png?dl=1&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h2 id=&quot;更新frame-1&quot;&gt;&lt;a href=&quot;#更新frame-1&quot; class=&quot;headerlink&quot; title=&quot;更新frame&quot;&gt;&lt;/a&gt;更新frame&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/eotshq0z0nwgfkt/20160809_autoLayout10.png?dl=1&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h1 id=&quot;拖入tableViewCell并设置id&quot;&gt;&lt;a href=&quot;#拖入tableViewCell并设置id&quot; class=&quot;headerlink&quot; title=&quot;拖入tableViewCell并设置id&quot;&gt;&lt;/a&gt;拖入tableViewCell并设置id&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/j078za7g3o05mg5/20160809_autoLayout11.png?dl=1&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h1 id=&quot;IB约束与代码中的关联&quot;&gt;&lt;a href=&quot;#IB约束与代码中的关联&quot; class=&quot;headerlink&quot; title=&quot;IB约束与代码中的关联&quot;&gt;&lt;/a&gt;IB约束与代码中的关联&lt;/h1&gt;&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;@IBOutlet var menuHeightConstraint:NSLayoutConstraint!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;p&gt;点击菜单view –&amp;gt;选择右侧的高度约束 –&amp;gt;选择其connect属性 –&amp;gt;drag new reference outlet to ViewController&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/jcz8x68k8sh7liz/20160809_autoLayout13.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/tx17tkjf0rcjq59/20160809_autoLayout14.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;打印所有约束&quot;&gt;&lt;a href=&quot;#打印所有约束&quot; class=&quot;headerlink&quot; title=&quot;打印所有约束&quot;&gt;&lt;/a&gt;打印所有约束&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;@IBAction func actionToggleMenu(sender: AnyObject) {

    //打印所有约束
    for con in titleLabel.superview!.constraints {
        print(&amp;quot; -&amp;gt; \(con.description) &amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/vejtc2uuktrc84v/20160809_autoLayout15.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;为IB中的约束设置Id&quot;&gt;&lt;a href=&quot;#为IB中的约束设置Id&quot; class=&quot;headerlink&quot; title=&quot;为IB中的约束设置Id&quot;&gt;&lt;/a&gt;为IB中的约束设置Id&lt;/h1&gt;&lt;p&gt;选择对应的约束 –&amp;gt; 在Identifier里设置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/kemvryq6cwvn6nv/20160809_autoLayout16.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/iot5t0r1u1wlkod/20160809_autoLayout17.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Pin设置约束：使用pin设置的约束是。Spacing to nearest neighbor。与最近的UI元素间隔&lt;/li&gt;
&lt;li&gt;使用auto layout，不能在代码里设置bounds,frame等属性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/5lrdyqzox1pg4tw/20160810_NSLayoutConstraints1.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/nond7i23od9a8kh/20160810_NSLayoutConstraints2.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/paeysc5vf4945om/20160810_NSLayoutConstraints3.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/hgiy434fmsdl4aq/20160810_NSLayoutConstraints4.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/h8uvd9gy6s3cmsb/20160810_NSLayoutConstraints5.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/n1xwivjmrxpo7cj/20160809_autoL
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="UI" scheme="http://jackliu17.github.io/tags/UI/"/>
    
      <category term="iOS_animation" scheme="http://jackliu17.github.io/tags/iOS-animation/"/>
    
  </entry>
  
  <entry>
    <title>2016年8月7日</title>
    <link href="http://jackliu17.github.io/2016/08/07/2016%E5%B9%B48%E6%9C%887%E6%97%A5/"/>
    <id>http://jackliu17.github.io/2016/08/07/2016年8月7日/</id>
    <published>2016-08-07T10:38:31.000Z</published>
    <updated>2016-08-07T11:00:37.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;学习&quot;&gt;&lt;a href=&quot;#学习&quot; class=&quot;headerlink&quot; title=&quot;学习&quot;&gt;&lt;/a&gt;学习&lt;/h1&gt;&lt;h2 id=&quot;罗辑思维：黄执中-你如何听懂我说的话&quot;&gt;&lt;a href=&quot;#罗辑思维：黄执中-你如何听懂我说的话&quot; class=&quot;headerlink&quot; title=&quot;罗辑思维：黄执中 - 你如何听懂我说的话&quot;&gt;&lt;/a&gt;罗辑思维：黄执中 - 你如何听懂我说的话&lt;/h2&gt;&lt;p&gt;黄执中是辩论界的大神，听他的课还是有些收获的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简单。尽可能精简自己的语句，用最生动的故事或例子来表达。比如肯尼迪对太空工业的表达”将人送上去，将人带回来”。太过于空洞的套话是无效传递。&lt;/li&gt;
&lt;li&gt;意外。一个人会对他人的言语表达下意识的进行预测，自身的意见会因为意外而产生反思，因为惊吓而会产生改变。例如: 我们顾客至上的理念的诠释:他来我们店里成功退货一条围巾，即使我们没有卖这种围巾。愤怒的时候，会让人自信，会对自身的论据信心满满，会很固执，但这样是说服不了别人的。要成功的说服别人，需要做到两点: 1. 要有另人意外的观点，能引起关注。2. 要让他有内在信服。(外在信服是大众公认的，内在信服是自身体验的，如NBA新星球员对艾滋病预防培训的案例)&lt;/li&gt;
&lt;li&gt;具体。具体的细节能让人产生深刻的印象。例如法庭上的两种证词: 妈妈很爱她，每晚陪她用小猫牙刷刷牙 / 每晚陪她刷牙。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;学习&quot;&gt;&lt;a href=&quot;#学习&quot; class=&quot;headerlink&quot; title=&quot;学习&quot;&gt;&lt;/a&gt;学习&lt;/h1&gt;&lt;h2 id=&quot;罗辑思维：黄执中-你如何听懂我说的话&quot;&gt;&lt;a href=&quot;#罗辑思维：黄执中-你如何听懂我说的话&quot; class=&quot;headerli
    
    </summary>
    
      <category term="情感杂谈" scheme="http://jackliu17.github.io/categories/%E6%83%85%E6%84%9F%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>AdaptiveLayout设计用户界面</title>
    <link href="http://jackliu17.github.io/2016/08/07/AdaptiveLayout%E8%AE%BE%E8%AE%A1%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/"/>
    <id>http://jackliu17.github.io/2016/08/07/AdaptiveLayout设计用户界面/</id>
    <published>2016-08-07T05:02:22.000Z</published>
    <updated>2016-08-09T01:46:22.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;使用Adaptive-Layout&quot;&gt;&lt;a href=&quot;#使用Adaptive-Layout&quot; class=&quot;headerlink&quot; title=&quot;使用Adaptive Layout&quot;&gt;&lt;/a&gt;使用Adaptive Layout&lt;/h1&gt;&lt;h2 id=&quot;Device里选择Universal&quot;&gt;&lt;a href=&quot;#Device里选择Universal&quot; class=&quot;headerlink&quot; title=&quot;Device里选择Universal&quot;&gt;&lt;/a&gt;Device里选择Universal&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/px81xxqmt4opae6/20160807_adaptive1.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;AutoLayout基本布局和SizeClasses的个别调整&quot;&gt;&lt;a href=&quot;#AutoLayout基本布局和SizeClasses的个别调整&quot; class=&quot;headerlink&quot; title=&quot;AutoLayout基本布局和SizeClasses的个别调整&quot;&gt;&lt;/a&gt;AutoLayout基本布局和SizeClasses的个别调整&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ttx2r0rlsz7lkfe/20160807_adaptive2.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;设置初始约束&quot;&gt;&lt;a href=&quot;#设置初始约束&quot; class=&quot;headerlink&quot; title=&quot;设置初始约束&quot;&gt;&lt;/a&gt;设置初始约束&lt;/h1&gt;&lt;h2 id=&quot;为ImageView设置约束&quot;&gt;&lt;a href=&quot;#为ImageView设置约束&quot; class=&quot;headerlink&quot; title=&quot;为ImageView设置约束&quot;&gt;&lt;/a&gt;为ImageView设置约束&lt;/h2&gt;&lt;h3 id=&quot;约束1：水平居中&quot;&gt;&lt;a href=&quot;#约束1：水平居中&quot; class=&quot;headerlink&quot; title=&quot;约束1：水平居中&quot;&gt;&lt;/a&gt;约束1：水平居中&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/fcv3tds5qp51qo9/20160807_adaptive3.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;约束2：顶部置顶-含电池边距&quot;&gt;&lt;a href=&quot;#约束2：顶部置顶-含电池边距&quot; class=&quot;headerlink&quot; title=&quot;约束2：顶部置顶(含电池边距)&quot;&gt;&lt;/a&gt;约束2：顶部置顶(含电池边距)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/is0gh2p27vr6dhs/20160807_adaptive4.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;约束3：与下方view的垂直高度&quot;&gt;&lt;a href=&quot;#约束3：与下方view的垂直高度&quot; class=&quot;headerlink&quot; title=&quot;约束3：与下方view的垂直高度&quot;&gt;&lt;/a&gt;约束3：与下方view的垂直高度&lt;/h3&gt;&lt;p&gt;按住imageview + ctrl 拖向下方的view，选择vertical spacing&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/276deqb1udpey1i/20160807_adaptive5.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击image view，在右侧可以看见已经设定的约束,Edit vertical spacing to 20&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/fuazugw3fjk3xjw/20160807_adaptive20.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;约束4：与父视图的关系-高度40&quot;&gt;&lt;a href=&quot;#约束4：与父视图的关系-高度40&quot; class=&quot;headerlink&quot; title=&quot;约束4：与父视图的关系-高度40%&quot;&gt;&lt;/a&gt;约束4：与父视图的关系-高度40%&lt;/h3&gt;&lt;p&gt;ctrl + 按住image view 拖向view,设定其与父视图的关系&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/m7ef3ambbfckb0q/20160807_adaptive13.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ysfu2ds12yi4upl/20160807_adaptive14.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;为view设置约束&quot;&gt;&lt;a href=&quot;#为view设置约束&quot; class=&quot;headerlink&quot; title=&quot;为view设置约束&quot;&gt;&lt;/a&gt;为view设置约束&lt;/h2&gt;&lt;h3 id=&quot;左-中-下&quot;&gt;&lt;a href=&quot;#左-中-下&quot; class=&quot;headerlink&quot; title=&quot;左 + 中 + 下&quot;&gt;&lt;/a&gt;左 + 中 + 下&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/op5hztvdwsyy4tf/20160807_adaptive6.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ImageSet为项目添加相关图片&quot;&gt;&lt;a href=&quot;#ImageSet为项目添加相关图片&quot; class=&quot;headerlink&quot; title=&quot;ImageSet为项目添加相关图片&quot;&gt;&lt;/a&gt;ImageSet为项目添加相关图片&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/zqks25yybeid6us/20160807_adaptive8.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;双击后为图片组更名&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/rhgz1ine9uhtykg/20160807_adaptive9.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;更新frame让约束生效&quot;&gt;&lt;a href=&quot;#更新frame让约束生效&quot; class=&quot;headerlink&quot; title=&quot;更新frame让约束生效&quot;&gt;&lt;/a&gt;更新frame让约束生效&lt;/h2&gt;&lt;p&gt;橘红色的是可以调整的，红色的是有问题的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/zgrlxmwrngcq21h/20160807_adaptive10.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;预览功能查看不同设备屏幕&quot;&gt;&lt;a href=&quot;#预览功能查看不同设备屏幕&quot; class=&quot;headerlink&quot; title=&quot;预览功能查看不同设备屏幕&quot;&gt;&lt;/a&gt;预览功能查看不同设备屏幕&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ojpckspdj8bo45g/20160807_adaptive11.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/quy3ojxr8jlpzw1/20160807_adaptive12.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;为label1设定约束&quot;&gt;&lt;a href=&quot;#为label1设定约束&quot; class=&quot;headerlink&quot; title=&quot;为label1设定约束&quot;&gt;&lt;/a&gt;为label1设定约束&lt;/h2&gt;&lt;h3 id=&quot;水平居中&quot;&gt;&lt;a href=&quot;#水平居中&quot; class=&quot;headerlink&quot; title=&quot;水平居中&quot;&gt;&lt;/a&gt;水平居中&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/u8sluq2j9wyhmnj/20160807_adaptive15.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;顶部置顶&quot;&gt;&lt;a href=&quot;#顶部置顶&quot; class=&quot;headerlink&quot; title=&quot;顶部置顶&quot;&gt;&lt;/a&gt;顶部置顶&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/3wxg7vm8gf7avwb/20160807_adaptive16.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;为label2设定约束&quot;&gt;&lt;a href=&quot;#为label2设定约束&quot; class=&quot;headerlink&quot; title=&quot;为label2设定约束&quot;&gt;&lt;/a&gt;为label2设定约束&lt;/h2&gt;&lt;h3 id=&quot;水平居中-1&quot;&gt;&lt;a href=&quot;#水平居中-1&quot; class=&quot;headerlink&quot; title=&quot;水平居中&quot;&gt;&lt;/a&gt;水平居中&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/a5orqx2vb626l1i/20160807_adaptive17.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;下部间隔&quot;&gt;&lt;a href=&quot;#下部间隔&quot; class=&quot;headerlink&quot; title=&quot;下部间隔&quot;&gt;&lt;/a&gt;下部间隔&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/89ypns9m1muwtag/20160807_adaptive18.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;更新frame让约束生效-1&quot;&gt;&lt;a href=&quot;#更新frame让约束生效-1&quot; class=&quot;headerlink&quot; title=&quot;更新frame让约束生效&quot;&gt;&lt;/a&gt;更新frame让约束生效&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/er9295gpjdftvo5/20160807_adaptive19.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Size-Classes的使用&quot;&gt;&lt;a href=&quot;#Size-Classes的使用&quot; class=&quot;headerlink&quot; title=&quot;Size Classes的使用&quot;&gt;&lt;/a&gt;Size Classes的使用&lt;/h1&gt;&lt;h2 id=&quot;两种尺寸组合表达所有设备-Regular-and-Compact&quot;&gt;&lt;a href=&quot;#两种尺寸组合表达所有设备-Regular-and-Compact&quot; class=&quot;headerlink&quot; title=&quot;两种尺寸组合表达所有设备: Regular and Compact&quot;&gt;&lt;/a&gt;两种尺寸组合表达所有设备: Regular and Compact&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/u2gdmu6k1d8gksd/20160807_sizeClass.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;构建iPhone-landscape-size-Class&quot;&gt;&lt;a href=&quot;#构建iPhone-landscape-size-Class&quot; class=&quot;headerlink&quot; title=&quot;构建iPhone landscape size Class&quot;&gt;&lt;/a&gt;构建iPhone landscape size Class&lt;/h2&gt;&lt;p&gt;点击下方的”W any H any”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/lp1del2ve1g92r7/20160807_adaptive21.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/1mb2xqh4xsit8w6/20160807_adaptive22.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;重设image-view约束-仅在该sizeClass&quot;&gt;&lt;a href=&quot;#重设image-view约束-仅在该sizeClass&quot; class=&quot;headerlink&quot; title=&quot;重设image view约束(仅在该sizeClass)&quot;&gt;&lt;/a&gt;重设image view约束(仅在该sizeClass)&lt;/h2&gt;&lt;h3 id=&quot;卸载所有约束&quot;&gt;&lt;a href=&quot;#卸载所有约束&quot; class=&quot;headerlink&quot; title=&quot;卸载所有约束&quot;&gt;&lt;/a&gt;卸载所有约束&lt;/h3&gt;&lt;p&gt;点击image view，在右侧删除所有约束 - （只是在这个size class里uninstalling ）&lt;br&gt;&lt;img src=&quot;https://www.dropbox.com/s/j8diywf0anrlric/20160807_adaptive23.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/gsm084vyj5aw8uc/20160807_adaptive24.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/zskuue3ap4eri39/20160807_adaptive25.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;将所有约束删除&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/698wfvuerw06ue3/20160807_adaptive26.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;新约束1-垂直居中&quot;&gt;&lt;a href=&quot;#新约束1-垂直居中&quot; class=&quot;headerlink&quot; title=&quot;新约束1:垂直居中&quot;&gt;&lt;/a&gt;新约束1:垂直居中&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/e9md11gwb2e1z7b/20160807_adaptive27.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;新约束2-左间隔10&quot;&gt;&lt;a href=&quot;#新约束2-左间隔10&quot; class=&quot;headerlink&quot; title=&quot;新约束2:左间隔10&quot;&gt;&lt;/a&gt;新约束2:左间隔10&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/at6xdz1d14j04kh/20160807_adaptive28.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;新约束3-与父视图的宽度比例为40&quot;&gt;&lt;a href=&quot;#新约束3-与父视图的宽度比例为40&quot; class=&quot;headerlink&quot; title=&quot;新约束3:与父视图的宽度比例为40%&quot;&gt;&lt;/a&gt;新约束3:与父视图的宽度比例为40%&lt;/h3&gt;&lt;p&gt;ctrl拖动到父视图view，设置宽度比例&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/7fm6lqc1kvhqtu9/20160807_adaptive29.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/nbrng2hh4j6hmm6/20160807_adaptive30.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;重设TextContainer约束-仅在该sizeClass&quot;&gt;&lt;a href=&quot;#重设TextContainer约束-仅在该sizeClass&quot; class=&quot;headerlink&quot; title=&quot;重设TextContainer约束(仅在该sizeClass)&quot;&gt;&lt;/a&gt;重设TextContainer约束(仅在该sizeClass)&lt;/h2&gt;&lt;h3 id=&quot;卸载约束&quot;&gt;&lt;a href=&quot;#卸载约束&quot; class=&quot;headerlink&quot; title=&quot;卸载约束&quot;&gt;&lt;/a&gt;卸载约束&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/7xxgxvse0a9jhdp/20160807_adaptive31.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;设定与父视图的顶部间距和宽度比例&quot;&gt;&lt;a href=&quot;#设定与父视图的顶部间距和宽度比例&quot; class=&quot;headerlink&quot; title=&quot;设定与父视图的顶部间距和宽度比例&quot;&gt;&lt;/a&gt;设定与父视图的顶部间距和宽度比例&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/c5ef55gf4riqlir/20160807_adaptive32.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/4c9wlje6hqr8a39/20160807_adaptive33.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/of9a0fnkofgvw24/20160807_adaptive34.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;更新Frame&quot;&gt;&lt;a href=&quot;#更新Frame&quot; class=&quot;headerlink&quot; title=&quot;更新Frame&quot;&gt;&lt;/a&gt;更新Frame&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ou0qkqjww0zxpyf/20160807_adaptive35.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;在故事板中设置自适应字体&quot;&gt;&lt;a href=&quot;#在故事板中设置自适应字体&quot; class=&quot;headerlink&quot; title=&quot;在故事板中设置自适应字体&quot;&gt;&lt;/a&gt;在故事板中设置自适应字体&lt;/h1&gt;&lt;h2 id=&quot;回到Any界面-w-h&quot;&gt;&lt;a href=&quot;#回到Any界面-w-h&quot; class=&quot;headerlink&quot; title=&quot;回到Any界面(w+h)&quot;&gt;&lt;/a&gt;回到Any界面(w+h)&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/i5nn0nh63yfzkda/20160807_adaptive36.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置某个size-class类别下的字体&quot;&gt;&lt;a href=&quot;#设置某个size-class类别下的字体&quot; class=&quot;headerlink&quot; title=&quot;设置某个size class类别下的字体&quot;&gt;&lt;/a&gt;设置某个size class类别下的字体&lt;/h2&gt;&lt;p&gt;点击字体旁的 + 按钮&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/dlcyxnxaoyb71ho/20160807_adaptive37.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/xbz1zln8m1d2uoy/20160807_adaptive38.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置字体能自动缩小50&quot;&gt;&lt;a href=&quot;#设置字体能自动缩小50&quot; class=&quot;headerlink&quot; title=&quot;设置字体能自动缩小50%&quot;&gt;&lt;/a&gt;设置字体能自动缩小50%&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/s9a8ba0ja9gxae1/20160807_adaptive39.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置label与父视图的约束&quot;&gt;&lt;a href=&quot;#设置label与父视图的约束&quot; class=&quot;headerlink&quot; title=&quot;设置label与父视图的约束&quot;&gt;&lt;/a&gt;设置label与父视图的约束&lt;/h2&gt;&lt;p&gt;避免标签的尺寸超出父视图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/0msqdq39diijzsh/20160807_adaptive40.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;设置适配不同设备的图片&quot;&gt;&lt;a href=&quot;#设置适配不同设备的图片&quot; class=&quot;headerlink&quot; title=&quot;设置适配不同设备的图片&quot;&gt;&lt;/a&gt;设置适配不同设备的图片&lt;/h1&gt;&lt;p&gt;点击图片组，分别选择右侧的 iPhone , iPad。拖入图片，将针对不同设备采用不同的图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/zfphysc527297i5/20160807_adaptive42.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;表格单元格的自我调整（代码略）&quot;&gt;&lt;a href=&quot;#表格单元格的自我调整（代码略）&quot; class=&quot;headerlink&quot; title=&quot;表格单元格的自我调整（代码略）&quot;&gt;&lt;/a&gt;表格单元格的自我调整（代码略）&lt;/h1&gt;&lt;h2 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/3oeercgj23sylge/20160807_adaptive52.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;单元格的设定&quot;&gt;&lt;a href=&quot;#单元格的设定&quot; class=&quot;headerlink&quot; title=&quot;单元格的设定&quot;&gt;&lt;/a&gt;单元格的设定&lt;/h2&gt;&lt;p&gt;style为custom,selection为none &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/u41c4qfpofo9e5y/20160807_adaptive43.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;imageView约束设定-铺满整个cell&quot;&gt;&lt;a href=&quot;#imageView约束设定-铺满整个cell&quot; class=&quot;headerlink&quot; title=&quot;imageView约束设定(铺满整个cell)&quot;&gt;&lt;/a&gt;imageView约束设定(铺满整个cell)&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/b6m5iq0uu17k7g0/20160807_adaptive44.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Label约束设定&quot;&gt;&lt;a href=&quot;#Label约束设定&quot; class=&quot;headerlink&quot; title=&quot;Label约束设定&quot;&gt;&lt;/a&gt;Label约束设定&lt;/h2&gt;&lt;p&gt;Press ctrl to drag to contentView and press shift to select all&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/oa17kouurjo6ymi/20160807_adaptive45.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/3sqz1wu3zbfwzf7/20160807_adaptive49.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;场景布局与实际布局不符合，就会出现橘红色的标注&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ipd4pfvj76i94gj/20160807_adaptive48.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Label字体-背景色-透明度设定&quot;&gt;&lt;a href=&quot;#Label字体-背景色-透明度设定&quot; class=&quot;headerlink&quot; title=&quot;Label字体/背景色/透明度设定&quot;&gt;&lt;/a&gt;Label字体/背景色/透明度设定&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/qqk6shnj0vqet6z/20160807_adaptive50.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置单元格高度解决冲突&quot;&gt;&lt;a href=&quot;#设置单元格高度解决冲突&quot; class=&quot;headerlink&quot; title=&quot;设置单元格高度解决冲突&quot;&gt;&lt;/a&gt;设置单元格高度解决冲突&lt;/h2&gt;&lt;p&gt;点击单元格，将高度拖至120&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/juqfxh9wrp3olnu/20160807_adaptive46.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;更新frame&quot;&gt;&lt;a href=&quot;#更新frame&quot; class=&quot;headerlink&quot; title=&quot;更新frame&quot;&gt;&lt;/a&gt;更新frame&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/rgslw0en2jnsxa1/20160807_adaptive47.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置table-cell之间的分割符&quot;&gt;&lt;a href=&quot;#设置table-cell之间的分割符&quot; class=&quot;headerlink&quot; title=&quot;设置table cell之间的分割符&quot;&gt;&lt;/a&gt;设置table cell之间的分割符&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/eq7nntoh41ec8kc/20160807_adaptive51.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在Controller中必须添加的两行代码&quot;&gt;&lt;a href=&quot;#在Controller中必须添加的两行代码&quot; class=&quot;headerlink&quot; title=&quot;在Controller中必须添加的两行代码&quot;&gt;&lt;/a&gt;在Controller中必须添加的两行代码&lt;/h2&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;override func viewDidLoad() {
  super.viewDidLoad()

  tableView.rowHeight = UITableViewAutomaticDimension
  tableView.estimatedRowHeight = 100
  }
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;必须要由tableView来决定表格的宽度&lt;/li&gt;
&lt;li&gt;Autolayout必须约束高度，并且不能有冲突。比如该例子中的label。需要手动调整高度&lt;/li&gt;
&lt;li&gt;两行代码&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;安装集合视图（代码略）&quot;&gt;&lt;a href=&quot;#安装集合视图（代码略）&quot; class=&quot;headerlink&quot; title=&quot;安装集合视图（代码略）&quot;&gt;&lt;/a&gt;安装集合视图（代码略）&lt;/h1&gt;&lt;h2 id=&quot;效果图-1&quot;&gt;&lt;a href=&quot;#效果图-1&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/bo371qdejtb4x9w/20160807_adaptive62.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装ContainerView并添加约束&quot;&gt;&lt;a href=&quot;#安装ContainerView并添加约束&quot; class=&quot;headerlink&quot; title=&quot;安装ContainerView并添加约束&quot;&gt;&lt;/a&gt;安装ContainerView并添加约束&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/t9y6oxw2614n8mf/20160807_adaptive59.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ContainerView会自动创建ViewController&quot;&gt;&lt;a href=&quot;#ContainerView会自动创建ViewController&quot; class=&quot;headerlink&quot; title=&quot;ContainerView会自动创建ViewController&quot;&gt;&lt;/a&gt;ContainerView会自动创建ViewController&lt;/h2&gt;&lt;p&gt;本案例不需要，可以删除&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/4pi06h57oynyxsh/20160807_adaptive53.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Container内嵌集合视图-代码略&quot;&gt;&lt;a href=&quot;#Container内嵌集合视图-代码略&quot; class=&quot;headerlink&quot; title=&quot;Container内嵌集合视图 (代码略)&quot;&gt;&lt;/a&gt;Container内嵌集合视图 (代码略)&lt;/h2&gt;&lt;p&gt;Press ctrl to drag to collectionView ,选择 Embed&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/2wmy6xolald7x2w/20160807_adaptive54.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/w45ig9dn298sq64/20160807_adaptive55.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;重新设定Label约束&quot;&gt;&lt;a href=&quot;#重新设定Label约束&quot; class=&quot;headerlink&quot; title=&quot;重新设定Label约束&quot;&gt;&lt;/a&gt;重新设定Label约束&lt;/h2&gt;&lt;h3 id=&quot;删除顶部约束&quot;&gt;&lt;a href=&quot;#删除顶部约束&quot; class=&quot;headerlink&quot; title=&quot;删除顶部约束&quot;&gt;&lt;/a&gt;删除顶部约束&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/iynvi7o4ahb5idw/20160807_adaptive56.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;与Container的顶部垂直距离为0&quot;&gt;&lt;a href=&quot;#与Container的顶部垂直距离为0&quot; class=&quot;headerlink&quot; title=&quot;与Container的顶部垂直距离为0&quot;&gt;&lt;/a&gt;与Container的顶部垂直距离为0&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/l7ptx3cy8l9uyt0/20160807_adaptive60.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/x4tclqlyrule5r1/20160807_adaptive61.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;在iPhone横屏中去除集合视图&quot;&gt;&lt;a href=&quot;#在iPhone横屏中去除集合视图&quot; class=&quot;headerlink&quot; title=&quot;在iPhone横屏中去除集合视图&quot;&gt;&lt;/a&gt;在iPhone横屏中去除集合视图&lt;/h1&gt;&lt;h2 id=&quot;效果图-2&quot;&gt;&lt;a href=&quot;#效果图-2&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/6y3wvxbxdjrfsi4/20160807_adaptive70.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;设定iPhone横屏size-class&quot;&gt;&lt;a href=&quot;#设定iPhone横屏size-class&quot; class=&quot;headerlink&quot; title=&quot;设定iPhone横屏size class&quot;&gt;&lt;/a&gt;设定iPhone横屏size class&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ne3xclzasd478pn/20160807_adaptive63.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在该size-class中卸载container&quot;&gt;&lt;a href=&quot;#在该size-class中卸载container&quot; class=&quot;headerlink&quot; title=&quot;在该size class中卸载container&quot;&gt;&lt;/a&gt;在该size class中卸载container&lt;/h2&gt;&lt;p&gt;cmd + Delete = 卸载&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/xidc81x6efg170g/20160807_adaptive64.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;卸载container-view的约束-右侧删除&quot;&gt;&lt;a href=&quot;#卸载container-view的约束-右侧删除&quot; class=&quot;headerlink&quot; title=&quot;卸载container view的约束(右侧删除)&quot;&gt;&lt;/a&gt;卸载container view的约束(右侧删除)&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/t66clmb7wps0is2/20160807_adaptive65.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;重设label约束&quot;&gt;&lt;a href=&quot;#重设label约束&quot; class=&quot;headerlink&quot; title=&quot;重设label约束&quot;&gt;&lt;/a&gt;重设label约束&lt;/h2&gt;&lt;h3 id=&quot;显示Label所有约束-含卸载&quot;&gt;&lt;a href=&quot;#显示Label所有约束-含卸载&quot; class=&quot;headerlink&quot; title=&quot;显示Label所有约束(含卸载)&quot;&gt;&lt;/a&gt;显示Label所有约束(含卸载)&lt;/h3&gt;&lt;p&gt;点击All&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ndu6u825kaucjco/20160807_adaptive66.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;重设当前sizeClass约束&quot;&gt;&lt;a href=&quot;#重设当前sizeClass约束&quot; class=&quot;headerlink&quot; title=&quot;重设当前sizeClass约束&quot;&gt;&lt;/a&gt;重设当前sizeClass约束&lt;/h3&gt;&lt;p&gt;点击 + 号，选择size class ,然后install&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/kxz5ictnoofm02c/20160807_adaptive67.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/d8052c6i2p3qweo/20160807_adaptive68.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/leefz9n24lncaec/20160807_adaptive69.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;iPhone竖屏上去除集合视图&quot;&gt;&lt;a href=&quot;#iPhone竖屏上去除集合视图&quot; class=&quot;headerlink&quot; title=&quot;iPhone竖屏上去除集合视图&quot;&gt;&lt;/a&gt;iPhone竖屏上去除集合视图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/caualyqwgggl55d/20160807_adaptive75.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;DetailViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; override func viewDidLoad() {
    super.viewDidLoad()
    // Do any additional setup after loading the view, typically from a nib.
    self.configureView()
    provideDataToChildViewControllers()

    navigationItem.leftItemsSupplementBackButton = true
    navigationItem.hidesBackButton = false

    configureTraitOverrideForSize(view.bounds.size)
}

override func viewWillTransitionToSize(size: CGSize, withTransitionCoordinator coordinator: UIViewControllerTransitionCoordinator) {
    configureTraitOverrideForSize(size)
}

private func configureTraitOverrideForSize(size:CGSize) {
    var traitOverride: UITraitCollection?

    if size.height &amp;lt; 1000 {
        traitOverride = UITraitCollection(verticalSizeClass: .Compact)
    }

    for vc in childViewControllers {
        setOverrideTraitCollection(traitOverride, forChildViewController: vc)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;为SizeClass配置相关图片&quot;&gt;&lt;a href=&quot;#为SizeClass配置相关图片&quot; class=&quot;headerlink&quot; title=&quot;为SizeClass配置相关图片&quot;&gt;&lt;/a&gt;为SizeClass配置相关图片&lt;/h1&gt;&lt;h2 id=&quot;效果图-3&quot;&gt;&lt;a href=&quot;#效果图-3&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h2&gt;&lt;p&gt;如图，集合视图和顶部所使用的图片不一样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/maja4iharq45ruh/20160807_adaptive71.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在ImageAsset中构建size-class&quot;&gt;&lt;a href=&quot;#在ImageAsset中构建size-class&quot; class=&quot;headerlink&quot; title=&quot;在ImageAsset中构建size class&quot;&gt;&lt;/a&gt;在ImageAsset中构建size class&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;选择右侧width – Any&amp;amp;Compact&lt;/li&gt;
&lt;li&gt;Universal打勾，对应拖入图片。 * 代表 any, - 代表compact , + 代表regular&lt;/li&gt;
&lt;li&gt;右侧取消iPhone,iPad&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/9yinto1b1fghzac/20160807_adaptive77.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关代码&quot;&gt;&lt;a href=&quot;#相关代码&quot; class=&quot;headerlink&quot; title=&quot;相关代码&quot;&gt;&lt;/a&gt;相关代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;override func viewDidLoad() {
    super.viewDidLoad()
    // Do any additional setup after loading the view.
    configureView()

    let traitOverride = UITraitCollection(horizontalSizeClass: .Compact)

    for vc in childViewControllers {
        setOverrideTraitCollection(traitOverride, forChildViewController: vc)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;隐藏导航栏&quot;&gt;&lt;a href=&quot;#隐藏导航栏&quot; class=&quot;headerlink&quot; title=&quot;隐藏导航栏&quot;&gt;&lt;/a&gt;隐藏导航栏&lt;/h1&gt;&lt;h2 id=&quot;效果图-4&quot;&gt;&lt;a href=&quot;#效果图-4&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h2&gt;&lt;p&gt;如图，点击屏幕将导航栏隐藏&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/sv4rvtm0fgc6u3d/20160807_adaptive72.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/2u7qh3xm9o3uvwe/20160807_adaptive74.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;UIStoryboard中设置NavigationBar&quot;&gt;&lt;a href=&quot;#UIStoryboard中设置NavigationBar&quot; class=&quot;headerlink&quot; title=&quot;UIStoryboard中设置NavigationBar&quot;&gt;&lt;/a&gt;UIStoryboard中设置NavigationBar&lt;/h2&gt;&lt;p&gt;选中NavigationController,在右侧hide bar打勾:“on tap” + “when vertically compact”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/fdb56pi2p8awn5k/20160807_adaptive73.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;定制横竖屏的文字&quot;&gt;&lt;a href=&quot;#定制横竖屏的文字&quot; class=&quot;headerlink&quot; title=&quot;定制横竖屏的文字&quot;&gt;&lt;/a&gt;定制横竖屏的文字&lt;/h1&gt;&lt;h2 id=&quot;效果图-5&quot;&gt;&lt;a href=&quot;#效果图-5&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h2&gt;&lt;p&gt;横屏文字较小，竖屏文字较大&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/caualyqwgggl55d/20160807_adaptive75.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/sv4rvtm0fgc6u3d/20160807_adaptive72.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关代码-1&quot;&gt;&lt;a href=&quot;#相关代码-1&quot; class=&quot;headerlink&quot; title=&quot;相关代码&quot;&gt;&lt;/a&gt;相关代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;private func prepareNavigationBarAppearance() {
    let font = UIFont(name: &amp;quot;HelveticaNeue-Light&amp;quot;, size: 30)!
    let regularVertical = UITraitCollection(verticalSizeClass: .Regular)
    UINavigationBar.appearanceForTraitCollection(regularVertical).titleTextAttributes = [NSFontAttributeName: font]
    let compactVertical = UITraitCollection(verticalSizeClass: .Compact)
    UINavigationBar.appearanceForTraitCollection(compactVertical).titleTextAttributes = [NSFontAttributeName: font.fontWithSize(20)]
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Adaptive-Layout&quot;&gt;&lt;a href=&quot;#使用Adaptive-Layout&quot; class=&quot;headerlink&quot; title=&quot;使用Adaptive Layout&quot;&gt;&lt;/a&gt;使用Adaptive Layout&lt;/h1&gt;&lt;h2 id=&quot;Devic
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="UI" scheme="http://jackliu17.github.io/tags/UI/"/>
    
      <category term="Xcode" scheme="http://jackliu17.github.io/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Alamofire简介</title>
    <link href="http://jackliu17.github.io/2016/08/05/Alamofire%E7%AE%80%E4%BB%8B/"/>
    <id>http://jackliu17.github.io/2016/08/05/Alamofire简介/</id>
    <published>2016-08-05T01:43:01.000Z</published>
    <updated>2016-08-05T10:57:40.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iOS中的网络连接方案&quot;&gt;&lt;a href=&quot;#iOS中的网络连接方案&quot; class=&quot;headerlink&quot; title=&quot;iOS中的网络连接方案&quot;&gt;&lt;/a&gt;iOS中的网络连接方案&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;NSURLConnection：用法简单，最古老最经典最直接的一种方案&lt;/li&gt;
&lt;li&gt;NSURLSession：iOS 7 新出的技术，功能比 NSURLConnection 更加强大&lt;/li&gt;
&lt;li&gt;AFNetworking：简单易用，提供了基本够用的常用功能&lt;/li&gt;
&lt;li&gt;Alamofire：纯Swift网络请求库&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Alamofire响应处理&quot;&gt;&lt;a href=&quot;#Alamofire响应处理&quot; class=&quot;headerlink&quot; title=&quot;Alamofire响应处理&quot;&gt;&lt;/a&gt;Alamofire响应处理&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Alamofire.request(.GET, &amp;quot;https://httpbin.org/get&amp;quot;, parameters: [&amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;])
.responseJSON { response in
    print(response.request)  // 初始URL请求
    print(response.response) // URL响应
    print(response.data)     // 服务器数据
    print(response.result)   // 响应序列化的结果

    if let JSON = response.result.value {
        print(&amp;quot;JSON: \(JSON)&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Alamofire-HTTP-Headers&quot;&gt;&lt;a href=&quot;#Alamofire-HTTP-Headers&quot; class=&quot;headerlink&quot; title=&quot;Alamofire - HTTP Headers&quot;&gt;&lt;/a&gt;Alamofire - HTTP Headers&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let headers = [
&amp;quot;Authorization&amp;quot;: &amp;quot;Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==&amp;quot;,
&amp;quot;Content-Type&amp;quot;: &amp;quot;application/x-www-form-urlencoded&amp;quot;
]

Alamofire.request(.GET, &amp;quot;https://httpbin.org/get&amp;quot;, headers: headers)
.responseJSON { response in
    debugPrint(response)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Alamofire-使用默认的Download-Destination&quot;&gt;&lt;a href=&quot;#Alamofire-使用默认的Download-Destination&quot; class=&quot;headerlink&quot; title=&quot;Alamofire 使用默认的Download Destination&quot;&gt;&lt;/a&gt;Alamofire 使用默认的Download Destination&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let destination = Alamofire.Request.suggestedDownloadDestination(directory: .DocumentDirectory, domain: .UserDomainMask)
Alamofire.download(.GET, &amp;quot;https://httpbin.org/stream/100&amp;quot;, destination: destination)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Alamofire-下载失败访问恢复文件&quot;&gt;&lt;a href=&quot;#Alamofire-下载失败访问恢复文件&quot; class=&quot;headerlink&quot; title=&quot;Alamofire 下载失败访问恢复文件&quot;&gt;&lt;/a&gt;Alamofire 下载失败访问恢复文件&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Alamofire.download(.GET, &amp;quot;https://httpbin.org/stream/100&amp;quot;, destination: destination).response { _, _, data, _ in
    if let data = data, resumeDataString = NSString(data: data, encoding: NSUTF8StringEncoding) {
        print(&amp;quot;Resume Data: \(resumeDataString)&amp;quot;)
    } else {
        print(&amp;quot;Resume Data was empty&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Alamofire-URLStringConvertible&quot;&gt;&lt;a href=&quot;#Alamofire-URLStringConvertible&quot; class=&quot;headerlink&quot; title=&quot;Alamofire - URLStringConvertible&quot;&gt;&lt;/a&gt;Alamofire - URLStringConvertible&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let string = NSString(string: &amp;quot;https://httpbin.org/post&amp;quot;)
Alamofire.request(.POST, string)

let URL = NSURL(string: string)!
Alamofire.request(.POST, URL)

let URLRequest = NSURLRequest(URL: URL)
Alamofire.request(.POST, URLRequest) // overrides `HTTPMethod` of `URLRequest`

let URLComponents = NSURLComponents(URL: URL, resolvingAgainstBaseURL: true)
Alamofire.request(.POST, URLComponents)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Bug&quot;&gt;&lt;a href=&quot;#Bug&quot; class=&quot;headerlink&quot; title=&quot;Bug&quot;&gt;&lt;/a&gt;Bug&lt;/h1&gt;&lt;p&gt;Xcode的bug: 从cocoapods导入时，识别不了Alamofire。只要先Run一次，再import Alamofire就可以了&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS中的网络连接方案&quot;&gt;&lt;a href=&quot;#iOS中的网络连接方案&quot; class=&quot;headerlink&quot; title=&quot;iOS中的网络连接方案&quot;&gt;&lt;/a&gt;iOS中的网络连接方案&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;NSURLConnection：用法简单，最古老最经典最
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS_networking" scheme="http://jackliu17.github.io/tags/iOS-networking/"/>
    
  </entry>
  
  <entry>
    <title>使用CocoaPods管理iOS库</title>
    <link href="http://jackliu17.github.io/2016/08/04/%E4%BD%BF%E7%94%A8CocoaPods%E7%AE%A1%E7%90%86iOS%E5%BA%93/"/>
    <id>http://jackliu17.github.io/2016/08/04/使用CocoaPods管理iOS库/</id>
    <published>2016-08-04T04:17:13.000Z</published>
    <updated>2016-08-04T11:18:29.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iOS库的介绍&quot;&gt;&lt;a href=&quot;#iOS库的介绍&quot; class=&quot;headerlink&quot; title=&quot;iOS库的介绍&quot;&gt;&lt;/a&gt;iOS库的介绍&lt;/h1&gt;&lt;h2 id=&quot;动态库和静态库&quot;&gt;&lt;a href=&quot;#动态库和静态库&quot; class=&quot;headerlink&quot; title=&quot;动态库和静态库&quot;&gt;&lt;/a&gt;动态库和静态库&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;动态库在运行时实时部署，静态库必须在编译时连接到代码&lt;/li&gt;
&lt;li&gt;动态库加载到内存后可以重复使用,静态库每次import都引入一次&lt;/li&gt;
&lt;li&gt;自定义的动态库只能部署在 iOS8 以上系统&lt;/li&gt;
&lt;li&gt;.a(静态库，只有代码，没有任何资源,图片xib文件等)&lt;/li&gt;
&lt;li&gt;.dylib (动态库，只有代码，没有任何资源)&lt;/li&gt;
&lt;li&gt;.framework 可以包含资源，分为两种：dynamic 和 static&lt;/li&gt;
&lt;li&gt;use_frameworks! 生成 dynamic framework&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/4avj4s13s02p584/20160804_dylib.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;制作库&quot;&gt;&lt;a href=&quot;#制作库&quot; class=&quot;headerlink&quot; title=&quot;制作库&quot;&gt;&lt;/a&gt;制作库&lt;/h2&gt;&lt;p&gt;iOS 体系结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;armv7： iPhone 4/4s&lt;/li&gt;
&lt;li&gt;armv7s：iPhone 5 和 iPhone 5C&lt;/li&gt;
&lt;li&gt;arm64：iPhone 5S+&lt;/li&gt;
&lt;li&gt;x86-64、i386：模拟器&lt;/li&gt;
&lt;li&gt;lipo –info – 查看库支持的体系结构&lt;/li&gt;
&lt;li&gt;lipo -create  -output  - 将模拟器和真机的库合成一个库&lt;/li&gt;
&lt;li&gt;Build Active Architecture Only (Debug,Release) – 只编译当前设备体系结构的包&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;设定系统为8-0以上才能部署自定义动态库&quot;&gt;&lt;a href=&quot;#设定系统为8-0以上才能部署自定义动态库&quot; class=&quot;headerlink&quot; title=&quot;设定系统为8.0以上才能部署自定义动态库&quot;&gt;&lt;/a&gt;设定系统为8.0以上才能部署自定义动态库&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/dpfrluxleicxjaq/20160804_dylib1.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;创建一个库&quot;&gt;&lt;a href=&quot;#创建一个库&quot; class=&quot;headerlink&quot; title=&quot;创建一个库&quot;&gt;&lt;/a&gt;创建一个库&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ih94n4pgrsh6ik9/20160804_dylib2.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;MyFramework-swift&quot;&gt;&lt;a href=&quot;#MyFramework-swift&quot; class=&quot;headerlink&quot; title=&quot;MyFramework.swift&quot;&gt;&lt;/a&gt;MyFramework.swift&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;import UIKit

public class MyFramework: NSObject {

static let bundle = NSBundle(forClass: MyFramework.self)

static let MyFrameworkStr = &amp;quot;MyFramework&amp;quot;

public static func openVCFromStoryboard() {
    let vc  = UIStoryboard(name: MyFrameworkStr, bundle: bundle).instantiateViewControllerWithIdentifier(&amp;quot;MyFrameworkViewController&amp;quot;)
    UIApplication.sharedApplication().keyWindow?.rootViewController?.presentViewController(vc, animated: true, completion: nil)
}

public static func openVCFromXib() {
    let vc = MyFrameworkViewController(nibName: MyFrameworkStr, bundle: bundle)
    UIApplication.sharedApplication().keyWindow?.rootViewController?.presentViewController(vc, animated: true, completion: nil)
}

public static func loadImage() -&amp;gt; UIImage{
    let image = UIImage(named: MyFrameworkStr + &amp;quot;.png&amp;quot;, inBundle: bundle, compatibleWithTraitCollection: nil)
    return image!
}


}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;分别在真机和模拟下运行，Product下生成，在show-in-finder中打开&quot;&gt;&lt;a href=&quot;#分别在真机和模拟下运行，Product下生成，在show-in-finder中打开&quot; class=&quot;headerlink&quot; title=&quot;分别在真机和模拟下运行，Product下生成，在show in finder中打开&quot;&gt;&lt;/a&gt;分别在真机和模拟下运行，Product下生成，在show in finder中打开&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/51aymh1bamnxr95/20160804_dylib3.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;找到xxx-framework目录下的MyFramework文件，如图所示&quot;&gt;&lt;a href=&quot;#找到xxx-framework目录下的MyFramework文件，如图所示&quot; class=&quot;headerlink&quot; title=&quot;找到xxx.framework目录下的MyFramework文件，如图所示&quot;&gt;&lt;/a&gt;找到xxx.framework目录下的MyFramework文件，如图所示&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/wc19di7fthutx26/20160804_dylib4.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;合并真机和模拟器的动态库。将其拖入到“lipo-create”后-路径&quot;&gt;&lt;a href=&quot;#合并真机和模拟器的动态库。将其拖入到“lipo-create”后-路径&quot; class=&quot;headerlink&quot; title=&quot;合并真机和模拟器的动态库。将其拖入到“lipo -create”后(路径)&quot;&gt;&lt;/a&gt;合并真机和模拟器的动态库。将其拖入到“lipo -create”后(路径)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/se9l6dzpq9i5nth/20160804_dylib5.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/wj51h5qpx9zvjf5/20160804_dylib6.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;合并库中的module也要模拟器module-真机module&quot;&gt;&lt;a href=&quot;#合并库中的module也要模拟器module-真机module&quot; class=&quot;headerlink&quot; title=&quot;合并库中的module也要模拟器module + 真机module&quot;&gt;&lt;/a&gt;合并库中的module也要模拟器module + 真机module&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/2m7pz7k1p3d69v7/20160804_dylib7.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用库&quot;&gt;&lt;a href=&quot;#使用库&quot; class=&quot;headerlink&quot; title=&quot;使用库&quot;&gt;&lt;/a&gt;使用库&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;手动导入：Linked Frameworks and  Libraries 、 Embedded Binaries&lt;/li&gt;
&lt;li&gt;使用 pod：use_frameworks!&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;利用-dynamic-库实时部署&quot;&gt;&lt;a href=&quot;#利用-dynamic-库实时部署&quot; class=&quot;headerlink&quot; title=&quot;利用 dynamic 库实时部署&quot;&gt;&lt;/a&gt;利用 dynamic 库实时部署&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let libPath = &amp;quot;\(NSHomeDirectory())/Documents/MyFramework.framework/MyFramework&amp;quot;
if let bundle = NSBundle(path: libPath) {
do {
    try bundle.loadAndReturnError()
    if let myFramework = NSClassFromString(&amp;quot;MyFramework&amp;quot;) as? MyFramework.Type{
        myFramework.init().whereIsFrom()
    }
} catch {
    print(&amp;quot;动态库加载失败&amp;quot;)
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Cocoapods&quot;&gt;&lt;a href=&quot;#Cocoapods&quot; class=&quot;headerlink&quot; title=&quot;Cocoapods&quot;&gt;&lt;/a&gt;Cocoapods&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;在Terminal输入以下安装命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;出现以下报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You don&amp;apos;t have write permissions for the /Library/Ruby/Gems/2.0.0 directory.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再Terminal输入以下命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还是出现以下报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Operation not permitted - /usr/bin/xcodeproj
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参考官方文档&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/issues/3692&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Operation not permitted&lt;/a&gt;输入以下命令，成功&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem install -n /usr/local/bin cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;CocoaPods基础知识-—-使用步骤&quot;&gt;&lt;a href=&quot;#CocoaPods基础知识-—-使用步骤&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods基础知识 — 使用步骤&quot;&gt;&lt;/a&gt;CocoaPods基础知识 — 使用步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;创建或打开 Xcode 项目&lt;/li&gt;
&lt;li&gt;命令行 cd 到项目目录 (拖曳文件夹到cd后面就是路径)&lt;/li&gt;
&lt;li&gt;使用 pod init 创建 Podfile&lt;/li&gt;
&lt;li&gt;pod search Alamofire &lt;/li&gt;
&lt;li&gt;修改 Podfile&lt;/li&gt;
&lt;li&gt;pod install&lt;/li&gt;
&lt;li&gt;打开 pod 创建的 xcworkspace&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;CocoaPods基础知识-—-Podfile&quot;&gt;&lt;a href=&quot;#CocoaPods基础知识-—-Podfile&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods基础知识 — Podfile&quot;&gt;&lt;/a&gt;CocoaPods基础知识 — Podfile&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;platform : ios &amp;apos;9.0&amp;apos;
use_frameworks! (swift下必须使用)
inhibit_all_warnings! (隐藏所有报错信息)
target  &amp;apos;PodTest&amp;apos; do
    pod &amp;apos;AFNetworking&amp;apos;,  &amp;apos;~&amp;gt; 3.0&amp;apos;
    pod &amp;apos;FBSDKCoreKit&amp;apos;, &amp;apos;~&amp;gt; 4.9&amp;apos;
end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Podfile-lock&quot;&gt;&lt;a href=&quot;#Podfile-lock&quot; class=&quot;headerlink&quot; title=&quot;Podfile.lock&quot;&gt;&lt;/a&gt;Podfile.lock&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;第一次 pod install 时生成记录每个 Pod 版本&lt;/li&gt;
&lt;li&gt;Podfile.lock 锁定当前各依赖库的版本之后 pod install 不会更改版本pod update 才会改版本&lt;/li&gt;
&lt;li&gt;多人协作时防止第三方库升级时造成版本不一致&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;pod-install-和-pod-update&quot;&gt;&lt;a href=&quot;#pod-install-和-pod-update&quot; class=&quot;headerlink&quot; title=&quot;pod install 和 pod update&quot;&gt;&lt;/a&gt;pod install 和 pod update&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;pod install: 每次安装Podfile.lock 中锁定的版本的pods 及 新的pods&lt;/li&gt;
&lt;li&gt;pod update: 会将指定的pod更新到最新版本或 podfile 中指定版本&lt;/li&gt;
&lt;li&gt;使用 pod update podName 来更新指定 pod 的版本&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS库的介绍&quot;&gt;&lt;a href=&quot;#iOS库的介绍&quot; class=&quot;headerlink&quot; title=&quot;iOS库的介绍&quot;&gt;&lt;/a&gt;iOS库的介绍&lt;/h1&gt;&lt;h2 id=&quot;动态库和静态库&quot;&gt;&lt;a href=&quot;#动态库和静态库&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS_conf" scheme="http://jackliu17.github.io/tags/iOS-conf/"/>
    
  </entry>
  
  <entry>
    <title>GCD编程</title>
    <link href="http://jackliu17.github.io/2016/08/02/GCD%E7%BC%96%E7%A8%8B/"/>
    <id>http://jackliu17.github.io/2016/08/02/GCD编程/</id>
    <published>2016-08-02T11:01:19.000Z</published>
    <updated>2016-08-10T11:25:34.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;串行队列&quot;&gt;&lt;a href=&quot;#串行队列&quot; class=&quot;headerlink&quot; title=&quot;串行队列&quot;&gt;&lt;/a&gt;串行队列&lt;/h1&gt;&lt;p&gt;串行队列一次只执行一个线程，按照添加到队列的顺序依次执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[self serailQueue];
}


//串行队列
- (void)serailQueue {

//创建出了队列
GCDQueue *queue = [[GCDQueue alloc]initSerial];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;1&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;2&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;3&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;4&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;5&amp;quot;);
}];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;并发队列&quot;&gt;&lt;a href=&quot;#并发队列&quot; class=&quot;headerlink&quot; title=&quot;并发队列&quot;&gt;&lt;/a&gt;并发队列&lt;/h1&gt;&lt;p&gt;并发队列一次可以执行多个线程，线程的执行没有先后顺序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[self serailQueue];
}

//并发队列,5个线程同时执行
- (void)initConcurrent{

//创建出了队列
GCDQueue *queue = [[GCDQueue alloc]initConcurrent];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;1&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;2&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;3&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;4&amp;quot;);
}];

//执行队列中的线程
[queue execute:^{
    NSLog(@&amp;quot;5&amp;quot;);
}];

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;UI界面所在的线程队列是串行队列&quot;&gt;&lt;a href=&quot;#UI界面所在的线程队列是串行队列&quot; class=&quot;headerlink&quot; title=&quot;UI界面所在的线程队列是串行队列&quot;&gt;&lt;/a&gt;UI界面所在的线程队列是串行队列&lt;/h1&gt;&lt;p&gt;在子线程中处理业务逻辑，在主线程中更新UI&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {

self.imageView        = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];
self.imageView.center = self.view.center;
[self.view addSubview:self.imageView];

[GCDQueue executeInGlobalQueue:^{

    //处理业务逻辑,下载操作

    NSString *netUrlString = @&amp;quot;http://pic.cnitblog.com/avatar/607542/20140226182241.png&amp;quot;;
    NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:netUrlString]];
    NSData *picData = [NSURLConnection sendSynchronousRequest:request
                                            returningResponse:nil
                                                        error:nil];


    [GCDQueue executeInMainQueue:^{

        //更新UI
        self.imageView.image = [[UIImage alloc] initWithData:picData];

    }];

}];

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;延时操作&quot;&gt;&lt;a href=&quot;#延时操作&quot; class=&quot;headerlink&quot; title=&quot;延时操作&quot;&gt;&lt;/a&gt;延时操作&lt;/h1&gt;&lt;h2 id=&quot;NSThread方式&quot;&gt;&lt;a href=&quot;#NSThread方式&quot; class=&quot;headerlink&quot; title=&quot;NSThread方式&quot;&gt;&lt;/a&gt;NSThread方式&lt;/h2&gt;&lt;p&gt;优点:时间比较精确，而且可以用方法取消。缺点:比较繁琐&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {

[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

NSLog(@&amp;quot;启动&amp;quot;);

//NSThread方式的延时执行操作
[self performSelector:@selector(threadEvent:)
           withObject:self
           afterDelay:2.f];

//取消延时执行操作
[NSObject cancelPreviousPerformRequestsWithTarget:self];

}

- (void)threadEvent:(id)sender{
NSLog(@&amp;quot;线程事件&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;GCD方式&quot;&gt;&lt;a href=&quot;#GCD方式&quot; class=&quot;headerlink&quot; title=&quot;GCD方式&quot;&gt;&lt;/a&gt;GCD方式&lt;/h2&gt;&lt;p&gt;优点:简单快捷。缺点:时间不够精确，不能取消。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

NSLog(@&amp;quot;启动&amp;quot;);
//GCD方式的延时执行操作
[GCDQueue executeInMainQueue:^{
    NSLog(@&amp;quot;GCD线程事件&amp;quot;);
} afterDelaySecs:2.f];

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;GCD线程组-管理线程&quot;&gt;&lt;a href=&quot;#GCD线程组-管理线程&quot; class=&quot;headerlink&quot; title=&quot;GCD线程组(管理线程)&quot;&gt;&lt;/a&gt;GCD线程组(管理线程)&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

//初始化线程组合
GCDGroup *group = [[GCDGroup alloc]init];

//创建一个线程队列
GCDQueue *queue = [[GCDQueue alloc]initConcurrent];

//让线程在group中执行线程1
[queue execute:^{
    sleep(1);
    NSLog(@&amp;quot;线程1执行完毕&amp;quot;);
} inGroup:group];

//让线程在group中执行线程2
[queue execute:^{
     sleep(3);
    NSLog(@&amp;quot;线程2执行完毕&amp;quot;);
} inGroup:group];

//监听线程组是否执行结束，然后执行线程3
[queue notify:^{
    NSLog(@&amp;quot;线程3执行完毕&amp;quot;);
} inGroup:group];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;定时器&quot;&gt;&lt;a href=&quot;#定时器&quot; class=&quot;headerlink&quot; title=&quot;定时器&quot;&gt;&lt;/a&gt;定时器&lt;/h1&gt;&lt;h2 id=&quot;GCD定时器&quot;&gt;&lt;a href=&quot;#GCD定时器&quot; class=&quot;headerlink&quot; title=&quot;GCD定时器&quot;&gt;&lt;/a&gt;GCD定时器&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;@interface ViewController ()
@property (nonatomic, strong) GCDTimer *timer;
@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

self.timer = [[GCDTimer alloc] initInQueue:[GCDQueue mainQueue]];
[self.timer event:^{
    NSLog(@&amp;quot;GCD定时器&amp;quot;);
} timeInterval:NSEC_PER_SEC];

[self.timer start];
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;NSTimer定时器&quot;&gt;&lt;a href=&quot;#NSTimer定时器&quot; class=&quot;headerlink&quot; title=&quot;NSTimer定时器&quot;&gt;&lt;/a&gt;NSTimer定时器&lt;/h2&gt;&lt;p&gt;仅运行在当前runloop? 不能用于tableView?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()
@property (nonatomic,strong)NSTimer *normalTimer;
@end

- (void)viewDidLoad {
[super viewDidLoad];   
 self.normalTimer = [NSTimer scheduledTimerWithTimeInterval:1
                                                    target:self
                                                  selector:@selector(timerEvent)
                                                  userInfo:nil
                                                   repeats:YES];
}

- (void)timerEvent{
NSLog(@&amp;quot;NSTimer定时器&amp;quot;);
}    
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;GCD信号量-异步线程转换为同步线程&quot;&gt;&lt;a href=&quot;#GCD信号量-异步线程转换为同步线程&quot; class=&quot;headerlink&quot; title=&quot;GCD信号量- 异步线程转换为同步线程&quot;&gt;&lt;/a&gt;GCD信号量- 异步线程转换为同步线程&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

//必须线程1先执行完，然后再执行完线程2

//创建信号量, 可以将异步线程转化为同步线程
GCDSemaphore * semaphore = [[GCDSemaphore alloc]init];


//线程1 - 异步
[GCDQueue executeInGlobalQueue:^{
    NSLog(@&amp;quot;线程1&amp;quot;);

    //发送信号
    [semaphore signal];

}];

//线程2 - 异步
[GCDQueue executeInGlobalQueue:^{

    //等待信号，这时会堵塞住，不会往下执行，直到接收到信号
    [semaphore wait];

    NSLog(@&amp;quot;线程2&amp;quot;);
}];

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;综合使用-采用GCD逐一下载图片&quot;&gt;&lt;a href=&quot;#综合使用-采用GCD逐一下载图片&quot; class=&quot;headerlink&quot; title=&quot;综合使用:采用GCD逐一下载图片&quot;&gt;&lt;/a&gt;综合使用:采用GCD逐一下载图片&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;
#import &amp;quot;GCD.h&amp;quot;

@interface ViewController ()

@property(nonatomic, strong) UIImageView *view1;
@property(nonatomic, strong) UIImageView *view2;
@property(nonatomic, strong) UIImageView *view3;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

self.view1 = [self createImageViewWithFrame:CGRectMake(0, 0, 100, 100)];
self.view2 = [self createImageViewWithFrame:CGRectMake(100, 0, 100, 100)];
self.view3 = [self createImageViewWithFrame:CGRectMake(200, 0, 100, 100)];

NSString *net1 = @&amp;quot;http://pic.cnitblog.com/avatar/607542/20140226182241.png&amp;quot;;
NSString *net2 = @&amp;quot;http://pic.cnitblog.com/avatar/708810/20141230105233.png&amp;quot;;
NSString *net3 = @&amp;quot;http://pic.cnitblog.com/avatar/704178/20141216150843.png&amp;quot;;

//初始化信号量
GCDSemaphore *semaphore = [[GCDSemaphore alloc]init];


//图片1
[GCDQueue executeInGlobalQueue:^{
    UIImage *image1 = [self accessDataByNetString:net1];

    [GCDQueue executeInMainQueue:^{

        [UIView animateWithDuration:2.f animations:^{
            self.view1.image = image1;
            self.view1.alpha = 1.f;
        } completion:^(BOOL finished) {

            //发送信号
            [semaphore signal];
        }];
    }];
}];

//图片2
[GCDQueue executeInGlobalQueue:^{

    UIImage *image2 = [self accessDataByNetString:net2];

    [semaphore wait];

    [GCDQueue executeInMainQueue:^{

        [UIView animateWithDuration:2.f animations:^{
            self.view2.image = image2;
            self.view2.alpha = 1.f;
        } completion:^(BOOL finished) {

            //发送信号
            [semaphore signal];

        }];
    }];
}];

//图片3
[GCDQueue executeInGlobalQueue:^{

    UIImage *image3 = [self accessDataByNetString:net3];

    [semaphore wait];

    [GCDQueue executeInMainQueue:^{

        [UIView animateWithDuration:2.f animations:^{
            self.view3.image = image3;
            self.view3.alpha = 1.f;
        } completion:^(BOOL finished) {
            //发送信号
            [semaphore signal];            }];
    }];
}];
}

//创建view
- (UIImageView *)createImageViewWithFrame:(CGRect)frame {

UIImageView *imageView = [[UIImageView alloc]initWithFrame:frame];
imageView.alpha = 0.f;
[self.view addSubview:imageView];

return imageView;
}

//获取网络图片
- (UIImage *)accessDataByNetString:(NSString *)string{

NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:string]];

NSData *data = [NSURLConnection sendSynchronousRequest:request
                                 returningResponse:nil
                                             error:nil];

return [UIImage imageWithData:data];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;GCD和NSOperationQueue的区别&quot;&gt;&lt;a href=&quot;#GCD和NSOperationQueue的区别&quot; class=&quot;headerlink&quot; title=&quot;GCD和NSOperationQueue的区别&quot;&gt;&lt;/a&gt;GCD和NSOperationQueue的区别&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;GCD是纯C语言的API，NSOperationQueue是基于GCD的OC版本封装&lt;/li&gt;
&lt;li&gt;GCD只支持FIFO的队列，NSOperationQueue可以很方便的调整执行顺序，设置最大并发数量&lt;/li&gt;
&lt;li&gt;NSOperationQueue可以轻松在Operation间设置依赖关系，而GCD需要写很多的代码才能实现&lt;/li&gt;
&lt;li&gt;NSOperatinQueue支持KVO，可以监测operation是否正在执行(isExecuted)，是否结束(isFinished），是否取消(isCanceled)&lt;/li&gt;
&lt;li&gt;GCD的执行速度比NSOperationQueue快&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总结:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;任务之间不太互相依赖:GCD&lt;/li&gt;
&lt;li&gt;任务之间有依赖\或者要监听任务的执行情况:NSOperationQueue&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;串行队列&quot;&gt;&lt;a href=&quot;#串行队列&quot; class=&quot;headerlink&quot; title=&quot;串行队列&quot;&gt;&lt;/a&gt;串行队列&lt;/h1&gt;&lt;p&gt;串行队列一次只执行一个线程，按照添加到队列的顺序依次执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoa
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS_GCD" scheme="http://jackliu17.github.io/tags/iOS-GCD/"/>
    
  </entry>
  
  <entry>
    <title>Blocks</title>
    <link href="http://jackliu17.github.io/2016/08/02/Blocks/"/>
    <id>http://jackliu17.github.io/2016/08/02/Blocks/</id>
    <published>2016-08-02T05:19:02.000Z</published>
    <updated>2016-08-02T07:31:03.000Z</updated>
    
    <content type="html">&lt;p&gt;原文链接:&lt;a href=&quot;http://wiki.jikexueyuan.com/project/programming-with-objective-c/working-with-blocks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;working with block&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;什么是block&quot;&gt;&lt;a href=&quot;#什么是block&quot; class=&quot;headerlink&quot; title=&quot;什么是block&quot;&gt;&lt;/a&gt;什么是block&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;块是添加在 c，object-c 和 c++ 语言中的语言级别的形式，它允许你编写一个独特的代码段，这个代码段能够在作为值方法和函数中传递。&lt;/li&gt;
&lt;li&gt;块是 object-c 的对象，这意味着他们能够被添加到像NASArray或是NSDictionary的集合中.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;没有参数和返回值的块&quot;&gt;&lt;a href=&quot;#没有参数和返回值的块&quot; class=&quot;headerlink&quot; title=&quot;没有参数和返回值的块&quot;&gt;&lt;/a&gt;没有参数和返回值的块&lt;/h1&gt;&lt;p&gt;定义一个块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;^{
     NSLog(@&amp;quot;This is a block&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;声明块变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void (^simpleBlock)(void);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;块变量赋值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void (^simpleBlock)(void) = ^{
    NSLog(@&amp;quot;This is a block&amp;quot;);
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;块变量赋值的简约形式   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;simpleBlock = ^{
    NSLog(@&amp;quot;This is a block&amp;quot;);
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调用块命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;simpleBlock();
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;有参数和返回值的块&quot;&gt;&lt;a href=&quot;#有参数和返回值的块&quot; class=&quot;headerlink&quot; title=&quot;有参数和返回值的块&quot;&gt;&lt;/a&gt;有参数和返回值的块&lt;/h1&gt;&lt;p&gt;定义一个块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//1.

^ (double firstValue, double secondValue) {
    return firstValue * secondValue;
}

//2.
^ double (double firstValue, double secondValue) {
    return firstValue * secondValue;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;声明块变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;double (^multiplyTwoValues)(double, double);    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调用块命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;double (^multiplyTwoValues)(double, double) =
                          ^(double firstValue, double secondValue) {
                              return firstValue * secondValue;
                          };

double result = multiplyTwoValues(2,4);

NSLog(@&amp;quot;The result is %f&amp;quot;, result);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;块的值域&quot;&gt;&lt;a href=&quot;#块的值域&quot; class=&quot;headerlink&quot; title=&quot;块的值域&quot;&gt;&lt;/a&gt;块的值域&lt;/h1&gt;&lt;p&gt;如果你在一个方法中声明了块，他可以捕捉到任何在方法域中可以访问到的值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)testMethod {
int anInteger = 42;

void (^testBlock)(void) = ^{
    NSLog(@&amp;quot;Integer is: %i&amp;quot;, anInteger);
};

testBlock();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一旦捕获后，即使在捕获后和调用期间改变值，不受影响.块不能够改变初始变量的值，或者是被捕获的值  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int anInteger = 42;

void (^testBlock)(void) = ^{
    NSLog(@&amp;quot;Integer is: %i&amp;quot;, anInteger);
};

anInteger = 84;

testBlock();  

//Integer is: 42 
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;block变量（块变量的改变）&quot;&gt;&lt;a href=&quot;#block变量（块变量的改变）&quot; class=&quot;headerlink&quot; title=&quot;__block变量（块变量的改变）&quot;&gt;&lt;/a&gt;__block变量（块变量的改变）&lt;/h1&gt;&lt;p&gt;变量和块共享存储空间。变量改变，块内的也改变&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;__block int anInteger = 42;

void (^testBlock)(void) = ^{
NSLog(@&amp;quot;Integer is: %i&amp;quot;, anInteger);
};

anInteger = 84;
testBlock(); 

//Integer is：84
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;变量可以在块内被改变&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;__block int anInteger = 42;

void (^testBlock)(void) = ^{
    NSLog(@&amp;quot;Integer is: %i&amp;quot;, anInteger);
    anInteger = 100;
};

testBlock();
NSLog(@&amp;quot;Value of original variable is now: %i&amp;quot;, anInteger); 

//Integer is: 42
//Value of original variable is now: 100  
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;块作为方法或函数的参数&quot;&gt;&lt;a href=&quot;#块作为方法或函数的参数&quot; class=&quot;headerlink&quot; title=&quot;块作为方法或函数的参数&quot;&gt;&lt;/a&gt;块作为方法或函数的参数&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)beginTaskWithCallbackBlock:(void (^)(void))callbackBlock;


- (void)beginTaskWithCallbackBlock:(void (^)(void))callbackBlock {
...
callbackBlock();
}

- (void)doSomethingWithBlock:(void (^)(double, double))block {
...
block(21.0, 2.0);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;块应该总是一个方法的最后一个参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//声明
- (void)beginTaskWithName:(NSString *)name completion:(void(^)(void))callback;

//调用
[self beginTaskWithName:@&amp;quot;MyTask&amp;quot; completion:^{
    NSLog(@&amp;quot;The task is complete&amp;quot;);
}];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;块也用于回调 — 定义了当一个任务结束时将被执行的代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (IBAction)fetchRemoteInformation:(id)sender {
[self showProgressIndicator];

XYZWebTask *task = ...

[task beginTaskWithCallbackBlock:^{
    [self hideProgressIndicator];
}];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;定义块的数据类型&quot;&gt;&lt;a href=&quot;#定义块的数据类型&quot; class=&quot;headerlink&quot; title=&quot;定义块的数据类型&quot;&gt;&lt;/a&gt;定义块的数据类型&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;typedef void (^XYZSimpleBlock)(void);


XYZSimpleBlock anotherBlock = ^{
    ...
};


- (void)beginFetchWithCallbackBlock:(XYZSimpleBlock)callbackBlock {

...
callbackBlock();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该 complexBlock 变量是指一个块需要另一块作为一个参数（ABLOCK）并返回另一个块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void (^(^complexBlock)(void (^)(void)))(void) = ^ (void (^aBlock)(void)) {
...
return ^{
    ...
};
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重写代码使用类型定义使其可读性更高，将块定义成数据类型&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;XYZSimpleBlock (^betterBlock)(XYZSimpleBlock) = ^ (XYZSimpleBlock aBlock) {
...
return ^{
    ...
};
};
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;定义块为属性&quot;&gt;&lt;a href=&quot;#定义块为属性&quot; class=&quot;headerlink&quot; title=&quot;定义块为属性&quot;&gt;&lt;/a&gt;定义块为属性&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;@interface XYZObject : NSObject
@property (copy) void (^blockProperty)(void);  //通常使用copy,why?
@end


self.blockProperty = ^{
    ...
};
self.blockProperty();


使用块属性声明的类型定义

typedef void (^XYZSimpleBlock)(void);

@interface XYZObject : NSObject
@property (copy) XYZSimpleBlock blockProperty;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Avoid-Strong-Reference-Cycles-when-Capturing-self&quot;&gt;&lt;a href=&quot;#Avoid-Strong-Reference-Cycles-when-Capturing-self&quot; class=&quot;headerlink&quot; title=&quot;Avoid Strong Reference Cycles when Capturing self&quot;&gt;&lt;/a&gt;Avoid Strong Reference Cycles when Capturing self&lt;/h1&gt;&lt;p&gt;Blocks maintain strong references to any captured objects, including self, which means that it’s easy to end up with a strong reference cycle。 block对任何捕获的对象是强引用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface XYZBlockKeeper : NSObject
@property (copy) void (^block)(void);
@end

@implementation XYZBlockKeeper
- (void)configureBlock {
self.block = ^{
    [self doSomething];    // capturing a strong reference to self
                           // creates a strong reference cycle
};
}
...
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正确做法如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)configureBlock {
XYZBlockKeeper * __weak weakSelf = self;
self.block = ^{
    [weakSelf doSomething];   // capture the weak reference
                              // to avoid the reference cycle
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By capturing the weak pointer to self, the block won’t maintain a strong relationship back to the XYZBlockKeeper object. If that object is deallocated before the block is called, the weakSelf pointer will simply be set to nil.&lt;/p&gt;
&lt;h1 id=&quot;块可以简化枚举-待阅&quot;&gt;&lt;a href=&quot;#块可以简化枚举-待阅&quot; class=&quot;headerlink&quot; title=&quot;块可以简化枚举 (待阅)&quot;&gt;&lt;/a&gt;块可以简化枚举 (待阅)&lt;/h1&gt;&lt;h1 id=&quot;使用块操作与运行队列-待阅&quot;&gt;&lt;a href=&quot;#使用块操作与运行队列-待阅&quot; class=&quot;headerlink&quot; title=&quot;使用块操作与运行队列 (待阅)&quot;&gt;&lt;/a&gt;使用块操作与运行队列 (待阅)&lt;/h1&gt;&lt;h1 id=&quot;用GCD技术在调度队列调度块-待阅&quot;&gt;&lt;a href=&quot;#用GCD技术在调度队列调度块-待阅&quot; class=&quot;headerlink&quot; title=&quot;用GCD技术在调度队列调度块 (待阅)&quot;&gt;&lt;/a&gt;用GCD技术在调度队列调度块 (待阅)&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接:&lt;a href=&quot;http://wiki.jikexueyuan.com/project/programming-with-objective-c/working-with-blocks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;w
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="objective-C" scheme="http://jackliu17.github.io/tags/objective-C/"/>
    
  </entry>
  
  <entry>
    <title>AFNetworking简介</title>
    <link href="http://jackliu17.github.io/2016/08/01/AFNetworking%E7%AE%80%E4%BB%8B/"/>
    <id>http://jackliu17.github.io/2016/08/01/AFNetworking简介/</id>
    <published>2016-08-01T07:25:21.000Z</published>
    <updated>2016-08-03T11:12:49.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;HTTP请求&quot;&gt;&lt;a href=&quot;#HTTP请求&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求&quot;&gt;&lt;/a&gt;HTTP请求&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;NSString *urlStr = @&amp;quot;http://api.openweathermap.org/data/2.5/forecast/city?id=524901&amp;amp;APPID=bf791ba9eeca14dd22823b4c21ce7e2d&amp;quot;;

AFHTTPRequestOperationManager *manager            = [AFHTTPRequestOperationManager manager];

// 设置回复内容信息
manager.responseSerializer.acceptableContentTypes = [manager.responseSerializer.acceptableContentTypes
                                                     setByAddingObject:@&amp;quot;text/html&amp;quot;];

[manager GET:urlStr
  parameters:nil

     success:^(AFHTTPRequestOperation *operation, id responseObject) {

         //请求正文数据
         //NSLog(@&amp;quot;%@&amp;quot;,responseObject);

         //请求头部信息(我们执行网络请求的时候给服务器发送的信息)
         //NSLog(@&amp;quot;%@&amp;quot;,operation.request.allHTTPHeaderFields);

         //服务器返回的包的头部信息
         NSLog(@&amp;quot;%@&amp;quot;,operation.response);
     }
     failure:^(AFHTTPRequestOperation *operation, NSError *error) {

         NSLog(@&amp;quot;%@&amp;quot;,error);

     }];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;请求方法&quot;&gt;&lt;a href=&quot;#请求方法&quot; class=&quot;headerlink&quot; title=&quot;请求方法&quot;&gt;&lt;/a&gt;请求方法&lt;/h2&gt;&lt;p&gt;(GET、POST等)  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hypertext Transfer Protocol&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 执行POST请求，需要将参数写在parameter处，而不能如同get方法一样直接写在地址栏

[manager POST:@&amp;quot;http://webservice.webxml.com.cn/WebServices/MobileCodeWS.asmx/getMobileCodeInfo&amp;quot;
   parameters:@{@&amp;quot;mobileCode&amp;quot; : @&amp;quot;15910514636&amp;quot;,
                @&amp;quot;userID&amp;quot;     : @&amp;quot;&amp;quot;}
      success:^(AFHTTPRequestOperation *operation, id responseObject) {
          NSLog(@&amp;quot;%@&amp;quot;, responseObject);

      }
      failure:^(AFHTTPRequestOperation *operation, NSError *error) {
          NSLog(@&amp;quot;%@&amp;quot;, error);
      }];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;请求头&quot;&gt;&lt;a href=&quot;#请求头&quot; class=&quot;headerlink&quot; title=&quot;请求头&quot;&gt;&lt;/a&gt;请求头&lt;/h2&gt;&lt;p&gt;(HttpHeaderFields) &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_HTTP_header_fields&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;List of HTTP header fields&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//请求头部信息(我们执行网络请求的时候给服务器发送的信息)
NSLog(@&amp;quot;%@&amp;quot;,operation.request.allHTTPHeaderFields);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;请求正文-数据&quot;&gt;&lt;a href=&quot;#请求正文-数据&quot; class=&quot;headerlink&quot; title=&quot;请求正文 (数据)&quot;&gt;&lt;/a&gt;请求正文 (数据)&lt;/h2&gt;&lt;p&gt;问号后的字符串，使用get方法是可以在地址栏中看见的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSString *urlStr = @&amp;quot;http://api.openweathermap.org/data/2.5/forecast/city?id=524901&amp;amp;APPID=bf791ba9eeca14dd22823b4c21ce7e2d&amp;quot;;            
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;序列化&quot;&gt;&lt;a href=&quot;#序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化&quot;&gt;&lt;/a&gt;序列化&lt;/h2&gt;&lt;p&gt;采用不同的序列化格式，得到不同的response结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AFHTTPRequestOperationManager *manager            = [AFHTTPRequestOperationManager manager];

// 请求的序列化
manager.requestSerializer = [AFHTTPRequestSerializer serializer];

// 回复序列化

//responseObject就变成二进制文件
manager.responseSerializer[AFHTTPResponseSerializer serializer];

//responseObject就变成JSON格式
manager.responseSerializer = [AFJSONResponseSerializer serializer];

//responseObject成为xml格式
manager.responseSerializer = [AFXMLParserResponseSerializer serializer];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;上传文件&quot;&gt;&lt;a href=&quot;#上传文件&quot; class=&quot;headerlink&quot; title=&quot;上传文件&quot;&gt;&lt;/a&gt;上传文件&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;// 获取数据
UIImage *image  = [UIImage imageNamed:@&amp;quot;demo&amp;quot;];
NSData *dataObj = UIImageJPEGRepresentation(image, 1.0);

// 参数
NSDictionary *paras = @{@&amp;quot;ContactName&amp;quot;        : @&amp;quot;Lilis&amp;quot;,
                        @&amp;quot;ContactPhoneNumber&amp;quot; : @&amp;quot;15910514635&amp;quot;,
                        @&amp;quot;LoseDetail&amp;quot;         : @&amp;quot;...&amp;quot;,
                        @&amp;quot;address&amp;quot;            : @&amp;quot;&amp;quot;,
                        @&amp;quot;gender&amp;quot;             : @&amp;quot;2&amp;quot;,
                        @&amp;quot;verify&amp;quot;             : @&amp;quot;012460&amp;quot;};


[Networking UploadDataWithUrlString:BASE_URL // 请更换网址
                         parameters:paras
                    timeoutInterval:nil
                        requestType:HTTPRequestType
                       responseType:JSONResponseType
          constructingBodyWithBlock:^(id&amp;lt;AFMultipartFormData&amp;gt; formData) {
              // 构造数据的地方
              [formData appendPartWithFileData:dataObj name:@&amp;quot;upload&amp;quot; fileName:@&amp;quot;image1.jpg&amp;quot; mimeType:@&amp;quot;&amp;quot;];
              [formData appendPartWithFileData:dataObj name:@&amp;quot;upload&amp;quot; fileName:@&amp;quot;image2.jpg&amp;quot; mimeType:@&amp;quot;&amp;quot;];
          }
                            success:^(AFHTTPRequestOperation *operation, id responseObject) {

                                // 请求头
                                NSLog(@&amp;quot;%@&amp;quot;, operation.request.allHTTPHeaderFields);

                                // 服务器回复的头
                                NSLog(@&amp;quot;%@&amp;quot;, operation.response);

                                NSLog(@&amp;quot;%@&amp;quot;, responseObject);
                            }
                            failure:^(AFHTTPRequestOperation *operation, NSError *error) {


                            }];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;断点下载&quot;&gt;&lt;a href=&quot;#断点下载&quot; class=&quot;headerlink&quot; title=&quot;断点下载&quot;&gt;&lt;/a&gt;断点下载&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:@&amp;quot;http://c.hiphotos.baidu.com/image/pic/item/f3d3572c11dfa9ec78e256df60d0f703908fc12e.jpg&amp;quot;]];
AFDownloadRequestOperation *operation = [[AFDownloadRequestOperation alloc] initWithRequest:request
                                                                             fileIdentifier:@&amp;quot;fuck.jpg&amp;quot;
                                                                                 targetPath:[NSHomeDirectory() stringByAppendingPathComponent:@&amp;quot;/Library/Caches/fuck.jpg&amp;quot;]
                                                                               shouldResume:YES];
operation.shouldOverwrite = YES;


// 开始下载
[operation start];

// 2s后暂停
[GCDQueue executeInMainQueue:^{
    NSLog(@&amp;quot;暂停&amp;quot;);
    [operation pause];
} afterDelaySecs:2.f];

// 4s后继续恢复
[GCDQueue executeInMainQueue:^{
    NSLog(@&amp;quot;开始&amp;quot;);
    [operation resume];
} afterDelaySecs:4.f];

// 查看下载进度
[operation setProgressiveDownloadProgressBlock:^(AFDownloadRequestOperation *operation, NSInteger bytesRead, long long totalBytesRead, long long totalBytesExpected, long long totalBytesReadForFile, long long totalBytesExpectedToReadForFile) {

    CGFloat percent = (float)totalBytesReadForFile / (float)totalBytesExpectedToReadForFile;
    NSLog(@&amp;quot;百分比:%.3f%% %ld  %lld  %lld  %lld&amp;quot;, percent * 100, (long)bytesRead, totalBytesRead, totalBytesReadForFile, totalBytesExpectedToReadForFile);
}];

// 结束block
[operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) {

    NSLog(@&amp;quot;下载成功 %@&amp;quot;, responseObject);

} failure:^(AFHTTPRequestOperation *operation, NSError *error) {

    NSLog(@&amp;quot;下载失败 %@&amp;quot;, error);

}];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;监听网络&quot;&gt;&lt;a href=&quot;#监听网络&quot; class=&quot;headerlink&quot; title=&quot;监听网络&quot;&gt;&lt;/a&gt;监听网络&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {

// 开启网络指示器
[[AFNetworkActivityIndicatorManager sharedManager] setEnabled:YES];

NSURL *url = [NSURL URLWithString:@&amp;quot;http://baidu.com&amp;quot;];

AFHTTPRequestOperationManager *manager = [[AFHTTPRequestOperationManager alloc] initWithBaseURL:url];
NSOperationQueue *operationQueue       = manager.operationQueue;

[manager.reachabilityManager setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {

    switch (status) {
        case AFNetworkReachabilityStatusReachableViaWWAN:
        case AFNetworkReachabilityStatusReachableViaWiFi:

            [operationQueue setSuspended:NO];

            NSLog(@&amp;quot;有网络&amp;quot;);

            break;

        case AFNetworkReachabilityStatusNotReachable:
        default:

            [operationQueue setSuspended:YES];

            NSLog(@&amp;quot;无网络&amp;quot;);

            break;
    }

}];

// 开始监听
[manager.reachabilityManager startMonitoring];

return YES;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;下载图片（Category）&quot;&gt;&lt;a href=&quot;#下载图片（Category）&quot; class=&quot;headerlink&quot; title=&quot;下载图片（Category）&quot;&gt;&lt;/a&gt;下载图片（Category）&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;#import &amp;quot;ViewController.h&amp;quot;
#import &amp;quot;AFNetworking.h&amp;quot;
#import &amp;quot;UIKit+AFNetworking.h&amp;quot;
@interface ViewController ()

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

UIImageView *imageView = [[UIImageView alloc] initWithFrame:self.view.bounds];
[self.view addSubview:imageView];

// 加载图片
[imageView setImageWithURL:[NSURL URLWithString:@&amp;quot;http://c.hiphotos.baidu.com/image/pic/item/f3d3572c11dfa9ec78e256df60d0f703908fc12e.jpg&amp;quot;]
          placeholderImage:nil];
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP请求&quot;&gt;&lt;a href=&quot;#HTTP请求&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求&quot;&gt;&lt;/a&gt;HTTP请求&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;NSString *urlStr = @&amp;quot;http://api.openweath
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS_networking" scheme="http://jackliu17.github.io/tags/iOS-networking/"/>
    
  </entry>
  
  <entry>
    <title>手机屏幕图像尺寸说明</title>
    <link href="http://jackliu17.github.io/2016/07/29/%E6%89%8B%E6%9C%BA%E5%B1%8F%E5%B9%95%E5%9B%BE%E5%83%8F%E5%B0%BA%E5%AF%B8%E8%AF%B4%E6%98%8E/"/>
    <id>http://jackliu17.github.io/2016/07/29/手机屏幕图像尺寸说明/</id>
    <published>2016-07-29T06:41:29.000Z</published>
    <updated>2016-07-29T09:12:16.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;分辨率&quot;&gt;&lt;a href=&quot;#分辨率&quot; class=&quot;headerlink&quot; title=&quot;分辨率&quot;&gt;&lt;/a&gt;分辨率&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/kv8kxm9prub5bsx/MobileImageSize1.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;屏幕尺寸&quot;&gt;&lt;a href=&quot;#屏幕尺寸&quot; class=&quot;headerlink&quot; title=&quot;屏幕尺寸&quot;&gt;&lt;/a&gt;屏幕尺寸&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/prqfsl2tl84m01l/MobileImageSize2.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;像素密度&quot;&gt;&lt;a href=&quot;#像素密度&quot; class=&quot;headerlink&quot; title=&quot;像素密度&quot;&gt;&lt;/a&gt;像素密度&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ybjgllir4rb1xie/MobileImageSize3.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/x7jmtbnkqptdxhl/MobileImageSize4.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;逻辑像素与物理像素&quot;&gt;&lt;a href=&quot;#逻辑像素与物理像素&quot; class=&quot;headerlink&quot; title=&quot;逻辑像素与物理像素&quot;&gt;&lt;/a&gt;逻辑像素与物理像素&lt;/h1&gt;&lt;p&gt;苹果引进一个逻辑像素的概念(pt)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/vjhiwkcwwvjxbyv/MobileImageSize5.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/kve933ie18u0o04/MobileImageSize6.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/75nt73meb7zfica/MobileImageSize7.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;iPhone手机尺寸&quot;&gt;&lt;a href=&quot;#iPhone手机尺寸&quot; class=&quot;headerlink&quot; title=&quot;iPhone手机尺寸&quot;&gt;&lt;/a&gt;iPhone手机尺寸&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/mgwnsz022fn7n1e/MobileImageSize8.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/b4zff1iwnm9jknd/MobileImageSize9.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Android手机尺寸&quot;&gt;&lt;a href=&quot;#Android手机尺寸&quot; class=&quot;headerlink&quot; title=&quot;Android手机尺寸&quot;&gt;&lt;/a&gt;Android手机尺寸&lt;/h1&gt;&lt;p&gt;Android引进一个逻辑像素概念(dp)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/1r6tqvm5t0vp2sa/MobileImageSize10.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/bgoe3jpr14a9oh8/MobileImageSize11.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/lmrademl1wb6p1i/MobileImageSize12.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/3sz0oyx2rmdo8ob/MobileImageSize13.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分辨率&quot;&gt;&lt;a href=&quot;#分辨率&quot; class=&quot;headerlink&quot; title=&quot;分辨率&quot;&gt;&lt;/a&gt;分辨率&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/kv8kxm9prub5bsx/MobileImageSiz
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="UI" scheme="http://jackliu17.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>美食台系列</title>
    <link href="http://jackliu17.github.io/2016/07/24/%E7%BE%8E%E9%A3%9F%E5%8F%B0%E7%B3%BB%E5%88%97/"/>
    <id>http://jackliu17.github.io/2016/07/24/美食台系列/</id>
    <published>2016-07-24T11:01:05.000Z</published>
    <updated>2016-07-25T11:16:33.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;五花肉&quot;&gt;&lt;a href=&quot;#五花肉&quot; class=&quot;headerlink&quot; title=&quot;五花肉&quot;&gt;&lt;/a&gt;五花肉&lt;/h1&gt;&lt;h2 id=&quot;蒜泥白肉&quot;&gt;&lt;a href=&quot;#蒜泥白肉&quot; class=&quot;headerlink&quot; title=&quot;蒜泥白肉&quot;&gt;&lt;/a&gt;蒜泥白肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/8bIf4ESH1HU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;回锅肉&quot;&gt;&lt;a href=&quot;#回锅肉&quot; class=&quot;headerlink&quot; title=&quot;回锅肉&quot;&gt;&lt;/a&gt;回锅肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/bn5oQLbVCkU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;盐煎肉&quot;&gt;&lt;a href=&quot;#盐煎肉&quot; class=&quot;headerlink&quot; title=&quot;盐煎肉&quot;&gt;&lt;/a&gt;盐煎肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/bn5oQLbVCkU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;滷肉飯&quot;&gt;&lt;a href=&quot;#滷肉飯&quot; class=&quot;headerlink&quot; title=&quot;滷肉飯&quot;&gt;&lt;/a&gt;滷肉飯&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/cVVY9vSWoTw&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;糖醋丸子&quot;&gt;&lt;a href=&quot;#糖醋丸子&quot; class=&quot;headerlink&quot; title=&quot;糖醋丸子&quot;&gt;&lt;/a&gt;糖醋丸子&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/o4guUX24gLY&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;脆漿魚露炒豬肉&quot;&gt;&lt;a href=&quot;#脆漿魚露炒豬肉&quot; class=&quot;headerlink&quot; title=&quot;脆漿魚露炒豬肉&quot;&gt;&lt;/a&gt;脆漿魚露炒豬肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/Cdr0n9LhW5Q&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;猪里脊肉&quot;&gt;&lt;a href=&quot;#猪里脊肉&quot; class=&quot;headerlink&quot; title=&quot;猪里脊肉&quot;&gt;&lt;/a&gt;猪里脊肉&lt;/h1&gt;&lt;h2 id=&quot;京酱肉丝&quot;&gt;&lt;a href=&quot;#京酱肉丝&quot; class=&quot;headerlink&quot; title=&quot;京酱肉丝&quot;&gt;&lt;/a&gt;京酱肉丝&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/3LIRFpkMGss&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;自制肉松&quot;&gt;&lt;a href=&quot;#自制肉松&quot; class=&quot;headerlink&quot; title=&quot;自制肉松&quot;&gt;&lt;/a&gt;自制肉松&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/Ul8y6OI3qdQ&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;魚香肉絲&quot;&gt;&lt;a href=&quot;#魚香肉絲&quot; class=&quot;headerlink&quot; title=&quot;魚香肉絲&quot;&gt;&lt;/a&gt;魚香肉絲&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/R8GhfvkGSg4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;排骨&quot;&gt;&lt;a href=&quot;#排骨&quot; class=&quot;headerlink&quot; title=&quot;排骨&quot;&gt;&lt;/a&gt;排骨&lt;/h1&gt;&lt;h2 id=&quot;豆瓣排骨&quot;&gt;&lt;a href=&quot;#豆瓣排骨&quot; class=&quot;headerlink&quot; title=&quot;豆瓣排骨&quot;&gt;&lt;/a&gt;豆瓣排骨&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/pXPLgTFzdjc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;茄汁排骨&quot;&gt;&lt;a href=&quot;#茄汁排骨&quot; class=&quot;headerlink&quot; title=&quot;茄汁排骨&quot;&gt;&lt;/a&gt;茄汁排骨&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/4mixwX4ZnQk&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;可乐猪手&quot;&gt;&lt;a href=&quot;#可乐猪手&quot; class=&quot;headerlink&quot; title=&quot;可乐猪手&quot;&gt;&lt;/a&gt;可乐猪手&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/6eDfWxjFstw&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;羊肉&quot;&gt;&lt;a href=&quot;#羊肉&quot; class=&quot;headerlink&quot; title=&quot;羊肉&quot;&gt;&lt;/a&gt;羊肉&lt;/h1&gt;&lt;h2 id=&quot;羊肉抓飯&quot;&gt;&lt;a href=&quot;#羊肉抓飯&quot; class=&quot;headerlink&quot; title=&quot;羊肉抓飯&quot;&gt;&lt;/a&gt;羊肉抓飯&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/xy2wOHLlNw4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;牛&quot;&gt;&lt;a href=&quot;#牛&quot; class=&quot;headerlink&quot; title=&quot;牛&quot;&gt;&lt;/a&gt;牛&lt;/h1&gt;&lt;h2 id=&quot;夫妻肺片&quot;&gt;&lt;a href=&quot;#夫妻肺片&quot; class=&quot;headerlink&quot; title=&quot;夫妻肺片&quot;&gt;&lt;/a&gt;夫妻肺片&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/J3m10Rtr93E&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;干炒牛河&quot;&gt;&lt;a href=&quot;#干炒牛河&quot; class=&quot;headerlink&quot; title=&quot;干炒牛河&quot;&gt;&lt;/a&gt;干炒牛河&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/zmLqnJ7aCxc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;果味醬牛肉&quot;&gt;&lt;a href=&quot;#果味醬牛肉&quot; class=&quot;headerlink&quot; title=&quot;果味醬牛肉&quot;&gt;&lt;/a&gt;果味醬牛肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/WUchAc1EMqM&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;牛肉醬&quot;&gt;&lt;a href=&quot;#牛肉醬&quot; class=&quot;headerlink&quot; title=&quot;牛肉醬&quot;&gt;&lt;/a&gt;牛肉醬&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/FjGooH5ujks&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;乾拌牛肉&quot;&gt;&lt;a href=&quot;#乾拌牛肉&quot; class=&quot;headerlink&quot; title=&quot;乾拌牛肉&quot;&gt;&lt;/a&gt;乾拌牛肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/PZYfOp20eqA&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;酸湯肥牛&quot;&gt;&lt;a href=&quot;#酸湯肥牛&quot; class=&quot;headerlink&quot; title=&quot;酸湯肥牛&quot;&gt;&lt;/a&gt;酸湯肥牛&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/8SlM9nacW0g&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;香辣牛肉&quot;&gt;&lt;a href=&quot;#香辣牛肉&quot; class=&quot;headerlink&quot; title=&quot;香辣牛肉&quot;&gt;&lt;/a&gt;香辣牛肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/9UAiNu7-FSs&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;紅燴牛肉&quot;&gt;&lt;a href=&quot;#紅燴牛肉&quot; class=&quot;headerlink&quot; title=&quot;紅燴牛肉&quot;&gt;&lt;/a&gt;紅燴牛肉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/ztLroK642yE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;黑椒牛肉粒&quot;&gt;&lt;a href=&quot;#黑椒牛肉粒&quot; class=&quot;headerlink&quot; title=&quot;黑椒牛肉粒&quot;&gt;&lt;/a&gt;黑椒牛肉粒&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/IyRErvUbRD0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;鸡&quot;&gt;&lt;a href=&quot;#鸡&quot; class=&quot;headerlink&quot; title=&quot;鸡&quot;&gt;&lt;/a&gt;鸡&lt;/h1&gt;&lt;h2 id=&quot;泡椒鸡杂&quot;&gt;&lt;a href=&quot;#泡椒鸡杂&quot; class=&quot;headerlink&quot; title=&quot;泡椒鸡杂&quot;&gt;&lt;/a&gt;泡椒鸡杂&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/k-WVBevQ--0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;越式手撕雞&quot;&gt;&lt;a href=&quot;#越式手撕雞&quot; class=&quot;headerlink&quot; title=&quot;越式手撕雞&quot;&gt;&lt;/a&gt;越式手撕雞&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/z2tRhtuZ35g&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;大盤雞&quot;&gt;&lt;a href=&quot;#大盤雞&quot; class=&quot;headerlink&quot; title=&quot;大盤雞&quot;&gt;&lt;/a&gt;大盤雞&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/xXRWhkPEInA&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;手撕椒麻雞&quot;&gt;&lt;a href=&quot;#手撕椒麻雞&quot; class=&quot;headerlink&quot; title=&quot;手撕椒麻雞&quot;&gt;&lt;/a&gt;手撕椒麻雞&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/JlZfDRQT7rU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;宮保雞丁&quot;&gt;&lt;a href=&quot;#宮保雞丁&quot; class=&quot;headerlink&quot; title=&quot;宮保雞丁&quot;&gt;&lt;/a&gt;宮保雞丁&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/1dmVEzyM39Y&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;贵州辣子鸡&quot;&gt;&lt;a href=&quot;#贵州辣子鸡&quot; class=&quot;headerlink&quot; title=&quot;贵州辣子鸡&quot;&gt;&lt;/a&gt;贵州辣子鸡&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/dH5vRoXrcYA&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;胡椒豬肚雞&quot;&gt;&lt;a href=&quot;#胡椒豬肚雞&quot; class=&quot;headerlink&quot; title=&quot;胡椒豬肚雞&quot;&gt;&lt;/a&gt;胡椒豬肚雞&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/9dzS38rbW-U&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;鱼&quot;&gt;&lt;a href=&quot;#鱼&quot; class=&quot;headerlink&quot; title=&quot;鱼&quot;&gt;&lt;/a&gt;鱼&lt;/h1&gt;&lt;h2 id=&quot;照烧三文鱼&quot;&gt;&lt;a href=&quot;#照烧三文鱼&quot; class=&quot;headerlink&quot; title=&quot;照烧三文鱼&quot;&gt;&lt;/a&gt;照烧三文鱼&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/aRusvwikzjI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;糟溜鱼片&quot;&gt;&lt;a href=&quot;#糟溜鱼片&quot; class=&quot;headerlink&quot; title=&quot;糟溜鱼片&quot;&gt;&lt;/a&gt;糟溜鱼片&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/mFUx_lwX-Zg&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;和風秋刀魚&quot;&gt;&lt;a href=&quot;#和風秋刀魚&quot; class=&quot;headerlink&quot; title=&quot;和風秋刀魚&quot;&gt;&lt;/a&gt;和風秋刀魚&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/7ec-s_ZHWP0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;豆醬燜魚&quot;&gt;&lt;a href=&quot;#豆醬燜魚&quot; class=&quot;headerlink&quot; title=&quot;豆醬燜魚&quot;&gt;&lt;/a&gt;豆醬燜魚&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/tGtGYw3quGc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;豆瓣鯽魚&quot;&gt;&lt;a href=&quot;#豆瓣鯽魚&quot; class=&quot;headerlink&quot; title=&quot;豆瓣鯽魚&quot;&gt;&lt;/a&gt;豆瓣鯽魚&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/azlXWCGajr8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;烤三文魚茶泡飯&quot;&gt;&lt;a href=&quot;#烤三文魚茶泡飯&quot; class=&quot;headerlink&quot; title=&quot;烤三文魚茶泡飯&quot;&gt;&lt;/a&gt;烤三文魚茶泡飯&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/ZPp0RO-LNo8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;粵式蒸鱼&quot;&gt;&lt;a href=&quot;#粵式蒸鱼&quot; class=&quot;headerlink&quot; title=&quot;粵式蒸鱼&quot;&gt;&lt;/a&gt;粵式蒸鱼&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/vlI94p6_-GY&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;蛋&quot;&gt;&lt;a href=&quot;#蛋&quot; class=&quot;headerlink&quot; title=&quot;蛋&quot;&gt;&lt;/a&gt;蛋&lt;/h1&gt;&lt;h2 id=&quot;银鱼跑蛋&quot;&gt;&lt;a href=&quot;#银鱼跑蛋&quot; class=&quot;headerlink&quot; title=&quot;银鱼跑蛋&quot;&gt;&lt;/a&gt;银鱼跑蛋&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/V2Sc9vIkXwg&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;兩種滑蛋&quot;&gt;&lt;a href=&quot;#兩種滑蛋&quot; class=&quot;headerlink&quot; title=&quot;兩種滑蛋&quot;&gt;&lt;/a&gt;兩種滑蛋&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/xgfxqK5Ndeg&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;海鲜&quot;&gt;&lt;a href=&quot;#海鲜&quot; class=&quot;headerlink&quot; title=&quot;海鲜&quot;&gt;&lt;/a&gt;海鲜&lt;/h1&gt;&lt;h2 id=&quot;6種常見海鮮的處理方法&quot;&gt;&lt;a href=&quot;#6種常見海鮮的處理方法&quot; class=&quot;headerlink&quot; title=&quot;6種常見海鮮的處理方法&quot;&gt;&lt;/a&gt;6種常見海鮮的處理方法&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/P4z1lP55-E8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;沙薑爆炒八爪魚&quot;&gt;&lt;a href=&quot;#沙薑爆炒八爪魚&quot; class=&quot;headerlink&quot; title=&quot;沙薑爆炒八爪魚&quot;&gt;&lt;/a&gt;沙薑爆炒八爪魚&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/qr9TsIjtRW8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;白灼蝦&quot;&gt;&lt;a href=&quot;#白灼蝦&quot; class=&quot;headerlink&quot; title=&quot;白灼蝦&quot;&gt;&lt;/a&gt;白灼蝦&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/XwIvZp3loBs&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;檸檬葉香辣蝦&quot;&gt;&lt;a href=&quot;#檸檬葉香辣蝦&quot; class=&quot;headerlink&quot; title=&quot;檸檬葉香辣蝦&quot;&gt;&lt;/a&gt;檸檬葉香辣蝦&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/k3C6Kbpz5RQ&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;海鲜都好烧&quot;&gt;&lt;a href=&quot;#海鲜都好烧&quot; class=&quot;headerlink&quot; title=&quot;海鲜都好烧&quot;&gt;&lt;/a&gt;海鲜都好烧&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/b8ds0IaXPwQ&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;酒香蛤蜊&quot;&gt;&lt;a href=&quot;#酒香蛤蜊&quot; class=&quot;headerlink&quot; title=&quot;酒香蛤蜊&quot;&gt;&lt;/a&gt;酒香蛤蜊&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/Ox-oJhmzbe0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;瓜&quot;&gt;&lt;a href=&quot;#瓜&quot; class=&quot;headerlink&quot; title=&quot;瓜&quot;&gt;&lt;/a&gt;瓜&lt;/h1&gt;&lt;h2 id=&quot;苦瓜两吃&quot;&gt;&lt;a href=&quot;#苦瓜两吃&quot; class=&quot;headerlink&quot; title=&quot;苦瓜两吃&quot;&gt;&lt;/a&gt;苦瓜两吃&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/jn4tOFocYY8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;豆及豆腐&quot;&gt;&lt;a href=&quot;#豆及豆腐&quot; class=&quot;headerlink&quot; title=&quot;豆及豆腐&quot;&gt;&lt;/a&gt;豆及豆腐&lt;/h1&gt;&lt;h2 id=&quot;乾煸四季豆&quot;&gt;&lt;a href=&quot;#乾煸四季豆&quot; class=&quot;headerlink&quot; title=&quot;乾煸四季豆&quot;&gt;&lt;/a&gt;乾煸四季豆&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/0Mrnvcejhnc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;鍋塌豆腐&quot;&gt;&lt;a href=&quot;#鍋塌豆腐&quot; class=&quot;headerlink&quot; title=&quot;鍋塌豆腐&quot;&gt;&lt;/a&gt;鍋塌豆腐&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/E8avdm5B4Wg&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;客家釀豆腐&quot;&gt;&lt;a href=&quot;#客家釀豆腐&quot; class=&quot;headerlink&quot; title=&quot;客家釀豆腐&quot;&gt;&lt;/a&gt;客家釀豆腐&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/uoRUZfEKpH4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;面&quot;&gt;&lt;a href=&quot;#面&quot; class=&quot;headerlink&quot; title=&quot;面&quot;&gt;&lt;/a&gt;面&lt;/h1&gt;&lt;h2 id=&quot;香辣涼麵&quot;&gt;&lt;a href=&quot;#香辣涼麵&quot; class=&quot;headerlink&quot; title=&quot;香辣涼麵&quot;&gt;&lt;/a&gt;香辣涼麵&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/BxyQBjxYa4U&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;西兰花明太子意面&quot;&gt;&lt;a href=&quot;#西兰花明太子意面&quot; class=&quot;headerlink&quot; title=&quot;西兰花明太子意面&quot;&gt;&lt;/a&gt;西兰花明太子意面&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/cLrIEpIqLMI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;青红意面酱&quot;&gt;&lt;a href=&quot;#青红意面酱&quot; class=&quot;headerlink&quot; title=&quot;青红意面酱&quot;&gt;&lt;/a&gt;青红意面酱&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/u5jQal7e4Y0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;黑白意面酱&quot;&gt;&lt;a href=&quot;#黑白意面酱&quot; class=&quot;headerlink&quot; title=&quot;黑白意面酱&quot;&gt;&lt;/a&gt;黑白意面酱&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/v75P5GHuUm0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;熬葱油&quot;&gt;&lt;a href=&quot;#熬葱油&quot; class=&quot;headerlink&quot; title=&quot;熬葱油&quot;&gt;&lt;/a&gt;熬葱油&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/UGwgbCzZmg8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;酸辣粉&quot;&gt;&lt;a href=&quot;#酸辣粉&quot; class=&quot;headerlink&quot; title=&quot;酸辣粉&quot;&gt;&lt;/a&gt;酸辣粉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/4SKF1to5upM&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;肉末粉絲煲&quot;&gt;&lt;a href=&quot;#肉末粉絲煲&quot; class=&quot;headerlink&quot; title=&quot;肉末粉絲煲&quot;&gt;&lt;/a&gt;肉末粉絲煲&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/RiSinaoi01c&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;色拉及其他素食&quot;&gt;&lt;a href=&quot;#色拉及其他素食&quot; class=&quot;headerlink&quot; title=&quot;色拉及其他素食&quot;&gt;&lt;/a&gt;色拉及其他素食&lt;/h1&gt;&lt;h2 id=&quot;三款果蔬色拉&quot;&gt;&lt;a href=&quot;#三款果蔬色拉&quot; class=&quot;headerlink&quot; title=&quot;三款果蔬色拉&quot;&gt;&lt;/a&gt;三款果蔬色拉&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/XedAXkulCVs&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;四喜烤麩&quot;&gt;&lt;a href=&quot;#四喜烤麩&quot; class=&quot;headerlink&quot; title=&quot;四喜烤麩&quot;&gt;&lt;/a&gt;四喜烤麩&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/aWuAKJSivlk&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;燒椒茄子&quot;&gt;&lt;a href=&quot;#燒椒茄子&quot; class=&quot;headerlink&quot; title=&quot;燒椒茄子&quot;&gt;&lt;/a&gt;燒椒茄子&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/1ePZVtj1O3c&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;蔬菜的8種切法&quot;&gt;&lt;a href=&quot;#蔬菜的8種切法&quot; class=&quot;headerlink&quot; title=&quot;蔬菜的8種切法&quot;&gt;&lt;/a&gt;蔬菜的8種切法&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/LwJuEvg75pk&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;揚州炒飯&quot;&gt;&lt;a href=&quot;#揚州炒飯&quot; class=&quot;headerlink&quot; title=&quot;揚州炒飯&quot;&gt;&lt;/a&gt;揚州炒飯&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/jv72wu0yt_s&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;隔夜漬菜&quot;&gt;&lt;a href=&quot;#隔夜漬菜&quot; class=&quot;headerlink&quot; title=&quot;隔夜漬菜&quot;&gt;&lt;/a&gt;隔夜漬菜&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/nZl6jPx1LQE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;牛油果三吃&quot;&gt;&lt;a href=&quot;#牛油果三吃&quot; class=&quot;headerlink&quot; title=&quot;牛油果三吃&quot;&gt;&lt;/a&gt;牛油果三吃&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/I9MCZRU_oSE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;干锅花菜&quot;&gt;&lt;a href=&quot;#干锅花菜&quot; class=&quot;headerlink&quot; title=&quot;干锅花菜&quot;&gt;&lt;/a&gt;干锅花菜&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/2TURi0VZJj0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;手撕包菜&quot;&gt;&lt;a href=&quot;#手撕包菜&quot; class=&quot;headerlink&quot; title=&quot;手撕包菜&quot;&gt;&lt;/a&gt;手撕包菜&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/G25Iw5tGvK4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;调味料&quot;&gt;&lt;a href=&quot;#调味料&quot; class=&quot;headerlink&quot; title=&quot;调味料&quot;&gt;&lt;/a&gt;调味料&lt;/h1&gt;&lt;h2 id=&quot;自製三種調味醬油&quot;&gt;&lt;a href=&quot;#自製三種調味醬油&quot; class=&quot;headerlink&quot; title=&quot;自製三種調味醬油&quot;&gt;&lt;/a&gt;自製三種調味醬油&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/7-6xOFOBxSU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h1 id=&quot;高级菜品&quot;&gt;&lt;a href=&quot;#高级菜品&quot; class=&quot;headerlink&quot; title=&quot;高级菜品&quot;&gt;&lt;/a&gt;高级菜品&lt;/h1&gt;&lt;h2 id=&quot;扬州狮子头&quot;&gt;&lt;a href=&quot;#扬州狮子头&quot; class=&quot;headerlink&quot; title=&quot;扬州狮子头&quot;&gt;&lt;/a&gt;扬州狮子头&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/EJGK8GXkjpI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;五花肉&quot;&gt;&lt;a href=&quot;#五花肉&quot; class=&quot;headerlink&quot; title=&quot;五花肉&quot;&gt;&lt;/a&gt;五花肉&lt;/h1&gt;&lt;h2 id=&quot;蒜泥白肉&quot;&gt;&lt;a href=&quot;#蒜泥白肉&quot; class=&quot;headerlink&quot; title=&quot;蒜泥白肉&quot;&gt;&lt;/a&gt;蒜泥白
    
    </summary>
    
      <category term="情感杂谈" scheme="http://jackliu17.github.io/categories/%E6%83%85%E6%84%9F%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="food" scheme="http://jackliu17.github.io/tags/food/"/>
    
  </entry>
  
  <entry>
    <title>LBS兴趣点搜索</title>
    <link href="http://jackliu17.github.io/2016/07/24/LBS%E5%85%B4%E8%B6%A3%E7%82%B9%E6%90%9C%E7%B4%A2/"/>
    <id>http://jackliu17.github.io/2016/07/24/LBS兴趣点搜索/</id>
    <published>2016-07-24T10:42:27.000Z</published>
    <updated>2016-07-24T10:48:35.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;代码设置启动界面&quot;&gt;&lt;a href=&quot;#代码设置启动界面&quot; class=&quot;headerlink&quot; title=&quot;代码设置启动界面&quot;&gt;&lt;/a&gt;代码设置启动界面&lt;/h1&gt;&lt;p&gt;AppDelegate.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
ViewController * viewController = [[ViewController alloc] init];
UINavigationController * navigationController = [[UINavigationController alloc] initWithRootViewController:viewController];
[_window setRootViewController:navigationController];
[_window makeKeyAndVisible];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;颜色创建图片&quot;&gt;&lt;a href=&quot;#颜色创建图片&quot; class=&quot;headerlink&quot; title=&quot;颜色创建图片&quot;&gt;&lt;/a&gt;颜色创建图片&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (UIImage *)createImageFromColor:(UIColor *)color imageSize:(CGSize)size {

CGRect frame = CGRectMake(0, 0, size.width, size.height);
UIGraphicsBeginImageContext(size);
CGContextRef context = UIGraphicsGetCurrentContext();
CGContextSetFillColorWithColor(context, [color CGColor]);
CGContextFillRect(context, frame);
UIImage * image = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();
return image;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;UISearchBar设置背景图片&quot;&gt;&lt;a href=&quot;#UISearchBar设置背景图片&quot; class=&quot;headerlink&quot; title=&quot;UISearchBar设置背景图片&quot;&gt;&lt;/a&gt;UISearchBar设置背景图片&lt;/h1&gt;&lt;p&gt;如果不设置背景图片，SearchBar会有默认的银灰色背景方框&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[_searchBar setBackgroundImage:[self createImageFromColor:[UIColor orangeColor]
                                               imageSize:CGSizeMake(self.view.frame.size.width, 50)]];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;//当用户第一次搜索未完成时，又执行了第二次搜索，这样就需要cancel掉&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if(_localSearch.searching){
    [_localSearch cancel];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;键盘退出&quot;&gt;&lt;a href=&quot;#键盘退出&quot; class=&quot;headerlink&quot; title=&quot;键盘退出&quot;&gt;&lt;/a&gt;键盘退出&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;[_searchBar resignFirstResponder];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;隐藏导航栏&quot;&gt;&lt;a href=&quot;#隐藏导航栏&quot; class=&quot;headerlink&quot; title=&quot;隐藏导航栏&quot;&gt;&lt;/a&gt;隐藏导航栏&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)viewWillAppear:(BOOL)animated {
[super viewWillAppear:animated];
[self.navigationController setNavigationBarHidden:YES];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Cell-配置&quot;&gt;&lt;a href=&quot;#Cell-配置&quot; class=&quot;headerlink&quot; title=&quot;Cell 配置&quot;&gt;&lt;/a&gt;Cell 配置&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
[self.tableView registerClass:[UITableViewCell class] forCellReuseIdentifier:tableViewKey];
}

//这样不需要进行if判断                 
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {  
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:tableViewKey forIndexPath:indexPath];
    NSDictionary *dic = _talbeViewArray[indexPath.row];
    [cell.textLabel setText:dic[@&amp;quot;site&amp;quot;]];
    return cell;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;自定义导航视图返回按钮&quot;&gt;&lt;a href=&quot;#自定义导航视图返回按钮&quot; class=&quot;headerlink&quot; title=&quot;自定义导航视图返回按钮&quot;&gt;&lt;/a&gt;自定义导航视图返回按钮&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
[self setTitle:@&amp;quot;线路导航&amp;quot;];
self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@&amp;quot;返回&amp;quot;
                                                                         style:UIBarButtonItemStylePlain
                                                                        target:self
                                                                        action:@selector(returnPre)];
                                                                        }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;枚举识别数个按钮&quot;&gt;&lt;a href=&quot;#枚举识别数个按钮&quot; class=&quot;headerlink&quot; title=&quot;枚举识别数个按钮&quot;&gt;&lt;/a&gt;枚举识别数个按钮&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;typedef NS_ENUM(NSUInteger, FunctionSelet) {
LBS_GAME = 0,
LBS_EAT,
LBS_REST,
LBSE_BUSSION,
LBS_OTHER,
LBS_OTHER1,
LBS_OTHER2,
LBS_OTHER3,
LBS_OTHER4,
};

NSUInteger dataArr[] = {LBS_GAME,LBS_EAT,LBS_REST,LBSE_BUSSION,LBS_OTHER,LBS_OTHER1,LBS_OTHER2,LBS_OTHER3,LBS_OTHER4};

for .... {
[btn setTag:dataArr[i]];
}

- (void)theBtnPressed:(id)sender { 
UIButton * btn = (UIButton *)sender;
NSString * userSelectString = nil;
switch(btn.tag){
    case LBS_GAME:
        userSelectString = @&amp;quot;游戏&amp;quot;;
        NSLog(@&amp;quot;游戏&amp;quot;);
        break;
    case LBS_EAT:
        userSelectString = @&amp;quot;吃喝&amp;quot;;
        NSLog(@&amp;quot;吃喝&amp;quot;);
        break;
    case LBS_REST:
        userSelectString = @&amp;quot;休息&amp;quot;;
        NSLog(@&amp;quot;休息&amp;quot;);
        break;
    case LBSE_BUSSION:
        userSelectString = @&amp;quot;狂街&amp;quot;;
        NSLog(@&amp;quot;逛街&amp;quot;);
        break;
    default:
        userSelectString = @&amp;quot;other&amp;quot;;
        break;
}

[self gotoShowDataView:userSelectString];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;MKLocalSearch&quot;&gt;&lt;a href=&quot;#MKLocalSearch&quot; class=&quot;headerlink&quot; title=&quot;MKLocalSearch&quot;&gt;&lt;/a&gt;MKLocalSearch&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;MKLocalSearchRequest * searchRequest = [[MKLocalSearchRequest alloc] init];
searchRequest.naturalLanguageQuery = self.searchString;
MKCoordinateRegion region = MKCoordinateRegionMakeWithDistance(CLLocationCoordinate2DMake(-33.96820, 151.11060), 2000, 2000);
searchRequest.region = region;

_localSearch = [[MKLocalSearch alloc] initWithRequest:searchRequest];
[_localSearch startWithCompletionHandler:^(MKLocalSearchResponse *response, NSError *error) {

    [loadingLabel removeFromSuperview];

    if(response.mapItems.count == 0 || error){
        NSLog(@&amp;quot;error:%@&amp;quot;,error);
    }else{
        [_talbeViewArray addObjectsFromArray:response.mapItems];
        self.currentRegion = response.boundingRegion;
        [self.tableView setBounces:YES];
        [self.tableView setSeparatorStyle:UITableViewCellSeparatorStyleSingleLine];
        [self.tableView reloadData];
    }
}];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;实现当前位置到兴趣点的导航路线-略&quot;&gt;&lt;a href=&quot;#实现当前位置到兴趣点的导航路线-略&quot; class=&quot;headerlink&quot; title=&quot;实现当前位置到兴趣点的导航路线 (略)&quot;&gt;&lt;/a&gt;实现当前位置到兴趣点的导航路线 (略)&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;MKMapItem属性介绍&lt;/li&gt;
&lt;li&gt;MKDirectionsRequest属性设置&lt;/li&gt;
&lt;li&gt;MKDirections使用方法&lt;/li&gt;
&lt;li&gt;MKDirectionsResponse返回数据处理&lt;/li&gt;
&lt;li&gt;MKRoute讲解&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代码设置启动界面&quot;&gt;&lt;a href=&quot;#代码设置启动界面&quot; class=&quot;headerlink&quot; title=&quot;代码设置启动界面&quot;&gt;&lt;/a&gt;代码设置启动界面&lt;/h1&gt;&lt;p&gt;AppDelegate.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_window = [[UIWin
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_CoreLocation" scheme="http://jackliu17.github.io/tags/iOS-CoreLocation/"/>
    
      <category term="iOS_MapKit" scheme="http://jackliu17.github.io/tags/iOS-MapKit/"/>
    
  </entry>
  
  <entry>
    <title>CoreLocation框架详解</title>
    <link href="http://jackliu17.github.io/2016/06/10/CoreLocation%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jackliu17.github.io/2016/06/10/CoreLocation框架详解/</id>
    <published>2016-06-10T03:22:28.000Z</published>
    <updated>2016-07-31T04:12:37.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;定位基础及权限详解&quot;&gt;&lt;a href=&quot;#定位基础及权限详解&quot; class=&quot;headerlink&quot; title=&quot;定位基础及权限详解&quot;&gt;&lt;/a&gt;定位基础及权限详解&lt;/h1&gt;&lt;p&gt;Core Location框架为定位用户当前位置和方向（Heading）提供支持。负责从设备硬件收集信息并以异步方式报告给应用程序。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定位方式:Wifi、蜂窝式移动电话基站、GPS卫星&lt;/li&gt;
&lt;li&gt;定位优先级:GPS、Wifi、蜂窝式移动电话基站&lt;/li&gt;
&lt;li&gt;定位准确性:GPS卫星（准确性高，但局限性大，比较耗费设备电量）、Wifi及蜂窝式移动电话基站（Wifi依赖网络，蜂窝取决于基站密度，耗费流量）&lt;/li&gt;
&lt;li&gt;iOS开发中，不能指定使用哪种方式进行定位，iOS系统会根据设备情况和周围环境，采用一套最佳的定位解决方案。&lt;/li&gt;
&lt;li&gt;iOS设备通过定位来确定用户位置信息，因为涉及用户隐私问题，所以在用户使用地图定位功能之前会与用户之间有交互行为。&lt;/li&gt;
&lt;li&gt;服务过程：用户进行定位授权，同意则进行定位操作，反之提示用户无授权无法进行定位操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;通过CoreLocation实现定位功能&quot;&gt;&lt;a href=&quot;#通过CoreLocation实现定位功能&quot; class=&quot;headerlink&quot; title=&quot;通过CoreLocation实现定位功能&quot;&gt;&lt;/a&gt;通过CoreLocation实现定位功能&lt;/h1&gt;&lt;h2 id=&quot;定位权限申请&quot;&gt;&lt;a href=&quot;#定位权限申请&quot; class=&quot;headerlink&quot; title=&quot;定位权限申请&quot;&gt;&lt;/a&gt;定位权限申请&lt;/h2&gt;&lt;p&gt;在info.plist文件里设置以下属性，对应的string值将会显示在弹出的对话框&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSLocationAlwaysUsageDescription
NSLocationWhenInUseUsageDescription
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;定位权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if([_locationManager respondsToSelector:@selector(requestWhenInUseAuthorization)]){
    [_locationManager requestWhenInUseAuthorization];
    [_locationManager requestAlwaysAuthorization];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/0yao5q9riovmvu4/iOS_CLLocation01.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;位置管理器CLLocationManager&quot;&gt;&lt;a href=&quot;#位置管理器CLLocationManager&quot; class=&quot;headerlink&quot; title=&quot;位置管理器CLLocationManager&quot;&gt;&lt;/a&gt;位置管理器CLLocationManager&lt;/h2&gt;&lt;p&gt;ViewController &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController () &amp;lt;CLLocationManagerDelegate,MKMapViewDelegate&amp;gt;

@property (nonatomic, strong) MKMapView * mapView;
@property (nonatomic, strong) CLLocationManager * locationManager;

@end

@implementation ViewController
- (void)viewDidLoad {
[super viewDidLoad];
_mapView = [[MKMapView alloc] initWithFrame:self.view.bounds];
[_mapView setDelegate:self];

//允许显示用户位置
[_mapView setShowsUserLocation:YES];
[_mapView setMapType:MKMapTypeStandard];
[self.view addSubview:_mapView];

//检测定位功能是否开启
if([CLLocationManager locationServicesEnabled]){        
    if(!_locationManager){       
        _locationManager = [[CLLocationManager alloc] init];

        //定位权限
        if([_locationManager respondsToSelector:@selector(requestWhenInUseAuthorization)]){
            [_locationManager requestWhenInUseAuthorization];
            [_locationManager requestAlwaysAuthorization];
        }

        //设置代理
        [_locationManager setDelegate:self];
        //设置定位精度
        [_locationManager setDesiredAccuracy:kCLLocationAccuracyBest];
        //设置距离筛选
        [_locationManager setDistanceFilter:100];
        //开始定位
        [_locationManager startUpdatingLocation];
        //设置开始识别方向
        //[_locationManager startUpdatingHeading];
    }       
}else{

    UIAlertView * alertView = [[UIAlertView alloc] initWithTitle:nil
                                                         message:@&amp;quot;您没有开启定位功能&amp;quot;
                                                        delegate:nil
                                               cancelButtonTitle:@&amp;quot;确定&amp;quot;
                                               otherButtonTitles:nil, nil];
    [alertView show];
}

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;CLLocationManagerDelegate&quot;&gt;&lt;a href=&quot;#CLLocationManagerDelegate&quot; class=&quot;headerlink&quot; title=&quot;CLLocationManagerDelegate&quot;&gt;&lt;/a&gt;CLLocationManagerDelegate&lt;/h2&gt;&lt;h3 id=&quot;授权状态发生改变的时候执行&quot;&gt;&lt;a href=&quot;#授权状态发生改变的时候执行&quot; class=&quot;headerlink&quot; title=&quot;授权状态发生改变的时候执行&quot;&gt;&lt;/a&gt;授权状态发生改变的时候执行&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- (void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status {

switch(status){

    case kCLAuthorizationStatusDenied:
    {
        UIAlertView * alertView = [[UIAlertView alloc] initWithTitle:nil
                                                             message:@&amp;quot;定位功能没有开启&amp;quot; delegate:nil
                                                   cancelButtonTitle:@&amp;quot;确定&amp;quot; otherButtonTitles:nil,nil];
        [alertView show];
    }
        break;
    default:
        break;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;定位成功以后调用&quot;&gt;&lt;a href=&quot;#定位成功以后调用&quot; class=&quot;headerlink&quot; title=&quot;定位成功以后调用&quot;&gt;&lt;/a&gt;定位成功以后调用&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations {

//[_locationManager stopUpdatingLocation];
CLLocation * location = locations.lastObject;

MKCoordinateRegion coordinateRegion = MKCoordinateRegionMake(CLLocationCoordinate2DMake(location.coordinate.latitude, location.coordinate.longitude), MKCoordinateSpanMake(0.1, 0.1));

[_mapView setRegion:[_mapView regionThatFits:coordinateRegion] animated:YES];

//[self reverseGeocoder:location];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;定位失败&quot;&gt;&lt;a href=&quot;#定位失败&quot; class=&quot;headerlink&quot; title=&quot;定位失败&quot;&gt;&lt;/a&gt;定位失败&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error {
NSLog(@&amp;quot;error:%@&amp;quot;,error);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;CLGeocoder&quot;&gt;&lt;a href=&quot;#CLGeocoder&quot; class=&quot;headerlink&quot; title=&quot;CLGeocoder&quot;&gt;&lt;/a&gt;CLGeocoder&lt;/h1&gt;&lt;h2 id=&quot;地理编码-地址转经纬度&quot;&gt;&lt;a href=&quot;#地理编码-地址转经纬度&quot; class=&quot;headerlink&quot; title=&quot;地理编码 - 地址转经纬度&quot;&gt;&lt;/a&gt;地理编码 - 地址转经纬度&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;CLGeocoder * geocoder = [[CLGeocoder alloc] init];
[geocoder geocodeAddressString:str completionHandler:^(NSArray *placemarks, NSError *error) {

    if(error || placemarks.count == 0){
        NSLog(@&amp;quot;error&amp;quot;);
    }else{

        CLPlacemark * placemark = placemarks.firstObject;

        //设置显示区域
        MKCoordinateRegion coordinateRegion = MKCoordinateRegionMake(CLLocationCoordinate2DMake(placemark.location.coordinate.latitude, placemark.location.coordinate.longitude), MKCoordinateSpanMake(0.1, 0.1));
        [_mapView setRegion:[_mapView regionThatFits:coordinateRegion] animated:YES];

        //设置标注
        MKPointAnnotation * pointAnnotation = [[MKPointAnnotation alloc] init];
        [pointAnnotation setTitle:placemark.name];
        [pointAnnotation setCoordinate:CLLocationCoordinate2DMake(placemark.location.coordinate.latitude, placemark.location.coordinate.longitude)];
        [_mapView addAnnotation:pointAnnotation];
    }  
}];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;反地理编码-经纬度转地址&quot;&gt;&lt;a href=&quot;#反地理编码-经纬度转地址&quot; class=&quot;headerlink&quot; title=&quot;反地理编码 - 经纬度转地址&quot;&gt;&lt;/a&gt;反地理编码 - 经纬度转地址&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;CLGeocoder * geocoder = [[CLGeocoder alloc] init];
[geocoder reverseGeocodeLocation:currentLocation completionHandler:^(NSArray *placemarks, NSError *error) {

    if(error || placemarks.count == 0){
        NSLog(@&amp;quot;error&amp;quot;);
    }else{

        CLPlacemark * placemark = placemarks.firstObject;

         //设置标注
        MKPointAnnotation * pointAnnotation = [[MKPointAnnotation alloc] init];
        [pointAnnotation setTitle:placemark.name];
        [pointAnnotation setCoordinate:CLLocationCoordinate2DMake(placemark.location.coordinate.latitude, placemark.location.coordinate.longitude)];
        [_mapView addAnnotation:pointAnnotation];

        //设置显示区域
        MKCoordinateRegion coordinateRegion = MKCoordinateRegionMake(CLLocationCoordinate2DMake(placemark.location.coordinate.latitude, placemark.location.coordinate.longitude), MKCoordinateSpanMake(0.1, 0.1));   
        [_mapView setRegion:[_mapView regionThatFits:coordinateRegion] animated:YES];

        NSLog(@&amp;quot;placemark:%@&amp;quot;,[[placemark addressDictionary] objectForKey:@&amp;quot;City&amp;quot;]);
    }

}];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;CLPlacemark存储地址信息&quot;&gt;&lt;a href=&quot;#CLPlacemark存储地址信息&quot; class=&quot;headerlink&quot; title=&quot;CLPlacemark存储地址信息&quot;&gt;&lt;/a&gt;CLPlacemark存储地址信息&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;NSLog(@&amp;quot;placemark:%@&amp;quot;,[[placemark addressDictionary] objectForKey:@&amp;quot;City&amp;quot;]);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;屏幕触摸实现地理位置选择&quot;&gt;&lt;a href=&quot;#屏幕触摸实现地理位置选择&quot; class=&quot;headerlink&quot; title=&quot;屏幕触摸实现地理位置选择&quot;&gt;&lt;/a&gt;屏幕触摸实现地理位置选择&lt;/h1&gt;&lt;h2 id=&quot;长按设置坐标点&quot;&gt;&lt;a href=&quot;#长按设置坐标点&quot; class=&quot;headerlink&quot; title=&quot;长按设置坐标点&quot;&gt;&lt;/a&gt;长按设置坐标点&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;UILongPressGestureRecognizer * longpressGestureRecognizer = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(longPressed:)];
[_mapView addGestureRecognizer:longpressGestureRecognizer];


- (void)longPressed:(UILongPressGestureRecognizer *)recognizer {

if(recognizer.state == UIGestureRecognizerStateBegan){


    CGPoint point = [recognizer locationInView:_mapView];
    CLLocationCoordinate2D coordinate2D = [_mapView convertPoint:point toCoordinateFromView:_mapView];

    [_mapView removeAnnotations:_mapView.annotations];

    CLLocation * location = [[CLLocation alloc] initWithLatitude:coordinate2D.latitude longitude:coordinate2D.longitude];

    [self reverseGeocoder:location];

}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;获取地图界面点&quot;&gt;&lt;a href=&quot;#获取地图界面点&quot; class=&quot;headerlink&quot; title=&quot;获取地图界面点&quot;&gt;&lt;/a&gt;获取地图界面点&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;CGPoint point = [recognizer locationInView:_mapView];
CLLocationCoordinate2D coordinate2D = [_mapView convertPoint:point toCoordinateFromView:_mapView];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;移除原有的标注&quot;&gt;&lt;a href=&quot;#移除原有的标注&quot; class=&quot;headerlink&quot; title=&quot;移除原有的标注&quot;&gt;&lt;/a&gt;移除原有的标注&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;[_mapView removeAnnotations:_mapView.annotations];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;自定义标注&quot;&gt;&lt;a href=&quot;#自定义标注&quot; class=&quot;headerlink&quot; title=&quot;自定义标注&quot;&gt;&lt;/a&gt;自定义标注&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id&amp;lt;MKAnnotation&amp;gt;)annotation{
static NSString * key = @&amp;quot;key&amp;quot;;
MKPinAnnotationView * pinAnnotationView = (MKPinAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:key];

if(pinAnnotationView == nil){
    pinAnnotationView = [[MKPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:key];
    [pinAnnotationView setCanShowCallout:YES];
}

if([annotation isKindOfClass:[MKUserLocation class]]){
    [pinAnnotationView setPinColor:MKPinAnnotationColorRed];
    [((MKUserLocation *)annotation) setTitle:_titleString];
}else{
    [pinAnnotationView setPinColor:MKPinAnnotationColorPurple];
}
return pinAnnotationView;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认的是个蓝色闪烁点，如果自定义的话，就是插个大头针&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[_mapView setShowsUserLocation:YES];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;CoreLocation相关功能补充&quot;&gt;&lt;a href=&quot;#CoreLocation相关功能补充&quot; class=&quot;headerlink&quot; title=&quot;CoreLocation相关功能补充&quot;&gt;&lt;/a&gt;CoreLocation相关功能补充&lt;/h1&gt;&lt;p&gt;CLHeading介绍&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//设置开始识别方向
[_locationManager startUpdatingHeading];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;位置更新&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//定位成功以后就停止位置更新
- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations {
......
[_locationManager stopUpdatingLocation];

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h1&gt;&lt;h2 id=&quot;文本框键盘退出&quot;&gt;&lt;a href=&quot;#文本框键盘退出&quot; class=&quot;headerlink&quot; title=&quot;文本框键盘退出&quot;&gt;&lt;/a&gt;文本框键盘退出&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;[_textField resignFirstResponder];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;文本框输入的判断&quot;&gt;&lt;a href=&quot;#文本框输入的判断&quot; class=&quot;headerlink&quot; title=&quot;文本框输入的判断&quot;&gt;&lt;/a&gt;文本框输入的判断&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;if([_textField.text length] == 0){

    return;
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定位基础及权限详解&quot;&gt;&lt;a href=&quot;#定位基础及权限详解&quot; class=&quot;headerlink&quot; title=&quot;定位基础及权限详解&quot;&gt;&lt;/a&gt;定位基础及权限详解&lt;/h1&gt;&lt;p&gt;Core Location框架为定位用户当前位置和方向（Heading）提供支持。负
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_CoreLocation" scheme="http://jackliu17.github.io/tags/iOS-CoreLocation/"/>
    
  </entry>
  
  <entry>
    <title>MapKit地图应用基础</title>
    <link href="http://jackliu17.github.io/2016/06/08/MapKit%E5%9C%B0%E5%9B%BE%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%80/"/>
    <id>http://jackliu17.github.io/2016/06/08/MapKit地图应用基础/</id>
    <published>2016-06-08T05:38:00.000Z</published>
    <updated>2016-07-31T13:00:11.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;MapKit基础讲解&quot;&gt;&lt;a href=&quot;#MapKit基础讲解&quot; class=&quot;headerlink&quot; title=&quot;MapKit基础讲解&quot;&gt;&lt;/a&gt;MapKit基础讲解&lt;/h1&gt;&lt;p&gt;Map Kit（地图套件）提供了一个接口，可以将地图直接嵌入到自己的视图中。通过Map Kit框架，可以在iOS应用程序中显示地图以及当前位置。通过属性的设定，可以轻松实现位置显示、添加地图注释，通过给定信息查找确定地标信息等相关功能。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MKMapView：提供了一个可嵌入应用的地图界面。&lt;/li&gt;
&lt;li&gt;MKCoordinateRegin：设置地图显示区域。&lt;/li&gt;
&lt;li&gt;MKPointAnnotation：提供了在指定点添加注释的功能，不能自定义该类。&lt;/li&gt;
&lt;li&gt;MKPinAnnotation：通过此类可以对地图标注进行配置。&lt;/li&gt;
&lt;li&gt;MKAnnotationView：通过此类实现自定义地图标注功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/895ubxdvyo136lh/iOS_MapKitBasic02.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;创建地图应用&quot;&gt;&lt;a href=&quot;#创建地图应用&quot; class=&quot;headerlink&quot; title=&quot;创建地图应用&quot;&gt;&lt;/a&gt;创建地图应用&lt;/h1&gt;&lt;h2 id=&quot;添加MKMapView到视图&quot;&gt;&lt;a href=&quot;#添加MKMapView到视图&quot; class=&quot;headerlink&quot; title=&quot;添加MKMapView到视图&quot;&gt;&lt;/a&gt;添加MKMapView到视图&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;MKMapView * mapView = [[MKMapView alloc] initWithFrame:self.view.bounds];
[self.view addSubview:mapView];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;MKMapView相关属性&quot;&gt;&lt;a href=&quot;#MKMapView相关属性&quot; class=&quot;headerlink&quot; title=&quot;MKMapView相关属性&quot;&gt;&lt;/a&gt;MKMapView相关属性&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;[mapView setDelegate:self];
[mapView setMapType:MKMapTypeStandard]; //有卫星，标准地图等
[mapView setZoomEnabled:YES];  //设置地图缩放
[mapView setScrollEnabled:YES]; //设置地图移动
[mapView setRotateEnabled:YES]; //设置地图旋转
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;地图的显示区域&quot;&gt;&lt;a href=&quot;#地图的显示区域&quot; class=&quot;headerlink&quot; title=&quot;地图的显示区域&quot;&gt;&lt;/a&gt;地图的显示区域&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//Method.1 -- 通过跨度来设置地图的显示区域
//MKCoordinateRegion region = MKCoordinateRegionMake(CLLocationCoordinate2DMake(-37.855339, 145.153377), MKCoordinateSpanMake(0.1, 0.1));

//Method.2 -- 通过距离来设置地图显示区域
MKCoordinateRegion region = MKCoordinateRegionMakeWithDistance(CLLocationCoordinate2DMake(-37.855339, 145.153377),100 ,100);

[mapView setRegion:[mapView regionThatFits:region]];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;添加地图标注&quot;&gt;&lt;a href=&quot;#添加地图标注&quot; class=&quot;headerlink&quot; title=&quot;添加地图标注&quot;&gt;&lt;/a&gt;添加地图标注&lt;/h1&gt;&lt;h2 id=&quot;设置地点坐标&quot;&gt;&lt;a href=&quot;#设置地点坐标&quot; class=&quot;headerlink&quot; title=&quot;设置地点坐标&quot;&gt;&lt;/a&gt;设置地点坐标&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//Method.1
CLLocationCoordinate2D coordinate2D = CLLocationCoordinate2DMake(39.936846 , 116.503729);

//Method.2
CLLocationCoordinate2D coordinate2D;
coordinate2D.latitude = 39.936846;
coordinate2D.longitude = 116.503729;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;指定坐标点添加标注&quot;&gt;&lt;a href=&quot;#指定坐标点添加标注&quot; class=&quot;headerlink&quot; title=&quot;指定坐标点添加标注&quot;&gt;&lt;/a&gt;指定坐标点添加标注&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;MKPointAnnotation * pointAnntation1 = [[MKPointAnnotation alloc] init];
[pointAnntation1 setTitle:@&amp;quot;当前位置&amp;quot;];
[pointAnntation1 setSubtitle:@&amp;quot;位置说明&amp;quot;];
[pointAnntation1 setCoordinate:coordinate2D];
[mapView addAnnotation:pointAnntation1];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;添加多个标注&quot;&gt;&lt;a href=&quot;#添加多个标注&quot; class=&quot;headerlink&quot; title=&quot;添加多个标注&quot;&gt;&lt;/a&gt;添加多个标注&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//标注一
MKPointAnnotation * pointAnntation1 = [[MKPointAnnotation alloc] init];
[pointAnntation1 setTitle:@&amp;quot;当前位置&amp;quot;];
[pointAnntation1 setSubtitle:@&amp;quot;位置说明&amp;quot;];
[pointAnntation1 setCoordinate:coordinate2D];

//标注二
MKPointAnnotation * pointAnntation2 = [[MKPointAnnotation alloc] init];
[pointAnntation2 setTitle:@&amp;quot;当前位置&amp;quot;];
[pointAnntation2 setSubtitle:@&amp;quot;位置说明&amp;quot;];
[pointAnntation2 setCoordinate:coordinate2d];

NSArray * arrAnnitations = @[pointAnntation1,pointAnntation2];
[mapView addAnnotations:arrAnnitations];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;地图启动时显示标注气泡&quot;&gt;&lt;a href=&quot;#地图启动时显示标注气泡&quot; class=&quot;headerlink&quot; title=&quot;地图启动时显示标注气泡&quot;&gt;&lt;/a&gt;地图启动时显示标注气泡&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;[mapView selectAnnotation:pointAnntation1 animated:YES];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;设置标注样式&quot;&gt;&lt;a href=&quot;#设置标注样式&quot; class=&quot;headerlink&quot; title=&quot;设置标注样式&quot;&gt;&lt;/a&gt;设置标注样式&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id&amp;lt;MKAnnotation&amp;gt;)annotation{

static NSString * pinIdentifier = @&amp;quot;pin&amp;quot;;

MKPinAnnotationView * pintAnntation = (MKPinAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:pinIdentifier];

if(!pintAnntation){

        pintAnntation = [[MKPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:pinIdentifier];
        [pintAnntation setPinColor:MKPinAnnotationColorPurple];
        [pintAnntation setAnimatesDrop:YES];
        [pintAnntation setCanShowCallout:YES];
}

return pintAnntation;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;自定义标注视图&quot;&gt;&lt;a href=&quot;#自定义标注视图&quot; class=&quot;headerlink&quot; title=&quot;自定义标注视图&quot;&gt;&lt;/a&gt;自定义标注视图&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;创建annotation object,并实现MKAnnotation协议&lt;/li&gt;
&lt;li&gt;创建自定义标注视图，继承自MKAnnotationView&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
...............
CLLocationCoordinate2D coordinate2D = CLLocationCoordinate2DMake(39.936846, 116.503729);
CustomAnnotation * customAnnotation = [[CustomAnnotation alloc] initWithCoordinate2D:coordinate2D];
[customAnnotation setTitle:@&amp;quot;我的位置&amp;quot;];
[customAnnotation setSubTitle:@&amp;quot;具体说明&amp;quot;];
[mapView addAnnotation:customAnnotation];    
}


- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id&amp;lt;MKAnnotation&amp;gt;)annotation{
static NSString * customIdentifier = @&amp;quot;customView&amp;quot;;

CustomAnnotationView * customAnnotationView = (CustomAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:customIdentifier];
if(!customAnnotationView){
    customAnnotationView = [[CustomAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:customIdentifier];
    [customAnnotationView setImage:[UIImage imageNamed:@&amp;quot;an&amp;quot;]];
    }
    return customAnnotationView;    
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CustomAnnotation&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface CustomAnnotation : NSObject&amp;lt;MKAnnotation&amp;gt;{
CLLocationCoordinate2D coord;
}

@property (nonatomic, readonly) CLLocationCoordinate2D coord;

@property (nonatomic, copy) NSString * title;
@property (nonatomic, copy) NSString * subTitle;

- (instancetype)initWithCoordinate2D:(CLLocationCoordinate2D)coordinate2D;

@end

@implementation CustomAnnotation
@synthesize coord;
@synthesize title,subTitle;

- (instancetype)initWithCoordinate2D:(CLLocationCoordinate2D)coordinate2D{
self = [super init];
if(self){
    coord = coordinate2D;
}

return self;
}

- (CLLocationCoordinate2D)coordinate{
return coord;
}

- (NSString *)title{
return title;
}

- (NSString *)subtitle{
return subTitle;
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CustomAnnotationView&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface CustomAnnotationView : MKAnnotationView

@end

@interface CustomAnnotationView()

@property (nonatomic, strong) CustomAnnotation * customAnnotation;
@property (nonatomic, strong) UIView *infoView;

@end

@implementation CustomAnnotationView

- (instancetype)initWithAnnotation:(id&amp;lt;MKAnnotation&amp;gt;)annotation reuseIdentifier:(NSString *)reuseIdentifier{
self = [super initWithAnnotation:annotation reuseIdentifier:reuseIdentifier];
if(self){
    self.customAnnotation = annotation;
}

return self;
}

- (void)setSelected:(BOOL)selected animated:(BOOL)animated{
[super setSelected:selected animated:animated];
if(selected){
    self.infoView = [[UIView alloc] initWithFrame:CGRectMake(-(150-50)/2, -30, 150, 30)];
    [_infoView.layer setBorderColor:[UIColor blackColor].CGColor];
    [_infoView.layer setBorderWidth:1.f];
    [_infoView.layer setCornerRadius:5.f];
    [self.infoView setBackgroundColor:[UIColor whiteColor]];
    [self addSubview:self.infoView];

    UILabel * label = [[UILabel alloc] initWithFrame:_infoView.bounds];
    [label setFont:[UIFont systemFontOfSize:12]];
    [label setTextAlignment:NSTextAlignmentCenter];
    [label setText:[NSString stringWithFormat:@&amp;quot;%f %f&amp;quot;,_customAnnotation.coordinate.latitude,_customAnnotation.coordinate.longitude]];
    [_infoView addSubview:label];

    CGFloat scale = 0.001f;

    [_infoView setTransform:CGAffineTransformMake(scale, 0, 0, scale, 0, 0)];
    [UIView animateWithDuration:0.15 delay:0 options:UIViewAnimationOptionCurveEaseOut animations:^{
        CGFloat scale = 1.1f;
        [_infoView setTransform:CGAffineTransformMake(scale, 0, 0, scale, 0, 2)];
    } completion:^(BOOL finished) {
        [UIView animateWithDuration:0.1 delay:0 options:UIViewAnimationOptionCurveEaseOut animations:^{
            CGFloat scale = 0.9;
            [_infoView setTransform:CGAffineTransformMake(scale, 0, 0, scale, 0, -2)];
        } completion:^(BOOL finished) {
            [UIView animateWithDuration:0.075 delay:0 options:UIViewAnimationOptionCurveEaseInOut animations:^{
                CGFloat scale = 1.0f;
                [_infoView setTransform:CGAffineTransformMake(scale, 0, 0, scale, 0, 0)];
            } completion:^(BOOL finished) {}];
        }];
    }];


}else{
    [UIView animateWithDuration:0.2 animations:^{
        [_infoView setAlpha:0.1];
    } completion:^(BOOL finished) {
        [_infoView removeFromSuperview];
    }];
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;选中标注时执行&quot;&gt;&lt;a href=&quot;#选中标注时执行&quot; class=&quot;headerlink&quot; title=&quot;选中标注时执行&quot;&gt;&lt;/a&gt;选中标注时执行&lt;/h2&gt;&lt;p&gt;MKAnnotationView &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)setSelected:(BOOL)selected animated:(BOOL)animated{


}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;MKMapView代理方法讲解&quot;&gt;&lt;a href=&quot;#MKMapView代理方法讲解&quot; class=&quot;headerlink&quot; title=&quot;MKMapView代理方法讲解&quot;&gt;&lt;/a&gt;MKMapView代理方法讲解&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)mapViewWillStartLoadingMap:(MKMapView *)mapView{
    //地图将要载入执行
}

- (void)mapViewDidFinishLoadingMap:(MKMapView *)mapView{
    //地图载入完成以后执行
}

- (void)mapViewDidFailLoadingMap:(MKMapView *)mapView withError:(NSError *)error{
    //地图载入失败执行
    NSLog(@&amp;quot;error:%@&amp;quot;,[error description]);
}

- (void)mapView:(MKMapView *)mapView regionWillChangeAnimated:(BOOL)animated{
    //地图显示区域将要发生改变时执行
        UIAlertView * alertView = [[UIAlertView alloc] initWithTitle:@&amp;quot;提示&amp;quot; message:@&amp;quot;地图位置将要改变&amp;quot; delegate:nil cancelButtonTitle:nil otherButtonTitles:@&amp;quot;确定&amp;quot;, nil];
        [alertView show];
}

- (void)mapView:(MKMapView *)mapView regionDidChangeAnimated:(BOOL)animated{
    //地图显示区域改变以后执行
            UIAlertView * alertView = [[UIAlertView alloc] initWithTitle:@&amp;quot;提示&amp;quot; message:@&amp;quot;地图位置已经改变&amp;quot; delegate:nil cancelButtonTitle:nil otherButtonTitles:@&amp;quot;确定&amp;quot;, nil];
            [alertView show];

}

//添加标注时调用
- (void)mapView:(MKMapView *)mapView didAddAnnotationViews:(NSArray *)views{

}

//标注被选中时执行此方法
- (void)mapView:(MKMapView *)mapView didSelectAnnotationView:(MKAnnotationView *)view{

}

//标注失去焦点时执行
- (void)mapView:(MKMapView *)mapView didDeselectAnnotationView:(MKAnnotationView *)view{

}

//添加左右配件控件时才会调用
- (void)mapView:(MKMapView *)mapView annotationView:(MKAnnotationView *)view calloutAccessoryControlTapped:(UIControl *)control {

}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MapKit基础讲解&quot;&gt;&lt;a href=&quot;#MapKit基础讲解&quot; class=&quot;headerlink&quot; title=&quot;MapKit基础讲解&quot;&gt;&lt;/a&gt;MapKit基础讲解&lt;/h1&gt;&lt;p&gt;Map Kit（地图套件）提供了一个接口，可以将地图直接嵌入到自己的视图中。
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_MapKit" scheme="http://jackliu17.github.io/tags/iOS-MapKit/"/>
    
  </entry>
  
  <entry>
    <title>iOS推送通知流程</title>
    <link href="http://jackliu17.github.io/2016/06/07/iOS%E6%8E%A8%E9%80%81%E9%80%9A%E7%9F%A5%E6%B5%81%E7%A8%8B/"/>
    <id>http://jackliu17.github.io/2016/06/07/iOS推送通知流程/</id>
    <published>2016-06-07T08:46:28.000Z</published>
    <updated>2016-07-31T04:41:52.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/mclekty67botrv0/iOS_pushNotificationProcess.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/mclekty67botrv0/iOS_pushNotificationProcess.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目20-Swift实现PM2.5显示</title>
    <link href="http://jackliu17.github.io/2016/06/07/iOS%E9%A1%B9%E7%9B%AE20-Swift%E5%AE%9E%E7%8E%B0PM2-5%E6%98%BE%E7%A4%BA/"/>
    <id>http://jackliu17.github.io/2016/06/07/iOS项目20-Swift实现PM2-5显示/</id>
    <published>2016-06-07T08:34:45.000Z</published>
    <updated>2016-06-07T09:13:32.000Z</updated>
    
    <content type="html">&lt;pre&gt;&lt;code&gt;func loadPM25Data(){

msgLabel.text = &amp;quot;Loding...&amp;quot;

    NSURLConnection.sendAsynchronousRequest(NSURLRequest(URL: NSURL(string:&amp;quot;http://aqicn.org/publishingdata/json&amp;quot;)!), queue: NSOperationQueue.mainQueue()) { (resp:NSURLResponse?, data:NSData?, error:NSError?) in

        do {let jsonArr = try NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments)
        let firstData = (jsonArr as! NSArray).objectAtIndex(0)
        let pollutants = firstData.valueForKey(&amp;quot;pollutants&amp;quot;)
            let pm2_5 = (pollutants as! NSArray).objectAtIndex(0)
            let theValue = pm2_5.valueForKey(&amp;quot;value&amp;quot;)

            self.msgLabel.text = &amp;quot;PM2.5:\(theValue!)&amp;quot;


        }catch{

        print(&amp;quot;Hello&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;func loadPM25Data(){

msgLabel.text = &amp;quot;Loding...&amp;quot;

    NSURLConnection.sendAsynchronousRequest(NSURLRequest(URL: NSURL(
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目19-Swift实现天气预报</title>
    <link href="http://jackliu17.github.io/2016/06/07/iOS%E9%A1%B9%E7%9B%AE19-Swift%E5%AE%9E%E7%8E%B0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/"/>
    <id>http://jackliu17.github.io/2016/06/07/iOS项目19-Swift实现天气预报/</id>
    <published>2016-06-07T08:11:07.000Z</published>
    <updated>2016-06-07T08:13:02.000Z</updated>
    
    <content type="html">&lt;pre&gt;&lt;code&gt;import UIKit

class ViewController: UIViewController {

@IBOutlet var tv:UITextView?

@IBAction func btnPressed(sender:AnyObject){

    loadWeather()
}

override func viewDidLoad() {
    super.viewDidLoad()

     loadWeather()
}


func loadWeather(){

    let url = NSURL(string: &amp;quot;http://www.weather.com.cn/data/sk/101010100.html&amp;quot;)

    let weatherData = NSData(contentsOfURL: url!)

    do {

let json =  try NSJSONSerialization.JSONObjectWithData(weatherData!, options: NSJSONReadingOptions.AllowFragments) as! NSDictionary

        let weatherInfo = json.objectForKey(&amp;quot;weatherinfo&amp;quot;)
        let city = weatherInfo!.objectForKey(&amp;quot;city&amp;quot;)
        let temp = weatherInfo!.objectForKey(&amp;quot;temp&amp;quot;)
        let wind = weatherInfo!.objectForKey(&amp;quot;WD&amp;quot;)
        let ws : AnyObject! = weatherInfo!.objectForKey(&amp;quot;WS&amp;quot;)
        tv!.text = &amp;quot;城市：\(city)\n温度：\(temp)\n风：\(wind)\n风级：\(ws)&amp;quot;
    } catch {
        print(&amp;quot;Hello&amp;quot;)
    }
}
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;import UIKit

class ViewController: UIViewController {

@IBOutlet var tv:UITextView?

@IBAction func btnPressed(sender:AnyObject)
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-中介者</title>
    <link href="http://jackliu17.github.io/2016/06/06/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85/"/>
    <id>http://jackliu17.github.io/2016/06/06/iOS设计模式-中介者/</id>
    <published>2016-06-06T06:54:09.000Z</published>
    <updated>2016-07-31T04:54:50.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;中介模式&quot;&gt;&lt;a href=&quot;#中介模式&quot; class=&quot;headerlink&quot; title=&quot;中介模式&quot;&gt;&lt;/a&gt;中介模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;中介者模式：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。&lt;/li&gt;
&lt;li&gt;中介者模式解决的问题:解耦 / 降低复杂度，从混乱的网状结构变成线状 / 增加程序可维护性&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;情形1:&lt;/th&gt;
&lt;th&gt;情形2:&lt;/th&gt;
&lt;th&gt;情形3:&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;B:9500&lt;/td&gt;
&lt;td&gt;B:8000&lt;/td&gt;
&lt;td&gt;B:11000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D:9000&lt;/td&gt;
&lt;td&gt;D:8000&lt;/td&gt;
&lt;td&gt;D:11000 &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/y5dx2bzuvl3ruzg/iOS_designPatternMediator02.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/hiwds9gy7syplxs/iOS_designPatternMediator03.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/8sqw87ls7sdyzh9/iOS_designPatternMediator01.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;AbstractMediator&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface AbstractMediator : NSObject &amp;lt;ColleagueDelegate&amp;gt;

@end

@implementation AbstractMediator

- (void)colleagueEvent:(AbstractColleague *)event {

}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;AbstractColleague&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@class AbstractColleague;

@protocol ColleagueDelegate &amp;lt;NSObject&amp;gt;

@optional

//colleague对象的交互
- (void)colleagueEvent:(AbstractColleague *)event;

@end

@interface AbstractColleague : NSObject

@property (nonatomic, weak) id &amp;lt;ColleagueDelegate&amp;gt; delegate;

@end
@implementation AbstractColleague

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;MVC与中介者&quot;&gt;&lt;a href=&quot;#MVC与中介者&quot; class=&quot;headerlink&quot; title=&quot;MVC与中介者&quot;&gt;&lt;/a&gt;MVC与中介者&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;MVC中的控制器viewController就相当于中介&lt;/li&gt;
&lt;li&gt;为何要使用中介者：解决复杂的交互问题，对象之间有大量的交互逻辑，彼此互相关联&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/5sh3jplqfnhlxr0/iOS_designPatternMediator04.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/mlfyqqf2l50irlj/iOS_designpatternMediator05.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Colleague&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Colleague : AbstractColleague

@property (nonatomic) CGFloat value;

- (void)changeValue:(CGFloat)value;

@end

@implementation Colleague

- (void)changeValue:(CGFloat)value {

self.value = value;

if (self.delegate &amp;amp;&amp;amp; [self.delegate respondsToSelector:@selector(colleagueEvent:)]) {

    [self.delegate colleagueEvent:self];
}
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;TypeOneMediator&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface TypeOneMediator : AbstractMediator

@property (nonatomic, strong) Colleague  *colleagueA;
@property (nonatomic, strong) Colleague  *colleagueB;
@property (nonatomic, strong) Colleague  *colleagueC;

- (NSDictionary *)values;

@end

@implementation TypeOneMediator

- (void)colleagueEvent:(AbstractColleague *)event {

if ([event isEqual:self.colleagueA]) {

    self.colleagueB.value = self.colleagueA.value * 2;
    self.colleagueC.value = self.colleagueA.value * 4;

} else if ([event isEqual:self.colleagueB]) {

    self.colleagueA.value = self.colleagueB.value / 2.f;
    self.colleagueC.value = self.colleagueB.value * 2.f;

} else {

    self.colleagueA.value = self.colleagueC.value / 4.f;
    self.colleagueB.value = self.colleagueC.value / 2.f;
}
}

- (NSDictionary *)values {

return @{@&amp;quot;A&amp;quot; : @(self.colleagueA.value),
         @&amp;quot;B&amp;quot; : @(self.colleagueB.value),
         @&amp;quot;C&amp;quot; : @(self.colleagueC.value)};
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()
@property (nonatomic, strong) TypeTwoMediator  *mediator;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

self.mediator = [TypeTwoMediator new];

Colleague *colleagueA = [Colleague new];
Colleague *colleagueB = [Colleague new];
Colleague *colleagueC = [Colleague new];

self.mediator.colleagueA = colleagueA;
self.mediator.colleagueB = colleagueB;
self.mediator.colleagueC = colleagueC;

colleagueA.delegate = self.mediator;
colleagueB.delegate = self.mediator;
colleagueC.delegate = self.mediator;

[colleagueA changeValue:2.f];
NSLog(@&amp;quot;%@&amp;quot;, [self.mediator values]);

[colleagueA changeValue:1.f];
NSLog(@&amp;quot;%@&amp;quot;, [self.mediator values]);

[colleagueA changeValue:3.f];
NSLog(@&amp;quot;%@&amp;quot;, [self.mediator values]);
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;中介模式&quot;&gt;&lt;a href=&quot;#中介模式&quot; class=&quot;headerlink&quot; title=&quot;中介模式&quot;&gt;&lt;/a&gt;中介模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;中介者模式：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-责任链</title>
    <link href="http://jackliu17.github.io/2016/06/06/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE/"/>
    <id>http://jackliu17.github.io/2016/06/06/iOS设计模式-责任链/</id>
    <published>2016-06-06T03:33:31.000Z</published>
    <updated>2016-07-31T05:49:50.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;快递分拣中心&quot;&gt;&lt;a href=&quot;#快递分拣中心&quot; class=&quot;headerlink&quot; title=&quot;快递分拣中心&quot;&gt;&lt;/a&gt;快递分拣中心&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;传送带 —&amp;gt; 线性表&lt;/li&gt;
&lt;li&gt;包裹   —&amp;gt; 符合某种规范的物品&lt;/li&gt;
&lt;li&gt;货物种类 —&amp;gt; 特定种类的货物&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;特点:提升效率&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ifhh4d0f2oxy9zh/iOS_designPatternChains01.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;责任链模式&quot;&gt;&lt;a href=&quot;#责任链模式&quot; class=&quot;headerlink&quot; title=&quot;责任链模式&quot;&gt;&lt;/a&gt;责任链模式&lt;/h1&gt;&lt;p&gt;定义:责任链模式是一种设计模式。在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。&lt;/p&gt;
&lt;p&gt;步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将责任抽象成对象&lt;/li&gt;
&lt;li&gt;将责任对象链接起来&lt;/li&gt;
&lt;li&gt;处理输入的事件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/usl9cvfj7aaly1m/iOS_designPatternChains02.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;ChainProtocol&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;protocol ChainProtocol &amp;lt;NSObject&amp;gt;

//设置继任者
- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor;

//获取继任者
- (id &amp;lt;ChainProtocol&amp;gt;)successor;

//处理请求
- (void)handleRequest:(id)request;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;对输入文本进行类别检测&quot;&gt;&lt;a href=&quot;#对输入文本进行类别检测&quot; class=&quot;headerlink&quot; title=&quot;对输入文本进行类别检测&quot;&gt;&lt;/a&gt;对输入文本进行类别检测&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;职能分解,有电话号码检测，邮箱检测，用户名检测。类似不同种类的包裹&lt;/li&gt;
&lt;li&gt;设定共有的接口。比如不同种类的产品都能装入一个纸箱&lt;/li&gt;
&lt;li&gt;严格说来还要设定一个尾节点，处理什么都不是的情况&lt;/li&gt;
&lt;li&gt;如果用if else的话，就不能进行拆解&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/s3c2zqcwuitmeug/iOS_designPatternChains03.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;ChainProtocol&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol ChainProtocol &amp;lt;NSObject&amp;gt;
- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor;
- (id &amp;lt;ChainProtocol&amp;gt;)successor;
- (void)handleRequest:(id)request;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;EmailChain&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface EmailChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface EmailChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation EmailChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

NSString *string = request;

BOOL isMatch = [string isMatch:RX(@&amp;quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}&amp;quot;)];
if (isMatch == NO) {

    [self.nextSuccessor handleRequest:string];

} else {

    NSLog(@&amp;quot;%@ 是邮箱&amp;quot;, string);
}
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PhoneNumChain&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface PhoneNumChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface PhoneNumChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation PhoneNumChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

NSString *string = request;

BOOL isMatch = [string isMatch:RX(@&amp;quot;^((13[0-9])|(15[^4,\\D])|(18[0,0-9]))\\d{8}$&amp;quot;)];
if (isMatch == NO) {

    [self.nextSuccessor handleRequest:string];

} else {

    NSLog(@&amp;quot;%@ 是电话号码&amp;quot;, string);
}
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;UserNameChain&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface UserNameChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface UserNameChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation UserNameChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

NSString *string = request;

BOOL isMatch = [string isMatch:RX(@&amp;quot;^[A-Za-z0-9]{6,20}+$&amp;quot;)];
if (isMatch == NO) {

    [self.nextSuccessor handleRequest:string];

} else {

    NSLog(@&amp;quot;%@ 是用户名&amp;quot;, string);
}
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;HeadChain&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface HeadChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface HeadChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation HeadChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

    self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

    return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

    [self.nextSuccessor handleRequest:request];
}


@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()
@property (nonatomic, strong) HeadChain      *head;
@property (nonatomic, strong) PhoneNumChain  *phoneNum;
@property (nonatomic, strong) EmailChain     *email;
@property (nonatomic, strong) UserNameChain  *userName;
@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    // 创建责任对象
    self.head     = [HeadChain new];
    self.phoneNum = [PhoneNumChain new];
    self.email    = [EmailChain new];
    self.userName = [UserNameChain new];

    // 链接责任链对象
    self.head.successor     = self.phoneNum;
    self.phoneNum.successor = self.email;
    self.email.successor    = self.userName;

    // 处理请求
    [self.head handleRequest:@&amp;quot;349323YX&amp;quot;];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;对输入文本进行”全类别”检测&quot;&gt;&lt;a href=&quot;#对输入文本进行”全类别”检测&quot; class=&quot;headerlink&quot; title=&quot;对输入文本进行”全类别”检测&quot;&gt;&lt;/a&gt;对输入文本进行”全类别”检测&lt;/h1&gt;&lt;p&gt;ChainProtocol&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol ChainProtocol &amp;lt;NSObject&amp;gt;
- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor;
- (id &amp;lt;ChainProtocol&amp;gt;)successor;
- (void)handleRequest:(id)request;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;HeadChain &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface HeadChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface HeadChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation HeadChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

[self.nextSuccessor handleRequest:request];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;RequestEvent&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface RequestEvent : NSObject

@property (nonatomic, strong) NSString            *string;
@property (nonatomic, strong) NSMutableDictionary *infomation;

@end

@implementation RequestEvent

- (instancetype)init {

    self = [super init];

    if (self) {

        self.infomation = [NSMutableDictionary dictionary];
    }

    return self;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;EmailChain    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface EmailChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface EmailChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation EmailChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

RequestEvent *event = request;

BOOL isMatch = [event.string isMatch:RX(@&amp;quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}&amp;quot;)];
if (isMatch == NO) {

    event.infomation[@&amp;quot;Email&amp;quot;] = @(NO);

} else {

    event.infomation[@&amp;quot;Email&amp;quot;] = @(YES);
}

[self.nextSuccessor handleRequest:request];
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PhoneNumChain&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface PhoneNumChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface PhoneNumChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation PhoneNumChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

RequestEvent *event = request;

BOOL isMatch = [event.string isMatch:RX(@&amp;quot;^((13[0-9])|(15[^4,\\D])|(18[0,0-9]))\\d{8}$&amp;quot;)];
if (isMatch == NO) {

    event.infomation[@&amp;quot;PhoneNumber&amp;quot;] = @(NO);

} else {

    event.infomation[@&amp;quot;PhoneNumber&amp;quot;] = @(YES);
}

[self.nextSuccessor handleRequest:request];
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;UserNameChain&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface UserNameChain : NSObject &amp;lt;ChainProtocol&amp;gt;

@end

@interface UserNameChain ()

@property (nonatomic, strong) id &amp;lt;ChainProtocol&amp;gt; nextSuccessor;

@end

@implementation UserNameChain

- (void)setSuccessor:(id &amp;lt;ChainProtocol&amp;gt;)successor {

self.nextSuccessor = successor;
}

- (id &amp;lt;ChainProtocol&amp;gt;)successor {

return self.nextSuccessor;
}

- (void)handleRequest:(id)request {

RequestEvent *event = request;

BOOL isMatch = [event.string isMatch:RX(@&amp;quot;^[A-Za-z0-9]{6,20}+$&amp;quot;)];
if (isMatch == NO) {

    event.infomation[@&amp;quot;UserName&amp;quot;] = @(NO);

} else {

    event.infomation[@&amp;quot;UserName&amp;quot;] = @(YES);
}

[self.nextSuccessor handleRequest:request];
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()
@property (nonatomic, strong) HeadChain      *head;
@property (nonatomic, strong) PhoneNumChain  *phoneNum;
@property (nonatomic, strong) EmailChain     *email;
@property (nonatomic, strong) UserNameChain  *userName;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];

// 创建责任对象
self.head     = [HeadChain new];
self.phoneNum = [PhoneNumChain new];
self.email    = [EmailChain new];
self.userName = [UserNameChain new];

// 链接责任链对象
self.head.successor     = self.phoneNum;
self.phoneNum.successor = self.email;
self.email.successor    = self.userName;

RequestEvent *event = [RequestEvent new];
event.string        = @&amp;quot;349323YX@qq.com&amp;quot;;

// 处理请求
[self.head handleRequest:event];

NSLog(@&amp;quot;%@&amp;quot;, event.infomation);

}
@end
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;快递分拣中心&quot;&gt;&lt;a href=&quot;#快递分拣中心&quot; class=&quot;headerlink&quot; title=&quot;快递分拣中心&quot;&gt;&lt;/a&gt;快递分拣中心&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;传送带 —&amp;gt; 线性表&lt;/li&gt;
&lt;li&gt;包裹   —&amp;gt; 符合某种规范的物品&lt;/li&gt;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-模板</title>
    <link href="http://jackliu17.github.io/2016/06/05/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF/"/>
    <id>http://jackliu17.github.io/2016/06/05/iOS设计模式-模板/</id>
    <published>2016-06-05T06:12:40.000Z</published>
    <updated>2016-07-31T05:39:19.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;请客吃饭与模板模式&quot;&gt;&lt;a href=&quot;#请客吃饭与模板模式&quot; class=&quot;headerlink&quot; title=&quot;请客吃饭与模板模式&quot;&gt;&lt;/a&gt;请客吃饭与模板模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;张三李四王五，都实现了请客吃饭的流程，但具体实现是不一样的方法，比如有的用QQ，有的用手机        &lt;/li&gt;
&lt;li&gt;联系朋友，预订酒店，点菜，虽然有差异，但本质上都是按照这三个流程进行，&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/1mrxd33ritd8fb7/iOS_designPatternTemplate01.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;模板模式特点&quot;&gt;&lt;a href=&quot;#模板模式特点&quot; class=&quot;headerlink&quot; title=&quot;模板模式特点&quot;&gt;&lt;/a&gt;模板模式特点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;过程殊途同归 &lt;/li&gt;
&lt;li&gt;将共同行为/流程抽象成算法的骨架&lt;/li&gt;
&lt;li&gt;利用OO的多态，让子类继承重写&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/qt3gp80jv1i85wo/iOS_designPatternTemplate02.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Cocoa-框架中用到的模板模式-Override&quot;&gt;&lt;a href=&quot;#Cocoa-框架中用到的模板模式-Override&quot; class=&quot;headerlink&quot; title=&quot;Cocoa 框架中用到的模板模式(Override)&quot;&gt;&lt;/a&gt;Cocoa 框架中用到的模板模式(Override)&lt;/h1&gt;&lt;p&gt;CustomCell&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface CustomCell : UITableViewCell

- (void)setupCell;
- (void)buildSubView;
@end
----------------------------------------
@implementation CustomCell

- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {

if (self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]) {

    [self setupCell];

    [self buildSubView];
}

return self;
}

- (void)setupCell {

}

- (void)buildSubView {

}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ModelCell&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ModelCell : CustomCell

@end

@implementation ModelCell

- (void)setupCell {

// setup cell.
}

- (void)buildSubView {

// build subView.
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;游戏从开始到结束的各个阶段详解&quot;&gt;&lt;a href=&quot;#游戏从开始到结束的各个阶段详解&quot; class=&quot;headerlink&quot; title=&quot;游戏从开始到结束的各个阶段详解&quot;&gt;&lt;/a&gt;游戏从开始到结束的各个阶段详解&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;各个阶段的分解&lt;/li&gt;
&lt;li&gt;将分解出来的阶段模板化    &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Game&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Game : NSObject
- (void)initGame;
- (void)pause;
- (void)save;
- (void)exitGame;
- (void)startPlay;
@end

@implementation Game

- (void)initGame {
}

- (void)pause {
}

- (void)save {
}

- (void)exitGame {
}

- (void)startPlay {
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Chess&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Chess : Game

@end

@implementation Chess

- (void)initGame {

NSLog(@&amp;quot;init chess game.&amp;quot;);
}

- (void)pause {

NSLog(@&amp;quot;pasue chess game.&amp;quot;);
}

- (void)save {

NSLog(@&amp;quot;save chess game.&amp;quot;);
}

- (void)exitGame {

NSLog(@&amp;quot;exit chess game.&amp;quot;);
}

- (void)startPlay {

NSLog(@&amp;quot;play chess game.&amp;quot;);
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Football&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Football : Game

@end
@implementation Football

- (void)initGame {

NSLog(@&amp;quot;init football game.&amp;quot;);
}

- (void)pause {

NSLog(@&amp;quot;pasue football game.&amp;quot;);
}

- (void)save {

NSLog(@&amp;quot;save football game.&amp;quot;);
}

- (void)exitGame {

NSLog(@&amp;quot;exit football game.&amp;quot;);
}

- (void)startPlay {

NSLog(@&amp;quot;play football game.&amp;quot;);
}

@end
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;请客吃饭与模板模式&quot;&gt;&lt;a href=&quot;#请客吃饭与模板模式&quot; class=&quot;headerlink&quot; title=&quot;请客吃饭与模板模式&quot;&gt;&lt;/a&gt;请客吃饭与模板模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;张三李四王五，都实现了请客吃饭的流程，但具体实现是不一样的方法，比如有的
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-享元</title>
    <link href="http://jackliu17.github.io/2016/06/05/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83/"/>
    <id>http://jackliu17.github.io/2016/06/05/iOS设计模式-享元/</id>
    <published>2016-06-05T05:43:19.000Z</published>
    <updated>2016-07-31T04:56:21.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h1&gt;&lt;p&gt;交叉的圆环，提取出公共部分进行复用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义:享元模式（英语：Flyweight Pattern）是一种软件设计模式。它使用共享物件，用来尽可能减少内存使用量以及分享资讯给尽可能多的相似物件；它适合用于只是因重复而导致使用无法令人接受的大量内存的大量物件。通常物件中的部分状态是可以分享。常见做法是把它们放在外部数据结构，当需要使用时再将它们传递给享元。&lt;/li&gt;
&lt;li&gt;步骤: 共享物件的提取 —&amp;gt; 管理共享对象 —&amp;gt; 获取共享对象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/6t58dlkm72czk5g/iOS_designPatternFlyweight02.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/al4cgnnv4ejazsl/iOS_designPatternFlyweight01.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()

@property(nonatomic,strong) NSMutableDictionary *flyweightFactory;

@end

@implementation ViewController

- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

self.flyweightFactory = [NSMutableDictionary dictionary];

[self.flyweightFactory setObject:[Model new] forKey:@&amp;quot;A&amp;quot;];

//方式一: 直接提取
//    NSLog(@&amp;quot;%@&amp;quot;,self.flyweightFactory[@&amp;quot;A&amp;quot;]);
//    NSLog(@&amp;quot;%@&amp;quot;,self.flyweightFactory[@&amp;quot;A&amp;quot;]);


//方式二: 享元模式(有,则返回，无则创建返回)
NSLog(@&amp;quot;%@&amp;quot;,[self ModelWithName:@&amp;quot;A&amp;quot;]);
NSLog(@&amp;quot;%@&amp;quot;,[self ModelWithName:@&amp;quot;A&amp;quot;]);
}

- (id)ModelWithName:(NSString *)name {

if (self.flyweightFactory[name]==nil) {

    self.flyweightFactory[name] = [Model new];

    return self.flyweightFactory[name];

}else{

    return self.flyweightFactory[name];

}       
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;咖啡厅案例&quot;&gt;&lt;a href=&quot;#咖啡厅案例&quot; class=&quot;headerlink&quot; title=&quot;咖啡厅案例&quot;&gt;&lt;/a&gt;咖啡厅案例&lt;/h1&gt;&lt;p&gt;分析创建咖啡菜单，相当于一个池子，将所有的享元咖啡存储在里面&lt;/p&gt;
&lt;p&gt;共享同种类的对象,三种对象:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;咖啡店&lt;/li&gt;
&lt;li&gt;咖啡table&lt;/li&gt;
&lt;li&gt;咖啡清单&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/oabiyi915qsfebu/iOS_designPatternFlyweight03.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/znds3ksanu7ntc1/iOS_designPatternFlyweight04.png?dl=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;CoffeeFlavor&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface CoffeeFlavor : NSObject
@property (nonatomic, strong) NSString *flavor;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Menu (相当于一个池子，将所有的享元咖啡存储在里面)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Menu : NSObject

//获取指定味道的咖啡（如果没有则创建）
- (CoffeeFlavor *)lookupWithFlavor:(NSString *)flavor;
@end

@interface Menu ()
@property (nonatomic, strong) NSMutableDictionary &amp;lt;NSString *, CoffeeFlavor *&amp;gt;  *flavors;
@end

@implementation Menu

- (instancetype)init {   
    self = [super init];  
    if (self) {  
        self.flavors = [NSMutableDictionary dictionary];
    }   
    return self;
}

- (CoffeeFlavor *)lookupWithFlavor:(NSString *)flavor {
    NSParameterAssert(flavor);
    if ([self.flavors objectForKey:flavor] == nil) {       
        CoffeeFlavor *coffeeFlavor = [[CoffeeFlavor alloc] init];
        coffeeFlavor.flavor        = flavor;     
        self.flavors[flavor] = coffeeFlavor;
    }  
    return [self.flavors objectForKey:flavor];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CoffeeShop&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface CoffeeShop : NSObject
- (void)takeOrder:(NSString *)flavor table:(int)table;
- (void)serve;
@end

@interface CoffeeShop ()

@property (nonatomic, strong) NSMutableDictionary &amp;lt;NSNumber *, CoffeeFlavor *&amp;gt;  *orders;
@property (nonatomic, strong) Menu *menu;

@end

@implementation CoffeeShop

- (instancetype)init {  
    self = [super init];
    if (self) { 
        self.orders = [NSMutableDictionary dictionary];
        self.menu   = [[Menu alloc] init];
    }
    return self;
}

- (void)takeOrder:(NSString *)flavor table:(int)table {
    [self.orders setObject:[self.menu lookupWithFlavor:flavor]
                    forKey:@(table)];
}

- (void)serve {
    NSArray *allKeys = self.orders.allKeys;
    for (id key in allKeys) {  
        NSLog(@&amp;quot;[%@] Serving %@ to table %@&amp;quot;, [self.orders objectForKey:key], [self.orders objectForKey:key].flavor, key);
    }
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ViewController ()
@property (nonatomic, strong) CoffeeShop *coffeeShop;
@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // 创建咖啡厅
    self.coffeeShop = [[CoffeeShop alloc] init];
    // 相同类型的数据公用
    [self.coffeeShop takeOrder:@&amp;quot;Cappuccino&amp;quot; table:1];
    [self.coffeeShop takeOrder:@&amp;quot;Frappe&amp;quot;     table:10];
    [self.coffeeShop takeOrder:@&amp;quot;Cappuccino&amp;quot; table:6];
    [self.coffeeShop takeOrder:@&amp;quot;Espresso&amp;quot;   table:9];
    [self.coffeeShop takeOrder:@&amp;quot;Frappe&amp;quot;     table:8];

    // 开始服务
    [self.coffeeShop serve];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;字典属性&quot;&gt;&lt;a href=&quot;#字典属性&quot; class=&quot;headerlink&quot; title=&quot;字典属性&quot;&gt;&lt;/a&gt;字典属性&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;@property (nonatomic, strong) NSMutableDictionary &amp;lt;NSString *, CoffeeFlavor *&amp;gt;  *flavors;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h1&gt;&lt;p&gt;交叉的圆环，提取出公共部分进行复用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义:享元模式（英语：Flyweight Pattern）是
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
</feed>
