<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cowboy Tech</title>
  <subtitle>go go go!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jackliu17.github.io/"/>
  <updated>2016-03-12T06:40:15.000Z</updated>
  <id>http://jackliu17.github.io/</id>
  
  <author>
    <name>Jack Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift面向对象基础（中）</title>
    <link href="http://jackliu17.github.io/2016/03/12/Swift%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
    <id>http://jackliu17.github.io/2016/03/12/Swift面向对象基础（中）/</id>
    <published>2016-03-12T01:04:36.000Z</published>
    <updated>2016-03-12T06:40:15.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;存储属性和计算属性&quot;&gt;&lt;a href=&quot;#存储属性和计算属性&quot; class=&quot;headerlink&quot; title=&quot;存储属性和计算属性&quot;&gt;&lt;/a&gt;存储属性和计算属性&lt;/h1&gt;&lt;h2 id=&quot;存储属性&quot;&gt;&lt;a href=&quot;#存储属性&quot; class=&quot;headerlink&quot; title=&quot;存储属性&quot;&gt;&lt;/a&gt;存储属性&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;存储在类，结构体里的变量或者常量&lt;/li&gt;
&lt;li&gt;实例存储属性：单个实例的状态数据。类型存储属性：类，结构体，枚举&lt;/li&gt;
&lt;li&gt;所有的存储属性必须显式的指定初始值，在定义时或者构造器当中指定&lt;/li&gt;
&lt;li&gt;可选类型的存储属性可以不指定初始值&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;结构体中实例存储属性的规则&quot;&gt;&lt;a href=&quot;#结构体中实例存储属性的规则&quot; class=&quot;headerlink&quot; title=&quot;结构体中实例存储属性的规则&quot;&gt;&lt;/a&gt;结构体中实例存储属性的规则&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;struct LengthRange {
var start: Int
//定义常量存储属性，可以不指定初始值
let length:Int
}

var len = LengthRange(start:9, length:3)
//通过构造器参数完成实例存储属性的初始化
println(&amp;quot;len的起点为\(en.start),长度为\(en.length)&amp;quot;)


len.start = 2
len.length = 4 //这个会报错，因为是常量，常量是不能修改的
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;程序为所有的实例存储属性指定了初始值，且没有构造器，则系统会提供两个构造器：一个无参数的构造器和一个初始化所有实例存储属性的构造器。&lt;/li&gt;
&lt;li&gt;没有初始值和构造器，系统提供一个初始化所有实例存储属性的构造器。   &lt;/li&gt;
&lt;li&gt;有构造器，则程序必须为结构体中的所有存储属性提供初始值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;结构体常量与实例属性&quot;&gt;&lt;a href=&quot;#结构体常量与实例属性&quot; class=&quot;headerlink&quot; title=&quot;结构体常量与实例属性&quot;&gt;&lt;/a&gt;结构体常量与实例属性&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;struct LengthRange2{
var start: Int
var length:Int
}

let len2 = LengthRange(start:1, length:5)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;延迟存储属性&quot;&gt;&lt;a href=&quot;#延迟存储属性&quot; class=&quot;headerlink&quot; title=&quot;延迟存储属性&quot;&gt;&lt;/a&gt;延迟存储属性&lt;/h2&gt;&lt;p&gt;第一次被调用时才会被计算初始值的属性，用lazy修饰符&lt;/p&gt;
&lt;h2 id=&quot;计算属性&quot;&gt;&lt;a href=&quot;#计算属性&quot; class=&quot;headerlink&quot; title=&quot;计算属性&quot;&gt;&lt;/a&gt;计算属性&lt;/h2&gt;&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[修饰符]var计算属性名:属性类型{
get{
//get方法执行体，该方法一定要有返回值
}

set(形参名){
setter方法执行体，该方法一定不能有返回值
}

}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;例子1&quot;&gt;&lt;a href=&quot;#例子1&quot; class=&quot;headerlink&quot; title=&quot;例子1&quot;&gt;&lt;/a&gt;例子1&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;class User{
var first:String = &amp;quot;&amp;quot;
var last:String = &amp;quot;&amp;quot;

//定义计算属性
var fullName:String{

//定义计算属性的getter方法，该方法的返回值由first,last两个存储属性决定
gett{
   return first + &amp;quot;-&amp;quot; + last
}

//定义计算属性的setter方法
//该setter方法将负责改变该实例的first,last两个存储属性
set (newValue){
  var names = newValue.componentsSeparateByString(&amp;quot;-&amp;quot;)
  self.first = names[0]
  self.last = names [1]
}

}

init(first:String, last:String){
   self.first = first
   self.last = last
}

}


let s = User(first:&amp;quot;极客&amp;quot;，last:&amp;quot;Hello&amp;quot;)
println(s.fullName) //结果是：极客-Hello


s.fullName = &amp;quot;极客-学院&amp;quot;
println(s.first)  //outcome is 极客
println(s.last)   //结果是 学院
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;例子2-只读属性&quot;&gt;&lt;a href=&quot;#例子2-只读属性&quot; class=&quot;headerlink&quot; title=&quot;例子2 只读属性&quot;&gt;&lt;/a&gt;例子2 只读属性&lt;/h3&gt;&lt;p&gt;无需set部分，可以省略get和花括号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class User{
var first:String = &amp;quot;&amp;quot;
var last:String = &amp;quot;&amp;quot;

//定义计算属性
var fullName:String{

//定义计算属性的getter方法，该方法的返回值由first,last两个存储属性决定
   return first + &amp;quot;-&amp;quot; + last

}

init(first:String, last:String){
   self.first = first
   self.last = last
}

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;属性观察者&quot;&gt;&lt;a href=&quot;#属性观察者&quot; class=&quot;headerlink&quot; title=&quot;属性观察者&quot;&gt;&lt;/a&gt;属性观察者&lt;/h2&gt;&lt;h3 id=&quot;语法-1&quot;&gt;&lt;a href=&quot;#语法-1&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[修饰符]var 计算属性名：属性类型 = 初始值 {
  willSet (newValue){
  //属性即将被赋值之前自动调用的方法

  }

  didSet(oldValue){
  //属性被赋值完成之后自动调用的方法

  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：willSet和didSet后面的参数名都可以身略&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;除了延迟存储属性之外的所有存储属性（包括实例存储属性和类型存储属性）&lt;/li&gt;
&lt;li&gt;可通过重载方式为继承得到的属性（包括存储属性和计算属性）添加属性观察者。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;class Person {
  //定义存储属性
  var name: String = &amp;quot;&amp;quot;{
    willSet{
      if(countElements(newValue)&amp;gt;6)||(countElements(newValue)&amp;lt;2){
        println(&amp;quot;您设置的人名\(newValue)不符合要求，请重新设置！&amp;quot;)
      }else{
        println(&amp;quot;人名设置符合要求，设置成功&amp;quot;)
      }
    }

    didSet{
        println(&amp;quot;人名设置完成，被修改的原名为：\(oldValue)&amp;quot;)
    }
  }

  var age: Int = 0{

      willSet{

        if newValue&amp;gt;100 || newValue &amp;lt;0{

           println(&amp;quot;您设置的年龄\(newValue)不符合要求，请重新设置！&amp;quot;)

        }else{

           println(&amp;quot;年龄设置符合要求，设置成功&amp;quot;)

        }
      }

      didSet {

           println(&amp;quot;年龄设置完成，被修改的年龄为：\(oldValue)&amp;quot;)

      }
  }
}

var p = Person()
p.age = 999  //不成功的设置
p.age = 10 // 成功的设置
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Swift中的方法&quot;&gt;&lt;a href=&quot;#Swift中的方法&quot; class=&quot;headerlink&quot; title=&quot;Swift中的方法&quot;&gt;&lt;/a&gt;Swift中的方法&lt;/h1&gt;&lt;h2 id=&quot;方法的所属性&quot;&gt;&lt;a href=&quot;#方法的所属性&quot; class=&quot;headerlink&quot; title=&quot;方法的所属性&quot;&gt;&lt;/a&gt;方法的所属性&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;定义方法需要在类型（枚举，结构体，类）里下定义，不能独立定义&lt;/li&gt;
&lt;li&gt;方法要么属于该类型本身，要么是该类型的一个实例&lt;/li&gt;
&lt;li&gt;不能独立执行方法，执行方法必须使用类型或实例作为调用者&lt;/li&gt;
&lt;li&gt;枚举，结构体中方法使用static修饰，类中用class修饰，都属于类型方法，否则的话属于实例方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;将方法转换为函数&quot;&gt;&lt;a href=&quot;#将方法转换为函数&quot; class=&quot;headerlink&quot; title=&quot;将方法转换为函数&quot;&gt;&lt;/a&gt;将方法转换为函数&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class SomeClass {

func test() {
  println(&amp;quot;==test 方法==&amp;quot;)
}

class func bar(#msg:String) {
  println(&amp;quot;==bar类型方法==，传入的参数为:\(msg)&amp;quot;)
}
}

var sc = SomeClass()     //创建实例
var f1:()-&amp;gt;()=sc.test    //将sc的test方法分离成函数

var f2:(String) -&amp;gt; Void = SomeClass.bar    //将sc的bar方法分离成函数
f1()    //等价于sc.test()
f2(&amp;quot;极客&amp;quot;)  //等价于SomeClass.bar(msg:&amp;quot;Geek&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;方法的外部形参名&quot;&gt;&lt;a href=&quot;#方法的外部形参名&quot; class=&quot;headerlink&quot; title=&quot;方法的外部形参名&quot;&gt;&lt;/a&gt;方法的外部形参名&lt;/h2&gt;&lt;p&gt;默认除第一个参数外都添加了外部参数名，与局部参数名一样，如果不需要的话，则用_下划线的方式去掉&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Person {

   var name:String

   init(name:String){

     self.name = name

   }

   func eat (food:String, _drink:String, cigarette:String){

     println(&amp;quot;\(self.name)吃着\(food),喝着\(drink),抽着\(cigarette)&amp;quot;)

   }
}

var p = Person(name:&amp;quot;Tom&amp;quot;)
p.eat(&amp;quot;烤鸭&amp;quot;，“啤酒”，cigarette:&amp;quot;雪茄&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;值类型的可变方法&quot;&gt;&lt;a href=&quot;#值类型的可变方法&quot; class=&quot;headerlink&quot; title=&quot;值类型的可变方法&quot;&gt;&lt;/a&gt;值类型的可变方法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;struct JKRect {
  var x: Int
  var y: Int
  var width:Int
  var height:Int
  mutating func moveByX(x:Int,y:Int){
    self.x += x
    self.y += y
  }
}

var rect = JKRect(x:20, y:12, width:200, height:300)   //创建实例
rect.moveByX(100, y:90)   //调用mutating方法，该方法可以改变rect实例的存储属性
println(“rect矩形的左上角的x坐标为：\(rect.x),y坐标为:\(rect.y)”)
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;将mutating关键字放在func之前，即将该方法声明为可变方法&lt;/li&gt;
&lt;li&gt;常量类型的结构体，枚举是不可变的&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;存储属性和计算属性&quot;&gt;&lt;a href=&quot;#存储属性和计算属性&quot; class=&quot;headerlink&quot; title=&quot;存储属性和计算属性&quot;&gt;&lt;/a&gt;存储属性和计算属性&lt;/h1&gt;&lt;h2 id=&quot;存储属性&quot;&gt;&lt;a href=&quot;#存储属性&quot; class=&quot;headerli
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift面向对象基础(上)</title>
    <link href="http://jackliu17.github.io/2016/03/11/Swift%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80(%E4%B8%8A)/"/>
    <id>http://jackliu17.github.io/2016/03/11/Swift面向对象基础(上)/</id>
    <published>2016-03-11T07:06:33.000Z</published>
    <updated>2016-03-12T01:02:04.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;面向对象的特点&quot;&gt;&lt;a href=&quot;#面向对象的特点&quot; class=&quot;headerlink&quot; title=&quot;面向对象的特点&quot;&gt;&lt;/a&gt;面向对象的特点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;面向对象的核心：类和对象&lt;/li&gt;
&lt;li&gt;面向对象编程的三大特征：封装，继承，和多态&lt;/li&gt;
&lt;li&gt;Swift可以定义枚举，结构体，和类三种面向对象的类型&lt;/li&gt;
&lt;li&gt;支持定义存储属性，计算属性，方法，下标，构造器和嵌套类型&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;枚举&quot;&gt;&lt;a href=&quot;#枚举&quot; class=&quot;headerlink&quot; title=&quot;枚举&quot;&gt;&lt;/a&gt;枚举&lt;/h1&gt;&lt;h2 id=&quot;枚举定义&quot;&gt;&lt;a href=&quot;#枚举定义&quot; class=&quot;headerlink&quot; title=&quot;枚举定义&quot;&gt;&lt;/a&gt;枚举定义&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用于管理一组有限的值的集合&lt;/li&gt;
&lt;li&gt;支持计算属性&lt;/li&gt;
&lt;li&gt;支持实例方法和类方法&lt;/li&gt;
&lt;li&gt;支持定义构造器来完成初始化&lt;/li&gt;
&lt;li&gt;支持扩展和协议&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;枚举语法&quot;&gt;&lt;a href=&quot;#枚举语法&quot; class=&quot;headerlink&quot; title=&quot;枚举语法&quot;&gt;&lt;/a&gt;枚举语法&lt;/h2&gt;&lt;p&gt;enum 枚举名 {&lt;br&gt;  //使用case关键字列出所有枚举值&lt;br&gt;  //枚举的其他成员&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h2 id=&quot;定义枚举&quot;&gt;&lt;a href=&quot;#定义枚举&quot; class=&quot;headerlink&quot; title=&quot;定义枚举&quot;&gt;&lt;/a&gt;定义枚举&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//方法1
enum Season {
   case Spring
   case Summer
   case Fall
   case Winter
}

//方法2
enum Season2 {
   case Spring, Summer, Fall, Winter
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;使用枚举声明变量&quot;&gt;&lt;a href=&quot;#使用枚举声明变量&quot; class=&quot;headerlink&quot; title=&quot;使用枚举声明变量&quot;&gt;&lt;/a&gt;使用枚举声明变量&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var weather: Season
weather = .Summer
println(weather)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;枚举值和switch语句&quot;&gt;&lt;a href=&quot;#枚举值和switch语句&quot; class=&quot;headerlink&quot; title=&quot;枚举值和switch语句&quot;&gt;&lt;/a&gt;枚举值和switch语句&lt;/h2&gt;&lt;p&gt;switch中的case没有覆盖枚举的所有值，必须添加default语句&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var chooseDay = Season.Fall

switch(chooseDay){
case .Spring:
  println(&amp;quot;This is spring&amp;quot;)
case .Summer:
  println(&amp;quot;This is summer&amp;quot;)

default:
  println(&amp;quot;At home&amp;quot;)

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;原始值&quot;&gt;&lt;a href=&quot;#原始值&quot; class=&quot;headerlink&quot; title=&quot;原始值&quot;&gt;&lt;/a&gt;原始值&lt;/h2&gt;&lt;p&gt;enum 枚举名：原始值类型{&lt;br&gt;   case 枚举值 = 原始值&lt;br&gt;}&lt;/p&gt;
&lt;h3 id=&quot;整型的枚举&quot;&gt;&lt;a href=&quot;#整型的枚举&quot; class=&quot;headerlink&quot; title=&quot;整型的枚举&quot;&gt;&lt;/a&gt;整型的枚举&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;//可以自动推断，不用每个都赋予原始值
enum Weekday: Int{
  case Mon, Tur, Wen = 3, Thur, Fri, Sat , Sun

}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;字符串枚举&quot;&gt;&lt;a href=&quot;#字符串枚举&quot; class=&quot;headerlink&quot; title=&quot;字符串枚举&quot;&gt;&lt;/a&gt;字符串枚举&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;//必须每个都赋予原始值，因为不能自动推断
enum Season3: Character{
  case Spring = &amp;quot;春天&amp;quot;
  case Summer = &amp;quot;夏天&amp;quot;
  case Fall = &amp;quot;秋天&amp;quot;
  case Winter = &amp;quot;冬天&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;获取原始值&quot;&gt;&lt;a href=&quot;#获取原始值&quot; class=&quot;headerlink&quot; title=&quot;获取原始值&quot;&gt;&lt;/a&gt;获取原始值&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;println(Weekday.Fri.rawvalue)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;获取枚举值&quot;&gt;&lt;a href=&quot;#获取枚举值&quot; class=&quot;headerlink&quot; title=&quot;获取枚举值&quot;&gt;&lt;/a&gt;获取枚举值&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var mySeason = Season3(rawValue:&amp;quot;春天&amp;quot;)
if mySeason != nil {
  switch(mySeason!){ //不为空才能进行强制解析
  case .Spring:
    println(&amp;quot;春天不是读书天&amp;quot;)
  case .Summer:
    println(&amp;quot;夏天炎炎正好眠&amp;quot;)
  case .Fall , .Winter:
    println(&amp;quot;秋多蚊蝇冬日冷&amp;quot;)
  default:
    println(&amp;quot;读书只好等明年&amp;quot;)

  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;关联值&quot;&gt;&lt;a href=&quot;#关联值&quot; class=&quot;headerlink&quot; title=&quot;关联值&quot;&gt;&lt;/a&gt;关联值&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;enum Planet {
case Earth(weight: Double , name:String)
case Mars (density: Double, name: String, weight:Double)
case Venus(Double, String)
case Saturn
case Neptune
}

var p1 = Planet.Earth(weight:1.0, name:&amp;quot;地球&amp;quot;)
var p2 = Planet.Venus(0.815,&amp;quot;金星&amp;quot;)
var p3 = Planet.Mars(density:3.95, name:&amp;quot;火星&amp;quot;,weight:0.1)

switch (p3){
//将关联值绑定到变量或者常量来提取
case Planet.Earth(var weight , var name):
   println(&amp;quot;此行星的名字为:\(name),质量相当于\(weight)个地球&amp;quot;)

//将关联值都提取为常量或者变量，只将一个var或者let放在枚举成员之前
case let Planet.Mars(density:d, name:n, weight:w):
   println(&amp;quot;此行星的名字为:\(n),质量相当于\(w)个地球，密度为\(d)&amp;quot;)
default:
   break
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;类和结构体&quot;&gt;&lt;a href=&quot;#类和结构体&quot; class=&quot;headerlink&quot; title=&quot;类和结构体&quot;&gt;&lt;/a&gt;类和结构体&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;这两个非常相似&lt;/li&gt;
&lt;li&gt;主要区别在于结构体和枚举不支持继承，只有类才有继承&lt;/li&gt;
&lt;li&gt;结构体和枚举是值类型&lt;/li&gt;
&lt;li&gt;类是引用类型&lt;/li&gt;
&lt;li&gt;只有类的实例可以称为对象&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;h3 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[修饰符]class类名 {
零到多个构造器
零到多个属性
零到多个方法
零到多个下标
}
修饰符可以是private ,public, internal,final

class Person {
var name: String = &amp;quot;Jack&amp;quot;
var age: Int = 0
func say(content: String)
{
   println(content)
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;结构体&quot;&gt;&lt;a href=&quot;#结构体&quot; class=&quot;headerlink&quot; title=&quot;结构体&quot;&gt;&lt;/a&gt;结构体&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[修饰符]struct 结构体名 {

}
修饰符可以是private , public, internal

struct Dog{

var name: String
var age: Int
func run(){

println(&amp;quot;\(name)在奔跑&amp;quot;)
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;定义属性的语法&quot;&gt;&lt;a href=&quot;#定义属性的语法&quot; class=&quot;headerlink&quot; title=&quot;定义属性的语法&quot;&gt;&lt;/a&gt;定义属性的语法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[修饰符]var或者let 存储属性:类型名字 = 初始值
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;定义构造器语法&quot;&gt;&lt;a href=&quot;#定义构造器语法&quot; class=&quot;headerlink&quot; title=&quot;定义构造器语法&quot;&gt;&lt;/a&gt;定义构造器语法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[修饰符]init(形参列表){
//零到多条可执行语句组成的构造器执行体
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;定义方法的语法&quot;&gt;&lt;a href=&quot;#定义方法的语法&quot; class=&quot;headerlink&quot; title=&quot;定义方法的语法&quot;&gt;&lt;/a&gt;定义方法的语法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[修饰符]func 方法名(形参列表) -&amp;gt;返回值类型 {
//零到多条可执行语句
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;创建实例&quot;&gt;&lt;a href=&quot;#创建实例&quot; class=&quot;headerlink&quot; title=&quot;创建实例&quot;&gt;&lt;/a&gt;创建实例&lt;/h2&gt;&lt;h3 id=&quot;类-1&quot;&gt;&lt;a href=&quot;#类-1&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var p: Person
p = Person() //等价于 var p = Person()
println(p.name)
p.say(“Hello world”)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;结构体-1&quot;&gt;&lt;a href=&quot;#结构体-1&quot; class=&quot;headerlink&quot; title=&quot;结构体&quot;&gt;&lt;/a&gt;结构体&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var dog = Dog(name:&amp;quot;Wangcai&amp;quot;, age:2)
println(dog.name)
dog.run()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;值类型与引用类型&quot;&gt;&lt;a href=&quot;#值类型与引用类型&quot; class=&quot;headerlink&quot; title=&quot;值类型与引用类型&quot;&gt;&lt;/a&gt;值类型与引用类型&lt;/h2&gt;&lt;h3 id=&quot;引用类型&quot;&gt;&lt;a href=&quot;#引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型&quot;&gt;&lt;/a&gt;引用类型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var p2 =p
p2.name = &amp;quot;Rose&amp;quot;
println(p.name)
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;内存里的对象可以有多个引用，即多个引用变量指向同一个对象&lt;/li&gt;
&lt;li&gt;如果一个引用更改了，那对象里的值也会更改。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;值类型&quot;&gt;&lt;a href=&quot;#值类型&quot; class=&quot;headerlink&quot; title=&quot;值类型&quot;&gt;&lt;/a&gt;值类型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var dog2 = dog
dog2.name = &amp;quot;snoopy&amp;quot;
println(dog2.name)
println(dog.name)
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;值对象是要复制的&lt;/li&gt;
&lt;li&gt;每个值对象的更改，不会影响其他对象的更改&lt;/li&gt;
&lt;li&gt;因此枚举和结构体是没有继承的  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;引用类型的比较&quot;&gt;&lt;a href=&quot;#引用类型的比较&quot; class=&quot;headerlink&quot; title=&quot;引用类型的比较&quot;&gt;&lt;/a&gt;引用类型的比较&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;class User {
var name: String
var age: Int
init(name: String, age: Int){
  self.name = name
  self.age = age
}
}

var u1 = User(name:&amp;quot;Han&amp;quot;,age:32)
var U2 = User(name:&amp;quot;Han&amp;quot;,age:32)
//虽然传递的值是一样，但是是创建了两个对象

println(u1===u2) //u1与u2引用的不是同一对象,结果是false
println(u1!==u2) //结果是true

var u3 = u1
println(u3===u1) //结果是true
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;=== 这个不能用于值类型的判断&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;self关键字&quot;&gt;&lt;a href=&quot;#self关键字&quot; class=&quot;headerlink&quot; title=&quot;self关键字&quot;&gt;&lt;/a&gt;self关键字&lt;/h3&gt;&lt;h4 id=&quot;方法中的self代表该方法的调用者&quot;&gt;&lt;a href=&quot;#方法中的self代表该方法的调用者&quot; class=&quot;headerlink&quot; title=&quot;方法中的self代表该方法的调用者&quot;&gt;&lt;/a&gt;方法中的self代表该方法的调用者&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;class Dog {  
  func jump(){
    println(&amp;quot;正在执行jump方法&amp;quot;)
  }
  func run(){
  self.jump()
     println(&amp;quot;正在执行run方法&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;构造器中的self代表该构造器正在初始化的实例&quot;&gt;&lt;a href=&quot;#构造器中的self代表该构造器正在初始化的实例&quot; class=&quot;headerlink&quot; title=&quot;构造器中的self代表该构造器正在初始化的实例&quot;&gt;&lt;/a&gt;构造器中的self代表该构造器正在初始化的实例&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;class Person {
    var name: String = &amp;quot;&amp;quot;
    var age: Int = 2

    init(name:String, age:Int){
    self.name = name
    self.age = age
    }

    func info(){
    println(“我的名字是:\(name)年龄是:\(age)”)
    }
}

var person = Person(name:&amp;quot;Lily&amp;quot;,age:10)
person.info()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;类和结构体的选择&quot;&gt;&lt;a href=&quot;#类和结构体的选择&quot; class=&quot;headerlink&quot; title=&quot;类和结构体的选择&quot;&gt;&lt;/a&gt;类和结构体的选择&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;结构体的主要目的是用于封装少量相关的简单数据&lt;/li&gt;
&lt;li&gt;如果需要在传递参数或者赋值时自动复制副本，使用结构体&lt;/li&gt;
&lt;li&gt;明确该类型无须继承另一个已有的类或被其他类继承&lt;/li&gt;
&lt;li&gt;注意，大部分时候，程序应该自定义类而不是自定义结构体。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面向对象的特点&quot;&gt;&lt;a href=&quot;#面向对象的特点&quot; class=&quot;headerlink&quot; title=&quot;面向对象的特点&quot;&gt;&lt;/a&gt;面向对象的特点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;面向对象的核心：类和对象&lt;/li&gt;
&lt;li&gt;面向对象编程的三大特征：封装，继承，和多态&lt;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift中的函数和闭包</title>
    <link href="http://jackliu17.github.io/2016/03/11/Swift%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E5%92%8C%E9%97%AD%E5%8C%85/"/>
    <id>http://jackliu17.github.io/2016/03/11/Swift中的函数和闭包/</id>
    <published>2016-03-11T01:38:16.000Z</published>
    <updated>2016-03-11T07:06:03.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;h2 id=&quot;定义和调用函数&quot;&gt;&lt;a href=&quot;#定义和调用函数&quot; class=&quot;headerlink&quot; title=&quot;定义和调用函数&quot;&gt;&lt;/a&gt;定义和调用函数&lt;/h2&gt;&lt;p&gt;fun 函数名（形参列表）-&amp;gt; 返回值类型 {&lt;br&gt;//可执行语句组成的函数&lt;br&gt;}&lt;/p&gt;
&lt;h3 id=&quot;两个参数&quot;&gt;&lt;a href=&quot;#两个参数&quot; class=&quot;headerlink&quot; title=&quot;两个参数&quot;&gt;&lt;/a&gt;两个参数&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func sayHello(personName:String)-&amp;gt; String {

  return &amp;quot;Hello ,&amp;quot; + personName + &amp;quot;!&amp;quot;
}

println(sayHello(&amp;quot;Anna&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;没有参数&quot;&gt;&lt;a href=&quot;#没有参数&quot; class=&quot;headerlink&quot; title=&quot;没有参数&quot;&gt;&lt;/a&gt;没有参数&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func sayHellloWorld() -&amp;gt; String{

return &amp;quot;Hello world!&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;函数形参和实参&quot;&gt;&lt;a href=&quot;#函数形参和实参&quot; class=&quot;headerlink&quot; title=&quot;函数形参和实参&quot;&gt;&lt;/a&gt;函数形参和实参&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func max(x:Int, y:Int)-&amp;gt;Int { //这里的xy就是形参

return x&amp;gt;y ? x:y  

}

println(max(3,5)) //这里的3，5是实参
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;局部参数&quot;&gt;&lt;a href=&quot;#局部参数&quot; class=&quot;headerlink&quot; title=&quot;局部参数&quot;&gt;&lt;/a&gt;局部参数&lt;/h3&gt;&lt;p&gt;width,height 不能在调用函数时使用，这是局部参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func area(width:Double, height:Double)-&amp;gt;Double{

return width * height     
}

println(4.5,3.4) //不能传入width, height
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;外部参数名&quot;&gt;&lt;a href=&quot;#外部参数名&quot; class=&quot;headerlink&quot; title=&quot;外部参数名&quot;&gt;&lt;/a&gt;外部参数名&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func area (宽 width:Double ,高 height:Double ) -&amp;gt;Double {

return width * height
}

println (area(宽:3.4,高:4.7)) //宽和高为外部函数名
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;以-代替外部参数名&quot;&gt;&lt;a href=&quot;#以-代替外部参数名&quot; class=&quot;headerlink&quot; title=&quot;以#代替外部参数名&quot;&gt;&lt;/a&gt;以#代替外部参数名&lt;/h3&gt;&lt;p&gt;如果外部参数名和局部参数一样的话，只需要在局部参数前加 #&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func area (#width:Double ,#height:Double ) -&amp;gt;Double {

return width * height
}

println (area(width:3.4,height:4.7)) //width和height为外部函数名
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;可变参数&quot;&gt;&lt;a href=&quot;#可变参数&quot; class=&quot;headerlink&quot; title=&quot;可变参数&quot;&gt;&lt;/a&gt;可变参数&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func sum(numbers:Int...)-&amp;gt;Int &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var total: Int = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for num in numbers &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   total += num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(total)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum(1,3,4,5)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;在参数类型后面添加…表示该参数可以接受多个参数值&lt;/li&gt;
&lt;li&gt;一个函数当中只有一个可变参数,并且位于列表的最后&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;默认参数&quot;&gt;&lt;a href=&quot;#默认参数&quot; class=&quot;headerlink&quot; title=&quot;默认参数&quot;&gt;&lt;/a&gt;默认参数&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; func sayHi(msg:String, name:String=&amp;quot;Lily&amp;quot;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; println (&amp;quot;\(name),\(msg)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sayHi(&amp;quot;Welcome to our city&amp;quot;) //目前只传入了一个参数，如果第二个参数没传入，就使用默认值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sayHi(&amp;quot;Welcome to our city&amp;quot;, name:&amp;quot;Tom&amp;quot;) //如果传入了，就使用传入的新值&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//忽略默认值的外部参数名，添加下划线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     func sayHi(msg:String, _name:String=&amp;quot;Lily&amp;quot;)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      println (&amp;quot;\(name),\(msg)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     sayHi(&amp;quot;Welcome to our city&amp;quot;,&amp;quot;Tom&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;带有默认值的参数是有外部参数名的&lt;/li&gt;
&lt;li&gt;添加下划线就可以忽略&lt;/li&gt;
&lt;li&gt;如果函数里有可变参数也有默认参数，可变参数放在最后面，默认参数出现在次后面&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;常量形参数和变量形参&quot;&gt;&lt;a href=&quot;#常量形参数和变量形参&quot; class=&quot;headerlink&quot; title=&quot;常量形参数和变量形参&quot;&gt;&lt;/a&gt;常量形参数和变量形参&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;//这里的形参是个变量，如果去掉var就是个常量
func factorial(var number:Int) -&amp;gt; Int{
var result:Int = 1
while number &amp;gt; 1 {
  result = result * number
  number--
}
return result
}
println(factorial(3))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;In-out形参&quot;&gt;&lt;a href=&quot;#In-out形参&quot; class=&quot;headerlink&quot; title=&quot;In-out形参&quot;&gt;&lt;/a&gt;In-out形参&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func swap (inout a:Int, inout b:Int){
let tmp = a
a = b
b = tmp
}

var a:Int = 1
var b:Int = 3
swap(&amp;amp;a,&amp;amp;b)
println(“交换之后结果为:a =\(a),b= \(b)”)
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;In-out参数就是强制传递变量的指针&lt;/li&gt;
&lt;li&gt;只能传入变量作为实参&lt;/li&gt;
&lt;li&gt;输入输出不能带有默认值&lt;/li&gt;
&lt;li&gt;如果你用关键字inout标记了一个参数，这个参数不能再用var或者let去标记&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;函数返回值&quot;&gt;&lt;a href=&quot;#函数返回值&quot; class=&quot;headerlink&quot; title=&quot;函数返回值&quot;&gt;&lt;/a&gt;函数返回值&lt;/h2&gt;&lt;h3 id=&quot;void&quot;&gt;&lt;a href=&quot;#void&quot; class=&quot;headerlink&quot; title=&quot;void&quot;&gt;&lt;/a&gt;void&lt;/h3&gt;&lt;p&gt;没有指定返回类型的函数总返回void,在swift中，void可以理解为空元组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func sayHi2(){
println(&amp;quot;welcome&amp;quot;)
}
sayHi2()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;多个返回值&quot;&gt;&lt;a href=&quot;#多个返回值&quot; class=&quot;headerlink&quot; title=&quot;多个返回值&quot;&gt;&lt;/a&gt;多个返回值&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func area(width:Double,height:Double)-&amp;gt;(Double,Double){
var s = width * height
var c = (width + height) * 2
return (s,c)
}
println(area(3.1, 3.4))
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;函数类型&quot;&gt;&lt;a href=&quot;#函数类型&quot; class=&quot;headerlink&quot; title=&quot;函数类型&quot;&gt;&lt;/a&gt;函数类型&lt;/h2&gt;&lt;h3 id=&quot;函数变量&quot;&gt;&lt;a href=&quot;#函数变量&quot; class=&quot;headerlink&quot; title=&quot;函数变量&quot;&gt;&lt;/a&gt;函数变量&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func addTwoInts(a:Int,b:Int)-&amp;gt;Int{

return a+b
}

func multiplyTwoInts(a:Int,b:Int)-&amp;gt;Int{

return a*b
}

var mathFunction:(Int,Int) -&amp;gt; Int = multiplyTwoInts
println(&amp;quot;Result:\(mathFunction(2,3))&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;函数作为参数&quot;&gt;&lt;a href=&quot;#函数作为参数&quot; class=&quot;headerlink&quot; title=&quot;函数作为参数&quot;&gt;&lt;/a&gt;函数作为参数&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func printMathResult(mathFunctioin:(Int,Int)-&amp;gt;Int,a:Int,b:Int){

println(&amp;quot;Result:\(mathFunction(a,b))&amp;quot;)
}

printMathResult(multiplyTwoInts,3,5)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;函数类型作为返回值类型&quot;&gt;&lt;a href=&quot;#函数类型作为返回值类型&quot; class=&quot;headerlink&quot; title=&quot;函数类型作为返回值类型&quot;&gt;&lt;/a&gt;函数类型作为返回值类型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func squre(num:Int) -&amp;gt;Int{

return num * num
}

func cube(num:Int) -&amp;gt;Int{

return num * num * num
}

func getMathFunc (#type: String)-&amp;gt; (Int) -&amp;gt;Int {
switch (type){
   case &amp;quot;squre&amp;quot;:
   return squre
default:
   return cube
}
}

var mathFunc = getMathFunc(type:&amp;quot;other&amp;quot;)
println(mathFunc(5))
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;函数重载&quot;&gt;&lt;a href=&quot;#函数重载&quot; class=&quot;headerlink&quot; title=&quot;函数重载&quot;&gt;&lt;/a&gt;函数重载&lt;/h2&gt;&lt;p&gt;形参和返回值不一样的同名函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//1.
func test(){
println(&amp;quot;无参数的test()函数&amp;quot;)
}

//2.
func test (msg: String){
println(&amp;quot;重载的test()函数\(msg)&amp;quot;)
}

//3.
func test(msg: String) -&amp;gt; String {
println(&amp;quot;重载的test()函数\(msg),带返回值&amp;quot;)
return &amp;quot;test&amp;quot;
}

//4.
func test(#msg: String){
  println (&amp;quot;重载的test函数，外部参数为\(msg)&amp;quot;)
}

//调用1
test()

//调用4
var result:Void = test(msg:&amp;quot;Jike&amp;quot;)

//调用3
var result2: String = test(&amp;quot;Welcome , Geek&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;嵌套函数&quot;&gt;&lt;a href=&quot;#嵌套函数&quot; class=&quot;headerlink&quot; title=&quot;嵌套函数&quot;&gt;&lt;/a&gt;嵌套函数&lt;/h2&gt;&lt;p&gt;函数体内部所定义的函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func getMathFunc(#type: String) -&amp;gt; (Int) -&amp;gt;Int{

func squre (num:Int) -&amp;gt; Int{

return num * num
}

func cube (num:Int) -&amp;gt;Int{

return num * num * num
}

switch(type){

   case &amp;quot;squre&amp;quot;
   return squre
default:
   return cube
}

}

var mathFunc = getMathFunc (type:&amp;quot;squre&amp;quot;)
println(mathFunc(4)) //outcome is 16

var mathFunc2 = getMathFunc (type:&amp;quot;other&amp;quot;)
println(mathFunc(4)) //outcome is 64
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;闭包表达式&quot;&gt;&lt;a href=&quot;#闭包表达式&quot; class=&quot;headerlink&quot; title=&quot;闭包表达式&quot;&gt;&lt;/a&gt;闭包表达式&lt;/h1&gt;&lt;h2 id=&quot;闭包的写法&quot;&gt;&lt;a href=&quot;#闭包的写法&quot; class=&quot;headerlink&quot; title=&quot;闭包的写法&quot;&gt;&lt;/a&gt;闭包的写法&lt;/h2&gt;&lt;p&gt;{ （形参列表）-&amp;gt; 返回值类型 in&lt;br&gt;   可执行表达式&lt;br&gt;}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func getMathFunc(#type: String) -&amp;gt; (Int) -&amp;gt;Int{

func squre (num:Int) -&amp;gt; Int{

return num * num
}

func cube (num:Int) -&amp;gt;Int{

return num * num * num
}

switch(type){

   case &amp;quot;squre&amp;quot;
   return { (num: Int) -&amp;gt; Int in
      return num * num
   }
default:
   return { (num:Int) -&amp;gt; Int in
      return num * num * num

   }
}

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;闭包的应用&quot;&gt;&lt;a href=&quot;#闭包的应用&quot; class=&quot;headerlink&quot; title=&quot;闭包的应用&quot;&gt;&lt;/a&gt;闭包的应用&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var mathFunc = getMathFunc(type: &amp;quot;squre&amp;quot;)
println(mathFunc(5)) //outcome is 25
mathFunc = getMathFunc (type: &amp;quot;other&amp;quot;)
println(mathFunc(5)) //outcome is 125
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;利用上下文推断类型&quot;&gt;&lt;a href=&quot;#利用上下文推断类型&quot; class=&quot;headerlink&quot; title=&quot;利用上下文推断类型&quot;&gt;&lt;/a&gt;利用上下文推断类型&lt;/h2&gt;&lt;p&gt;Swift可以推断闭包的形参类型和返回值类型&lt;br&gt;函数和闭包是统一的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var squre:(Int) -&amp;gt; Int = {(num) in return num * num}
println(squre(3))   //outcome is 9

//因为可以推断，所以小括号也是可以省略的
var squre:(Int) -&amp;gt; Int = {num in return num * num}
println(squre(3))   //outcome is 9

//省略形参名，通过$0,$1...来引用第一个，第二个参数
var squre:(Int) -&amp;gt; Int = {$0 * $0}
println(squre(3))  //out come is 9

var result: Int = {

var result = 1
for i in 1...$1{
   result *= $0
}
return result
}(4,3)
println(result) //outcome is 64
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;尾随闭包&quot;&gt;&lt;a href=&quot;#尾随闭包&quot; class=&quot;headerlink&quot; title=&quot;尾随闭包&quot;&gt;&lt;/a&gt;尾随闭包&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func someFunction(num:Int, fn:(Int) -&amp;gt;()){

}

someFunctioin (20,{})

//使用尾随闭包调用函数的格式，将小括号提前
someFunction(20){}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;捕获上下文中的变量或者常量&quot;&gt;&lt;a href=&quot;#捕获上下文中的变量或者常量&quot; class=&quot;headerlink&quot; title=&quot;捕获上下文中的变量或者常量&quot;&gt;&lt;/a&gt;捕获上下文中的变量或者常量&lt;/h2&gt;&lt;p&gt;闭包可以访问或者修改其所在上下文中的变量或常量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func makeArr(ele:String) -&amp;gt; () -&amp;gt; [String]{

//创建一个不包含任何元素的数组
var arr: [String] = []
func addElement() -&amp;gt;[String]{

//向arr数组中添加一个元素
arr.append(ele)

return arr
}

return addElement
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;h2 id=&quot;定义和调用函数&quot;&gt;&lt;a href=&quot;#定义和调用函数&quot; class=&quot;headerlink&quot; title=&quot;定义和调用函数&quot;&gt;&lt;/
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift中的字符串和集合</title>
    <link href="http://jackliu17.github.io/2016/03/10/Swift%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E9%9B%86%E5%90%88/"/>
    <id>http://jackliu17.github.io/2016/03/10/Swift中的字符串和集合/</id>
    <published>2016-03-10T08:26:25.000Z</published>
    <updated>2016-03-11T01:37:50.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;p&gt;Swift中的字符串是结构体，而NSString中的字符串是Class&lt;/p&gt;
&lt;h2 id=&quot;字符类型及表现形式&quot;&gt;&lt;a href=&quot;#字符类型及表现形式&quot; class=&quot;headerlink&quot; title=&quot;字符类型及表现形式&quot;&gt;&lt;/a&gt;字符类型及表现形式&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var s:Character = &amp;quot;美&amp;quot;
var quote1 = &amp;quot;\&amp;apos;&amp;quot;
var quote2 = &amp;quot;\u{22}&amp;quot;
println(&amp;quot;quote1的值为:\(quote1),quote2的值为:\(quote2)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;单个字符来指定字符常量，如“A”，“9”&lt;/li&gt;
&lt;li&gt;转义字符表示特殊字符常量，如”\n”,”\t”&lt;/li&gt;
&lt;li&gt;使用\u{n}的Unicode形式，n代表一个1~8位的十六进制&lt;/li&gt;
&lt;li&gt;必须用双引号包起来&lt;/li&gt;
&lt;li&gt;Swift中的每一个字符代表了一个可扩展字母集&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;字符串的创建&quot;&gt;&lt;a href=&quot;#字符串的创建&quot; class=&quot;headerlink&quot; title=&quot;字符串的创建&quot;&gt;&lt;/a&gt;字符串的创建&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//创建方法1：直接赋值
var str1 = &amp;quot;Jike&amp;quot;
//创建方法2：构造函数
var str2 = String()

//创建多个重复字符的字符串
var str3 = String(count:4,repeatedValue:Character(&amp;quot;a&amp;quot;))
var strRep = String(count:4,repeatedValue:UnicodeScalar(&amp;quot;xxxxx&amp;quot;)) //使用unicode
println(strRep)

//判断字符串是否为空
println(str3.isEmpty)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;字符串的拼接&quot;&gt;&lt;a href=&quot;#字符串的拼接&quot; class=&quot;headerlink&quot; title=&quot;字符串的拼接&quot;&gt;&lt;/a&gt;字符串的拼接&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//拼接方式1.
var str4 = str1 + &amp;quot;College&amp;quot;
str1 += &amp;quot;Hello&amp;quot;
println(str4)

//拼接方式2.
let char:Character = &amp;quot;!&amp;quot;
str1.append(char)
println(str1)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;字符串的字符数量&quot;&gt;&lt;a href=&quot;#字符串的字符数量&quot; class=&quot;headerlink&quot; title=&quot;字符串的字符数量&quot;&gt;&lt;/a&gt;字符串的字符数量&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;println(&amp;quot;str3 has \(countElements(str3)) characters&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;通过调用全局countElement函数，并将字符串作为参数进行传递，可以获取该字符串的字符数量&lt;/li&gt;
&lt;li&gt;Swift中的Unicode16Count函数所获得的值，才是和NSString中的length一样&lt;/li&gt;
&lt;li&gt;Swift中的字符串是否可以修改仅通过定义的是变量还是常量来决定&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;字符串比较&quot;&gt;&lt;a href=&quot;#字符串比较&quot; class=&quot;headerlink&quot; title=&quot;字符串比较&quot;&gt;&lt;/a&gt;字符串比较&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let quotation = &amp;quot;We are the same&amp;quot;
let sameQuotation = &amp;quot;We are the same&amp;quot;
if quotation == sameQuotation {
println(&amp;quot;These are the same&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;检查字符串是否有特定的前缀后缀&quot;&gt;&lt;a href=&quot;#检查字符串是否有特定的前缀后缀&quot; class=&quot;headerlink&quot; title=&quot;检查字符串是否有特定的前缀后缀&quot;&gt;&lt;/a&gt;检查字符串是否有特定的前缀后缀&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var food = [&amp;quot;Fruits:apple&amp;quot;,
&amp;quot;Fruits : orange&amp;quot;,
&amp;quot;Fruits : banana&amp;quot;,
&amp;quot;Vegetables: tomato&amp;quot;,
&amp;quot;Vegetables: potato&amp;quot;]

for fry in food{
if fru.hasPrefix(&amp;quot;Fruits&amp;quot;){
   println(fru)
}

if fru.hasSuffix(&amp;quot;o&amp;quot;){
   println(fru)
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Swift中的数组&quot;&gt;&lt;a href=&quot;#Swift中的数组&quot; class=&quot;headerlink&quot; title=&quot;Swift中的数组&quot;&gt;&lt;/a&gt;Swift中的数组&lt;/h1&gt;&lt;h2 id=&quot;数组的创建&quot;&gt;&lt;a href=&quot;#数组的创建&quot; class=&quot;headerlink&quot; title=&quot;数组的创建&quot;&gt;&lt;/a&gt;数组的创建&lt;/h2&gt;&lt;h3 id=&quot;方式1&quot;&gt;&lt;a href=&quot;#方式1&quot; class=&quot;headerlink&quot; title=&quot;方式1.&quot;&gt;&lt;/a&gt;方式1.&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var myArr = Array&amp;lt;String&amp;gt;()  
var num = Array&amp;lt;Int&amp;gt;(count:3,repeatedValue:1)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;方式2&quot;&gt;&lt;a href=&quot;#方式2&quot; class=&quot;headerlink&quot; title=&quot;方式2.&quot;&gt;&lt;/a&gt;方式2.&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var someInts = [Int]()
var arr:[Int]=[1,2,3]
var threeDoubles = [Double](count:3, repeatedValue:0.0)
var food = [&amp;quot;apple&amp;quot;,&amp;quot;orange&amp;quot;,&amp;quot;bnana&amp;quot;]
println(food[3])
println(food.count)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;AnyObject-and-Any&quot;&gt;&lt;a href=&quot;#AnyObject-and-Any&quot; class=&quot;headerlink&quot; title=&quot;AnyObject and Any&quot;&gt;&lt;/a&gt;AnyObject and Any&lt;/h3&gt;&lt;p&gt;Swift中有两种特殊的object:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Any:表示任何数据类型&lt;/li&gt;
&lt;li&gt;AnyObject:表示任何对象&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//因为数组里的数据不一样，这里的数组是AnyObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var shoppingList = [&amp;quot;Eggs&amp;quot;,123,true] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for item in shoppingList &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      println(item)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for fruit in food&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fruit = &amp;quot;good&amp;quot; //error, fruit默认是let类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;数组的可变性&quot;&gt;&lt;a href=&quot;#数组的可变性&quot; class=&quot;headerlink&quot; title=&quot;数组的可变性&quot;&gt;&lt;/a&gt;数组的可变性&lt;/h2&gt;&lt;h3 id=&quot;添加&quot;&gt;&lt;a href=&quot;#添加&quot; class=&quot;headerlink&quot; title=&quot;添加&quot;&gt;&lt;/a&gt;添加&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;//1. 用append()在数组尾部添加
food.append(&amp;quot;Vegetables:mushroom&amp;quot;)

//2. 通过加法添加数组元素
food += [&amp;quot;pineapple&amp;quot;,&amp;quot;pity&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;替换&quot;&gt;&lt;a href=&quot;#替换&quot; class=&quot;headerlink&quot; title=&quot;替换&quot;&gt;&lt;/a&gt;替换&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;food[0...2] = [&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;]
//从第一个到第三个元素进行替换，但只有两个元素，第三个将被删除，被“没有”所替换
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;插入&quot;&gt;&lt;a href=&quot;#插入&quot; class=&quot;headerlink&quot; title=&quot;插入&quot;&gt;&lt;/a&gt;插入&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;food.insert(&amp;quot;Meat&amp;quot;,atIndex:0)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;删除某一项&quot;&gt;&lt;a href=&quot;#删除某一项&quot; class=&quot;headerlink&quot; title=&quot;删除某一项&quot;&gt;&lt;/a&gt;删除某一项&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;food.removeAtIndex(0)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;删除最后一项&quot;&gt;&lt;a href=&quot;#删除最后一项&quot; class=&quot;headerlink&quot; title=&quot;删除最后一项&quot;&gt;&lt;/a&gt;删除最后一项&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;food.removeLast()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;删除所有&quot;&gt;&lt;a href=&quot;#删除所有&quot; class=&quot;headerlink&quot; title=&quot;删除所有&quot;&gt;&lt;/a&gt;删除所有&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;food.removeAll(keepCapacity:false)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;字典&quot;&gt;&lt;a href=&quot;#字典&quot; class=&quot;headerlink&quot; title=&quot;字典&quot;&gt;&lt;/a&gt;字典&lt;/h1&gt;&lt;h2 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//Dictionary&amp;lt;KeyType,valueType&amp;gt;
var dic1: Dictionary&amp;lt;String,String&amp;gt;

//[KeyType:valueType]
var scores:[String:Int]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;创建&quot;&gt;&lt;a href=&quot;#创建&quot; class=&quot;headerlink&quot; title=&quot;创建&quot;&gt;&lt;/a&gt;创建&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;dic1 = Dictionary&amp;lt;String,String&amp;gt;()
scores = Dictionary&amp;lt;String,Int&amp;gt;(minimumCapacity;5)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;空字典&quot;&gt;&lt;a href=&quot;#空字典&quot; class=&quot;headerlink&quot; title=&quot;空字典&quot;&gt;&lt;/a&gt;空字典&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var emptyDic:[String:Double] = [:] 
println(emptyDic.isEmpty)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;字典的使用&quot;&gt;&lt;a href=&quot;#字典的使用&quot; class=&quot;headerlink&quot; title=&quot;字典的使用&quot;&gt;&lt;/a&gt;字典的使用&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//这种的声明是不严谨的，因为值的类型都不是一样的，系统会推断它是NSObject类型
var person = [&amp;quot;age&amp;quot;:18,&amp;quot;name&amp;quot;:&amp;quot;Tom&amp;quot;,&amp;quot;身高&amp;quot;:178]

//这样会报错，因为是将NSObject转为int
var height:Int? = person[&amp;quot;身高&amp;quot;]  
if height != nil {
   println(height!)
}

//以下才正确
var person = [&amp;quot;age&amp;quot;:18,&amp;quot;name&amp;quot;:&amp;quot;Tom&amp;quot;,&amp;quot;身高&amp;quot;:&amp;quot;178&amp;quot;]

var height:String? = person[&amp;quot;身高&amp;quot;]  
if height != nil {
   println(height!)
}

println(person[&amp;quot;age&amp;quot;])

//不存才的key，返回为nil
println(person[&amp;quot;weight&amp;quot;])

//对该值重新赋值
person[&amp;quot;name&amp;quot;] = &amp;quot;Jack&amp;quot;

//对不存在的key设置value,字典将会添加k-v对
person[&amp;quot;weight&amp;quot;] = 90
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;数组是有序的，字典是无序的&lt;/li&gt;
&lt;li&gt;通过常量或者变量决定字典是否可变&lt;/li&gt;
&lt;li&gt;如果没有显示数据类型声明，字典就会根据值进行推断&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;字典的替换&quot;&gt;&lt;a href=&quot;#字典的替换&quot; class=&quot;headerlink&quot; title=&quot;字典的替换&quot;&gt;&lt;/a&gt;字典的替换&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;该方法返回更新值之前的原值&lt;/li&gt;
&lt;li&gt;键不存在对应值的时候设置值&lt;/li&gt;
&lt;li&gt;键存在时更新已存在的值&lt;/li&gt;
&lt;li&gt;键不存在时，不发生替换，不返回任何东西&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;if let oldName = person.updateValue(&amp;quot;Lucky&amp;quot;,forKey:&amp;quot;name&amp;quot;){
   println(&amp;quot;原来的值是:\(oldName)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;字典的遍历&quot;&gt;&lt;a href=&quot;#字典的遍历&quot; class=&quot;headerlink&quot; title=&quot;字典的遍历&quot;&gt;&lt;/a&gt;字典的遍历&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//使用元组
for (key,value) in person{
 println(&amp;quot;\(key):\(value)&amp;quot;)
} 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;字典的删除&quot;&gt;&lt;a href=&quot;#字典的删除&quot; class=&quot;headerlink&quot; title=&quot;字典的删除&quot;&gt;&lt;/a&gt;字典的删除&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//移除单个值
person.removeValueForKey(&amp;quot;name&amp;quot;)

//移除所有值
person.removeAll(keepCapacity:false)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;字典键和值的取出&quot;&gt;&lt;a href=&quot;#字典键和值的取出&quot; class=&quot;headerlink&quot; title=&quot;字典键和值的取出&quot;&gt;&lt;/a&gt;字典键和值的取出&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let keysArr = [String](person.keys)
let valueArr = [String](person.values)
println(valuesArr)
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;p&gt;Swift中的字符串是结构体，而NSString中的字符串是Class&lt;/p&gt;
&lt;h2 id=&quot;字符类型及表现形式&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift语言基础</title>
    <link href="http://jackliu17.github.io/2016/03/10/Swift%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <id>http://jackliu17.github.io/2016/03/10/Swift语言基础/</id>
    <published>2016-03-10T05:22:51.000Z</published>
    <updated>2016-03-10T08:18:47.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;常量和变量&quot;&gt;&lt;a href=&quot;#常量和变量&quot; class=&quot;headerlink&quot; title=&quot;常量和变量&quot;&gt;&lt;/a&gt;常量和变量&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;var str = &amp;quot;Hello&amp;quot;  
var name = &amp;quot;Lucky&amp;quot;    
var age: Int  
var string: String = &amp;quot;smile&amp;quot;  
var a = 20, b:String, c = &amp;quot;Swift&amp;quot;  
println(&amp;quot;Her name is \(name)&amp;quot;)   //作为占位符&amp;quot;\&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;变量var ,常量let    &lt;/li&gt;
&lt;li&gt;标识符必须以字符(包括Unicode字符)，下划线_，美元符$开头，但不能以数字开头，不可以包含空格，不能使用关键字，其长度没有限制&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h1&gt;&lt;h2 id=&quot;整型：用Int就可以了&quot;&gt;&lt;a href=&quot;#整型：用Int就可以了&quot; class=&quot;headerlink&quot; title=&quot;整型：用Int就可以了&quot;&gt;&lt;/a&gt;整型：用Int就可以了&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let oneMillion = 1_000_000 //可以增加下划线作为分隔符
println(oneMillion)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;整型之间转换必须是显式转换&quot;&gt;&lt;a href=&quot;#整型之间转换必须是显式转换&quot; class=&quot;headerlink&quot; title=&quot;整型之间转换必须是显式转换&quot;&gt;&lt;/a&gt;整型之间转换必须是显式转换&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var book1: Int16 = 100
var book2: Int32 = 30
var totalPrice = Int32(book1) + book2 //必须先转换，否则会报错
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;正无穷-负无穷-非数&quot;&gt;&lt;a href=&quot;#正无穷-负无穷-非数&quot; class=&quot;headerlink&quot; title=&quot;正无穷,负无穷,非数&quot;&gt;&lt;/a&gt;正无穷,负无穷,非数&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var w = 4.0 / 0.0   //正无穷
var w = - 4.0 / 0.0 //负无穷
var f = 0.0 / 0.0   //非数
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;浮点运算&quot;&gt;&lt;a href=&quot;#浮点运算&quot; class=&quot;headerlink&quot; title=&quot;浮点运算&quot;&gt;&lt;/a&gt;浮点运算&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var width: Float = 2.1
var height: Double = 3.9
var area1 = width * Float(height) //必须先转换，否则会报错
var area2 = Int(width) * 4 //必须先转换，否则会报错
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;类型别名：&quot;&gt;&lt;a href=&quot;#类型别名：&quot; class=&quot;headerlink&quot; title=&quot;类型别名：&quot;&gt;&lt;/a&gt;类型别名：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;typealias Age = UInt16
let myAge:Age = 10
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;元组&quot;&gt;&lt;a href=&quot;#元组&quot; class=&quot;headerlink&quot; title=&quot;元组&quot;&gt;&lt;/a&gt;元组&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//赋值方式1.
var score = (140,140,&amp;quot;Good&amp;quot;)

//赋值方式2.赋值时必须为所有的成员变量赋值
var health : (Int , Int , String) 
health = (182 , 78 , &amp;quot;Good&amp;quot;)  

println (&amp;quot;health元组的值为:\(health)&amp;quot;)  //打印元组所有
println (&amp;quot;health元组中身高的值为:\(health.1)&amp;quot;) //打印元组中第二个值

//元组中的嵌套
var test:(Int,(Int,String))
test = (10,(100,&amp;quot;Swift&amp;quot;))
println(&amp;quot;test元组中第二个元素的第一个元素为：\(test.1.0)&amp;quot;)

//通过key-value赋值，顺序可以调换
var score2 = (math:140, English:140, Assessment:&amp;quot;A&amp;quot;)
var score2 :(math:Int, English:Int, Assessment:String)
score2 = (English:140, math:140, Assessment:&amp;quot;A&amp;quot;) 
println(&amp;quot;score2 中数学的成绩是: \(score2.math)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;可选类型&quot;&gt;&lt;a href=&quot;#可选类型&quot; class=&quot;headerlink&quot; title=&quot;可选类型&quot;&gt;&lt;/a&gt;可选类型&lt;/h2&gt;&lt;p&gt;任何已知类型后面紧跟?即可代表可选类型如Int?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var str2 = &amp;quot;HelloGeek&amp;quot;
var num: Int? = str2.toInt()
println(num) //nil表示值缺失
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;强制解析：&quot;&gt;&lt;a href=&quot;#强制解析：&quot; class=&quot;headerlink&quot; title=&quot;强制解析：&quot;&gt;&lt;/a&gt;强制解析：&lt;/h2&gt;&lt;p&gt;在变量或者常量后面添加!注意：必须可选类型的变量和常量确实有值的时候才能解析成功&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var num1: Int? = 10
var num2: Int? = 20

if num1 !=nil &amp;amp;&amp;amp; num !=nil{
   let sum = num1! + num2! //获得可选类型的值
}else{
   println(&amp;quot;num1&amp;quot;或者&amp;quot;num2&amp;quot;为nil,不能强制解析)
} 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;可选绑定：&quot;&gt;&lt;a href=&quot;#可选绑定：&quot; class=&quot;headerlink&quot; title=&quot;可选绑定：&quot;&gt;&lt;/a&gt;可选绑定：&lt;/h2&gt;&lt;p&gt;可以用在if和while语句中来对可选类型的值进行判断并把值赋给一个常量或者变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var str3: String! = &amp;quot;Swift&amp;quot;
if var tmp = str3 {
   println(&amp;quot;str3 的值为: \(tmp)&amp;quot;)
}else{
   println(&amp;quot;str3 的值为nil,不能解析&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;隐式解析可选类型：&quot;&gt;&lt;a href=&quot;#隐式解析可选类型：&quot; class=&quot;headerlink&quot; title=&quot;隐式解析可选类型：&quot;&gt;&lt;/a&gt;隐式解析可选类型：&lt;/h2&gt;&lt;p&gt;在已有类型后面添加！如Int!适用于被赋值后不会重新变为nil的变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var possibleStr: String! = &amp;quot;jikexueyuan&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h1&gt;&lt;h2 id=&quot;swift赋值表达没有值，不支持连续赋值&quot;&gt;&lt;a href=&quot;#swift赋值表达没有值，不支持连续赋值&quot; class=&quot;headerlink&quot; title=&quot;swift赋值表达没有值，不支持连续赋值&quot;&gt;&lt;/a&gt;swift赋值表达没有值，不支持连续赋值&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var a: Int
var b = a = 20
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;求余运算&quot;&gt;&lt;a href=&quot;#求余运算&quot; class=&quot;headerlink&quot; title=&quot;求余运算&quot;&gt;&lt;/a&gt;求余运算&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var g = 5.2 (结果正负取决于被除数的正负)
var h = 3.1
var mod = g % h
println(mod)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;自增自减&quot;&gt;&lt;a href=&quot;#自增自减&quot; class=&quot;headerlink&quot; title=&quot;自增自减&quot;&gt;&lt;/a&gt;自增自减&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//结果是11，先执行运算，然后a再自加1
var a = 5
var b = a++ + 6
println(b) 

//结果是12，先自身加1，再执行运算
var a = 5
var b = ++a + 6
println(b)  
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;溢出运算符-amp-amp-amp-amp-amp&quot;&gt;&lt;a href=&quot;#溢出运算符-amp-amp-amp-amp-amp&quot; class=&quot;headerlink&quot; title=&quot;溢出运算符 &amp;amp;+ &amp;amp;- &amp;amp;* &amp;amp;/ &amp;amp;%&quot;&gt;&lt;/a&gt;溢出运算符 &amp;amp;+ &amp;amp;- &amp;amp;* &amp;amp;/ &amp;amp;%&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var willUnderflow = UInt8.min
willUnderflow = willUnderflow &amp;amp;-1 //下溢

let a = 20
let b = a &amp;amp;/ 0
let c = a &amp;amp;% 0
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;位运算符&quot;&gt;&lt;a href=&quot;#位运算符&quot; class=&quot;headerlink&quot; title=&quot;位运算符&quot;&gt;&lt;/a&gt;位运算符&lt;/h2&gt;&lt;p&gt;&amp;amp; 按位与&lt;br&gt;|  或&lt;br&gt;^  异或&lt;br&gt;~  取反&lt;br&gt;&amp;lt;&amp;lt; 左位移&lt;br&gt;右位移 &amp;gt;&amp;gt;   &lt;/p&gt;
&lt;h2 id=&quot;扩展后的赋值运算符&quot;&gt;&lt;a href=&quot;#扩展后的赋值运算符&quot; class=&quot;headerlink&quot; title=&quot;扩展后的赋值运算符&quot;&gt;&lt;/a&gt;扩展后的赋值运算符&lt;/h2&gt;&lt;p&gt;-=&lt;br&gt;*=&lt;br&gt;/=&lt;br&gt;&amp;amp;=&lt;br&gt;|=&lt;br&gt;运算符 “+= ” 对于 x+=y 等价于 x = x+y    &lt;/p&gt;
&lt;h2 id=&quot;区间运算符&quot;&gt;&lt;a href=&quot;#区间运算符&quot; class=&quot;headerlink&quot; title=&quot;区间运算符&quot;&gt;&lt;/a&gt;区间运算符&lt;/h2&gt;&lt;p&gt;a..&amp;lt;b (包含a,但不包含b)&lt;br&gt;a…b（包含a,也包含b）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for a in 0..&amp;lt;10&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for a in 0...10&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;比较运算符，结果为BOOL值&quot;&gt;&lt;a href=&quot;#比较运算符，结果为BOOL值&quot; class=&quot;headerlink&quot; title=&quot;比较运算符，结果为BOOL值&quot;&gt;&lt;/a&gt;比较运算符，结果为BOOL值&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var c= a === b //只有a和b指向的类型实例相同时，c为true
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;=== 特征相等运算符  &lt;/li&gt;
&lt;li&gt;!== 特征不等运算符  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;逻辑运算符&quot;&gt;&lt;a href=&quot;#逻辑运算符&quot; class=&quot;headerlink&quot; title=&quot;逻辑运算符&quot;&gt;&lt;/a&gt;逻辑运算符&lt;/h2&gt;&lt;p&gt;&amp;amp;&amp;amp; 与&lt;br&gt;|| 或&lt;br&gt;!  非&lt;/p&gt;
&lt;h2 id=&quot;三目运算符&quot;&gt;&lt;a href=&quot;#三目运算符&quot; class=&quot;headerlink&quot; title=&quot;三目运算符&quot;&gt;&lt;/a&gt;三目运算符&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var a = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var b = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var str = a &amp;gt; b ? &amp;quot;a大于b&amp;quot;:&amp;quot;a小于b&amp;quot; //如果条件成立就执行?后的，否则就执行:后的&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;空合并运算符-a-b&quot;&gt;&lt;a href=&quot;#空合并运算符-a-b&quot; class=&quot;headerlink&quot; title=&quot;空合并运算符 a??b&quot;&gt;&lt;/a&gt;空合并运算符 a??b&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;将对可选类型a进行空判断，如果a包含一个值就进行解封&lt;/li&gt;
&lt;li&gt;否则就返回一个默认值b  &lt;/li&gt;
&lt;li&gt;默认值b的类型必须要和a存储值的类型保持一致  &lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let words = &amp;quot;hello&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var say: String? = &amp;quot;jike&amp;quot; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var content = say ?? words&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(content)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;流程控制&quot;&gt;&lt;a href=&quot;#流程控制&quot; class=&quot;headerlink&quot; title=&quot;流程控制&quot;&gt;&lt;/a&gt;流程控制&lt;/h1&gt;&lt;h2 id=&quot;分支结构&quot;&gt;&lt;a href=&quot;#分支结构&quot; class=&quot;headerlink&quot; title=&quot;分支结构&quot;&gt;&lt;/a&gt;分支结构&lt;/h2&gt;&lt;h3 id=&quot;if…else…&quot;&gt;&lt;a href=&quot;#if…else…&quot; class=&quot;headerlink&quot; title=&quot;if…else…&quot;&gt;&lt;/a&gt;if…else…&lt;/h3&gt;&lt;p&gt;语句的条件执行体必须放在花括号中&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var age = 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if age &amp;gt; 20 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  println(“年龄大于20岁”)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  println(&amp;quot;年龄小于20岁&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Switch&quot;&gt;&lt;a href=&quot;#Switch&quot; class=&quot;headerlink&quot; title=&quot;Switch&quot;&gt;&lt;/a&gt;Switch&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;任意一个case不需要break,执行完一条会自动退出  &lt;/li&gt;
&lt;li&gt;每一个case块至少包含一条语句&lt;/li&gt;
&lt;li&gt;case标签后可以有多个值，用逗号隔开&lt;/li&gt;
&lt;li&gt;case块后的条件还可以是一个范围或者元组，支持值绑定&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let score = &amp;quot;a&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch score &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case &amp;quot;A&amp;quot;,&amp;quot;a&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; println(&amp;quot;Good&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case &amp;quot;B&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; println(&amp;quot;LG&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case &amp;quot;C&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; println(&amp;quot;TW4&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case &amp;quot;D&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; println(&amp;quot;Good&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case &amp;quot;E&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; println(&amp;quot;Good&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; println(&amp;quot;error&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用fallthrough语句贯穿&quot;&gt;&lt;a href=&quot;#使用fallthrough语句贯穿&quot; class=&quot;headerlink&quot; title=&quot;使用fallthrough语句贯穿&quot;&gt;&lt;/a&gt;使用fallthrough语句贯穿&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var num = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var desc = &amp;quot;\(num)是&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch num &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case 2, 3, 5, 7 :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     desc += &amp;quot;质数，而且还是&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 fallthrough&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     desc += &amp;quot;整数&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(desc) //结果是“5是质数，而且还是整数”&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;case后的条件为元组&quot;&gt;&lt;a href=&quot;#case后的条件为元组&quot; class=&quot;headerlink&quot; title=&quot;case后的条件为元组&quot;&gt;&lt;/a&gt;case后的条件为元组&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var point = (x:1 , y:1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch point &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case (0,0):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println(&amp;quot;(0,0)位于原点&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case (_,0):   //用_表示可以忽略这个数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println(&amp;quot;(\(point.0),0)位于x轴上&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case (0...Int.max, 0...Int.max):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println(&amp;quot;(\(point.0),\(point.1))位于第一象限&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    break&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;值绑定&quot;&gt;&lt;a href=&quot;#值绑定&quot; class=&quot;headerlink&quot; title=&quot;值绑定&quot;&gt;&lt;/a&gt;值绑定&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var point = (x:1 , y:1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch point &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case (0,0):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   println(&amp;quot;(0,0)位于原点&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case (var a, 0)://y坐标为0，进入该case块，并将元组的x成员绑定到临时变量a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   println(&amp;quot;该点位于x轴上，x值为:\(a)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case var (x,y) where x&amp;gt;0 &amp;amp;&amp;amp; y&amp;gt;0:  //条件值绑定&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   println(&amp;quot;(\(x),\(y))位于第一象限&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   break&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;循环结构&quot;&gt;&lt;a href=&quot;#循环结构&quot; class=&quot;headerlink&quot; title=&quot;循环结构&quot;&gt;&lt;/a&gt;循环结构&lt;/h2&gt;&lt;h3 id=&quot;for-loop&quot;&gt;&lt;a href=&quot;#for-loop&quot; class=&quot;headerlink&quot; title=&quot;for loop&quot;&gt;&lt;/a&gt;for loop&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for var count = 0; count &amp;lt;10; count++&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   println(count)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let base = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let power = 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var answer = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for _ in 1...power &amp;#123; //下划线符号_替代循环中的变量，能够忽略具体的值，并且不提供循环遍历时对值的访问&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  answer *= base&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;标签：&quot;&gt;&lt;a href=&quot;#标签：&quot; class=&quot;headerlink&quot; title=&quot;标签：&quot;&gt;&lt;/a&gt;标签：&lt;/h3&gt;&lt;p&gt;紧跟冒号的标识符，只有放在循环语句或者switch语句之前才有作用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;outer: for var i=0;i&amp;lt;5;i++&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;内层循环&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for var j=0;j&amp;lt;3;j++&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   println(&amp;quot;i的值为:\(i),j的值为\(j)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   if j==1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     break outer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;break结束循环，开始执行循环之后的代码&lt;/li&gt;
&lt;li&gt;continue 忽略本次循环的剩下语句，执行下一次循环，但不终止循环&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常量和变量&quot;&gt;&lt;a href=&quot;#常量和变量&quot; class=&quot;headerlink&quot; title=&quot;常量和变量&quot;&gt;&lt;/a&gt;常量和变量&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;var str = &amp;quot;Hello&amp;quot;  
var name = &amp;quot;Luc
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Git本地操作</title>
    <link href="http://jackliu17.github.io/2016/03/09/Git%E6%9C%AC%E5%9C%B0%E6%93%8D%E4%BD%9C/"/>
    <id>http://jackliu17.github.io/2016/03/09/Git本地操作/</id>
    <published>2016-03-08T22:34:11.000Z</published>
    <updated>2016-03-09T00:30:57.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Git安装与简单配置&quot;&gt;&lt;a href=&quot;#Git安装与简单配置&quot; class=&quot;headerlink&quot; title=&quot;Git安装与简单配置&quot;&gt;&lt;/a&gt;Git安装与简单配置&lt;/h2&gt;&lt;p&gt;配置或者修改git用户名&lt;br&gt;&lt;code&gt;$ git config --global user.name Jack&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;配置git用户邮箱&lt;br&gt;&lt;code&gt;$ git config --global user.email XXXXXX@gmail.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查询git帮助&lt;br&gt;&lt;code&gt;$ git config --help&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加git用户&lt;br&gt;&lt;code&gt;$ git config --global --add user.name eoe&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除git用户&lt;br&gt;&lt;code&gt;$ git config --global --unset user.name eoe&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查询git当前用户&lt;br&gt;&lt;code&gt;$ git config user.name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查询git当前所有用户信息&lt;br&gt;&lt;code&gt;$ git config --list --global&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Git基本的工作流程&quot;&gt;&lt;a href=&quot;#Git基本的工作流程&quot; class=&quot;headerlink&quot; title=&quot;Git基本的工作流程&quot;&gt;&lt;/a&gt;Git基本的工作流程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/Git1.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/2.png&quot; alt=&quot;2&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/3.png&quot; alt=&quot;3&quot;&gt;&lt;/p&gt;
&lt;p&gt;创建仓库，有两个方法，如下  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mac OSX 下创建两个文件&lt;br&gt;&lt;code&gt;$ touch a&lt;/code&gt;&lt;br&gt;&lt;code&gt;$ touch b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;工作区提交到暂存区&lt;br&gt;&lt;code&gt;git add a b （只添加这两个文件）&lt;/code&gt;&lt;br&gt;&lt;code&gt;git add -A   (添加整个工作区)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看暂存区&lt;br&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;提交到历史记录区(m为所标注的信息)&lt;br&gt;&lt;code&gt;git commit -m &amp;quot;Initial commit&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除工作区和暂存区&lt;br&gt;&lt;code&gt;git rm a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;只删除暂存区，不删除工作区&lt;br&gt;&lt;code&gt;git rm --cached a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将文件a命名为文件c （一系列的组合，在工作区中操作，也在暂存区中修改）&lt;br&gt;&lt;code&gt;git mv a c&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;编写.gitignore文件，指出哪些文件是可以不用被git的&lt;br&gt;.gitignore (省略)&lt;/p&gt;
&lt;h2 id=&quot;Git本地分支与合并&quot;&gt;&lt;a href=&quot;#Git本地分支与合并&quot; class=&quot;headerlink&quot; title=&quot;Git本地分支与合并&quot;&gt;&lt;/a&gt;Git本地分支与合并&lt;/h2&gt;&lt;h3 id=&quot;简单的分支操作&quot;&gt;&lt;a href=&quot;#简单的分支操作&quot; class=&quot;headerlink&quot; title=&quot;简单的分支操作&quot;&gt;&lt;/a&gt;简单的分支操作&lt;/h3&gt;&lt;p&gt;添加test分支&lt;br&gt;&lt;code&gt;git branch test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;切换到test分支&lt;br&gt;&lt;code&gt;git checkout test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看在什么分支&lt;br&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;查看commit的情况&quot;&gt;&lt;a href=&quot;#查看commit的情况&quot; class=&quot;headerlink&quot; title=&quot;查看commit的情况&quot;&gt;&lt;/a&gt;查看commit的情况&lt;/h3&gt;&lt;p&gt;为查看长命令设置个短标识“lol”&lt;br&gt;&lt;code&gt;git config --global alias.lol &amp;quot;log --oneline --decorate --graph --all&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看commit的情况&lt;br&gt;&lt;code&gt;git  lol&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;查看tag的情况&quot;&gt;&lt;a href=&quot;#查看tag的情况&quot; class=&quot;headerlink&quot; title=&quot;查看tag的情况&quot;&gt;&lt;/a&gt;查看tag的情况&lt;/h3&gt;&lt;p&gt;为某个commit设置个标签&lt;br&gt;&lt;code&gt;git tag &amp;quot;v0&amp;quot; c8f9030&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看有什么标签&lt;br&gt;&lt;code&gt;git tag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看某标签的具体情况&lt;br&gt;&lt;code&gt;git show v0&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;有关checkout分支的详述&quot;&gt;&lt;a href=&quot;#有关checkout分支的详述&quot; class=&quot;headerlink&quot; title=&quot;有关checkout分支的详述&quot;&gt;&lt;/a&gt;有关checkout分支的详述&lt;/h3&gt;&lt;p&gt;以checkout进入某commit点，实际上是以该点重新分支fix_v0，&lt;br&gt;&lt;code&gt;git checkout v0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以还有后续命令,以该点创建一个分支&lt;br&gt; &lt;code&gt;git checkout -b fix_v0&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;有关stash&quot;&gt;&lt;a href=&quot;#有关stash&quot; class=&quot;headerlink&quot; title=&quot;有关stash&quot;&gt;&lt;/a&gt;有关stash&lt;/h3&gt;&lt;p&gt;当checkout切换分支时，要先提交或者stash暂存区的东西,否则会被覆盖&lt;br&gt;将工作区和暂存区的东西先藏起来，以免切换分支的时候被覆盖&lt;br&gt;&lt;code&gt;git stash save -a &amp;quot;stash1&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看有哪些stash&lt;br&gt;&lt;code&gt;git stash list&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将stash的东西还原出来，根据索引号，同时stash list中会删除&lt;br&gt;&lt;code&gt;git stash pop --index stash@{0}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将stash的东西还原出来，根据索引号，同时stash list依然保存&lt;br&gt;&lt;code&gt;git stash apply --index stash@{0}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除某个stash&lt;br&gt;&lt;code&gt;git stash drop stash@{0}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除全部stash&lt;br&gt;&lt;code&gt;git stash clear&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;合并分支&quot;&gt;&lt;a href=&quot;#合并分支&quot; class=&quot;headerlink&quot; title=&quot;合并分支&quot;&gt;&lt;/a&gt;合并分支&lt;/h3&gt;&lt;p&gt;先切换到master分支下，再合并需要的分支&lt;br&gt;&lt;code&gt;git master&lt;/code&gt;&lt;br&gt;&lt;code&gt;git merge test_merge&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果是fast-forward，那是不需要修改文件的合并，不重叠的融合  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/5.png&quot; alt=&quot;5&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/6.png&quot; alt=&quot;6&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果是有冲突的合并，用如下命令取消&lt;br&gt;&lt;code&gt;git merge --abort&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者是先编辑相冲突的内容，然后再add —&amp;gt; commit,这个commit 是两个merge的commit&lt;br&gt;&lt;code&gt;git add master.txt&lt;/code&gt;&lt;br&gt;&lt;code&gt;git commit -m &amp;quot;Test merge&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/4.png&quot; alt=&quot;4&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/9.png&quot; alt=&quot;9&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/7.png&quot; alt=&quot;7&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/8.png&quot; alt=&quot;8&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;查看与对比历史记录&quot;&gt;&lt;a href=&quot;#查看与对比历史记录&quot; class=&quot;headerlink&quot; title=&quot;查看与对比历史记录&quot;&gt;&lt;/a&gt;查看与对比历史记录&lt;/h2&gt;&lt;p&gt;查看某个commit的详情&lt;br&gt;&lt;code&gt;git show HEAD&lt;/code&gt;&lt;br&gt;&lt;code&gt;git show 16e9e16&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果某个commit是merge commit&lt;br&gt;&lt;code&gt;git show master^&lt;/code&gt;(显示merge中的两个commit中的第一副提交)&lt;br&gt;&lt;code&gt;git show master^2&lt;/code&gt; (显示merge中的两个commit中的第二副提交)&lt;/p&gt;
&lt;p&gt;用show可以显示commit ,tag 的相关信息，查看某标签的具体情况&lt;br&gt;&lt;code&gt;git show v0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看历史详情，用键盘上下翻页，q退出&lt;br&gt;&lt;code&gt;git log&lt;/code&gt; （有很多参数）&lt;/p&gt;
&lt;p&gt;比较工作区和暂存区的差别&lt;br&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;比较历史记录区和暂存区的差别&lt;br&gt;&lt;code&gt;git diff --cached&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;比较哪个单词是差异，用颜色标注出来&lt;br&gt;&lt;code&gt;git diff --color-words&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;撤销修改&quot;&gt;&lt;a href=&quot;#撤销修改&quot; class=&quot;headerlink&quot; title=&quot;撤销修改&quot;&gt;&lt;/a&gt;撤销修改&lt;/h2&gt;&lt;p&gt;撤销工作区的修改，用暂存区的内容覆盖工作区的内容&lt;br&gt;&lt;code&gt;git checkout -- master.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用某个commit覆盖工作区和暂存区&lt;br&gt;&lt;code&gt;git checkout INITIAL_COMMIT -- master.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;撤销暂存区的修改&lt;br&gt;&lt;code&gt;git reset master.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用某个commit覆盖暂存区，而不是工作区&lt;br&gt;&lt;code&gt;git reset INITIAL_COMMIT -- master.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;撤销当前的提交,这也是一个新的提交&lt;br&gt;&lt;code&gt;git revert HEAD&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;指向某个commit，并用它还原工作区和暂存区&lt;br&gt;&lt;code&gt;git reset --hard test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;指向某个commit，还原暂存区，不还原工作区&lt;br&gt;&lt;code&gt;git reset --mixed test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;指向某个commit&lt;br&gt;&lt;code&gt;git reset --soft test&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Vim的编辑命令&quot;&gt;&lt;a href=&quot;#Vim的编辑命令&quot; class=&quot;headerlink&quot; title=&quot;Vim的编辑命令&quot;&gt;&lt;/a&gt;Vim的编辑命令&lt;/h2&gt;&lt;p&gt;编辑vim后，按esc键 + :wq 就是保存，不保存就不用加w&lt;/p&gt;
&lt;h2 id=&quot;Mac-command-line&quot;&gt;&lt;a href=&quot;#Mac-command-line&quot; class=&quot;headerlink&quot; title=&quot;Mac command line&quot;&gt;&lt;/a&gt;Mac command line&lt;/h2&gt;&lt;p&gt;&lt;code&gt;$ clear&lt;/code&gt; (清楚屏幕上的所有东西)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git安装与简单配置&quot;&gt;&lt;a href=&quot;#Git安装与简单配置&quot; class=&quot;headerlink&quot; title=&quot;Git安装与简单配置&quot;&gt;&lt;/a&gt;Git安装与简单配置&lt;/h2&gt;&lt;p&gt;配置或者修改git用户名&lt;br&gt;&lt;code&gt;$ git config --g
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="Git" scheme="http://jackliu17.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>今天</title>
    <link href="http://jackliu17.github.io/2016/03/04/%E4%BB%8A%E5%A4%A9/"/>
    <id>http://jackliu17.github.io/2016/03/04/今天/</id>
    <published>2016-03-04T06:21:32.000Z</published>
    <updated>2016-03-04T06:50:31.000Z</updated>
    
    <content type="html">&lt;p&gt;今天是个好日子。我的新博客开张了…..十年之前我也是每天写博客的，可惜短命的MSN space live 将数据迁移到wordpress ,期间我居然将密码忘记了。写了五年的博客呀…&lt;br&gt;不知写啥，就将这作为我的第一篇吧.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天是个好日子。我的新博客开张了…..十年之前我也是每天写博客的，可惜短命的MSN space live 将数据迁移到wordpress ,期间我居然将密码忘记了。写了五年的博客呀…&lt;br&gt;不知写啥，就将这作为我的第一篇吧.&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
