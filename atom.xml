<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cowboy Tech</title>
  <subtitle>The best preparation for tomorrow is doing your best today</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jackliu17.github.io/"/>
  <updated>2016-05-28T05:35:38.000Z</updated>
  <id>http://jackliu17.github.io/</id>
  
  <author>
    <name>Jack Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS设计模式-装饰</title>
    <link href="http://jackliu17.github.io/2016/05/28/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0/"/>
    <id>http://jackliu17.github.io/2016/05/28/iOS设计模式-装饰/</id>
    <published>2016-05-28T05:29:51.000Z</published>
    <updated>2016-05-28T05:35:38.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;装饰模式&quot;&gt;&lt;a href=&quot;#装饰模式&quot; class=&quot;headerlink&quot; title=&quot;装饰模式&quot;&gt;&lt;/a&gt;装饰模式&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_DesignPattern_decorate01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_DesignPattern_decorate02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;比如引入一个静态库，只能导入.h文件。但不知道其具体实现，又想增添其功能&lt;/li&gt;
&lt;li&gt;不想要过多的子类，不想通过继承来实现新方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_DesignPattern_decorate04.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;装饰类，持有这个原始类的引用，原来对象的功能，装饰对象都有，让原始类引用调用自己的方法去实现。&lt;/li&gt;
&lt;li&gt;装饰类为了扩展它的功能，通过装饰者实例化子类，实现更多的功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;魂斗罗游戏案例&quot;&gt;&lt;a href=&quot;#魂斗罗游戏案例&quot; class=&quot;headerlink&quot; title=&quot;魂斗罗游戏案例&quot;&gt;&lt;/a&gt;魂斗罗游戏案例&lt;/h1&gt;&lt;p&gt;GamePad&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//在游戏开始时作弊，需要按下很多按钮，能否设置一个按钮来快捷实现


- (void)up {
NSLog(@&amp;quot;up&amp;quot;);
}

- (void)down {
NSLog(@&amp;quot;down&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;GamePadDecorator&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//装饰基类，持有这个原始类的引用，让原始类引用调用自己的方法去实现


@property (nonatomic, strong) GamePad *gamePad;

- (instancetype)init {
self = [super init];
if (self) {
    self.gamePad = [[GamePad alloc] init];
}
return self;
}

- (void)up {
[self.gamePad up];
}

- (void)down {
[self.gamePad down];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CheatGamePadDecorator &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//实例化装饰基类，添加新的方法


@interface CheatGamePadDecorator : GamePadDecorator

- (void)cheat {
[self up];
[self down];
[self up];
[self down];
[self left];
[self right];
[self left];
[self right];
[self commandA];
[self commandB];
[self commandA];
[self commandB];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

GamePadDecorator *gamePadDecorator = [[GamePadDecorator alloc] init];
[gamePadDecorator up];

CheatGamePadDecorator *cheatPamePad = [[CheatGamePadDecorator alloc] init];
[cheatPamePad cheat];

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;框架级别的装饰-Category&quot;&gt;&lt;a href=&quot;#框架级别的装饰-Category&quot; class=&quot;headerlink&quot; title=&quot;框架级别的装饰:Category&quot;&gt;&lt;/a&gt;框架级别的装饰:Category&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_DesignPattern_decorate03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;category 和装饰模式有细微的区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;category给对象添加属性,可能会用刀objective-C runtime&lt;/li&gt;
&lt;li&gt;category重写被装饰对象方法,如果不小心在category里重写了被装饰对象的方法，即使没有引用这个category，使用的时候，也会执行override后的新方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;千万不要重写原始类的方法，否则会改变原始类的行为&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GamePad(Cheat)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@implementation GamePad (Cheat)

- (void)cheat {

[self up];
[self down];
......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;GamePad (Coin)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//需要用到objective-C runtime
@property (nonatomic) NSInteger  coin;

#import &amp;lt;objc/runtime.h&amp;gt;
#import &amp;lt;Foundation/Foundation.h&amp;gt;

@implementation GamePad (Coin)

static const NSString *_coinStr = @&amp;quot;_coinStr&amp;quot;;
- (void)setCoin:(NSInteger)coin {
objc_setAssociatedObject(self, (__bridge const void *)_coinStr, @(coin), OBJC_ASSOCIATION_ASSIGN);
}

- (NSInteger)coin {
NSNumber *number = objc_getAssociatedObject(self, (__bridge const void *)_coinStr);  
return number.integerValue;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];

GamePad *gamePad = [[GamePad alloc] init];
[gamePad up];

//被装饰后的新属性
gamePad.coin = 10;
NSLog(@&amp;quot;coin %ld&amp;quot;, (long)gamePad.coin);

}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;装饰模式&quot;&gt;&lt;a href=&quot;#装饰模式&quot; class=&quot;headerlink&quot; title=&quot;装饰模式&quot;&gt;&lt;/a&gt;装饰模式&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_DesignPatt
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-外观</title>
    <link href="http://jackliu17.github.io/2016/05/27/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82/"/>
    <id>http://jackliu17.github.io/2016/05/27/iOS设计模式-外观/</id>
    <published>2016-05-27T05:09:48.000Z</published>
    <updated>2016-05-27T05:11:10.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;外观模式解决的问题&quot;&gt;&lt;a href=&quot;#外观模式解决的问题&quot; class=&quot;headerlink&quot; title=&quot;外观模式解决的问题&quot;&gt;&lt;/a&gt;外观模式解决的问题&lt;/h1&gt;&lt;p&gt;如果在viewController里绘制图形，需要单独的写很多行代码，耦合性很高&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 绘制了一个圆
Circle *circle = [Circle new];
circle.radius  = 10.f;
[circle draw];

// 绘制了一个矩形
Rectangle *rectangle = [Rectangle new];
rectangle.width      = 10.f;
rectangle.height     = 20.f;
[rectangle draw];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot;外观模式&quot;&gt;&lt;/a&gt;外观模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;用一个类将复杂的子系统隔离开来解耦合&lt;/li&gt;
&lt;li&gt;如果在同一文件内就是封装，用不同的文件来隔离就是外观模式。&lt;/li&gt;
&lt;li&gt;主系统只考虑输入什么参数，不必考虑系统内的细节&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPattern0601.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;基类shape&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)draw {

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;子类Rectangle&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Rectangle : Shape
@property (nonatomic) CGFloat  width;
@property (nonatomic) CGFloat  height;

- (void)draw;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;子类Circle&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Circle : Shape
@property (nonatomic) CGFloat  radius;

- (void)draw;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ShapeMaker&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (void)drawCircleWithParas:(NSDictionary *)paras {

// 绘制了一个圆
Circle *circle = [Circle new];
circle.radius  = 10.f; // paras里取
[circle draw];
}

+ (void)drawCircleAndRectangle:(NSDictionary *)paras {
// 绘制了一个圆
Circle *circle = [Circle new];
circle.radius  = 10.f; // paras里取
[circle draw];

// 绘制了一个矩形
Rectangle *rectangle = [Rectangle new];
rectangle.width      = 10.f; // paras里取
rectangle.height     = 20.f; // paras里取
[rectangle draw];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];
// 绘制一个圆的操作
[ShapeMaker drawCircleWithParas:@{@&amp;quot;a&amp;quot; : @&amp;quot;b&amp;quot;}];

// 绘制圆 + 矩形操作
[ShapeMaker drawCircleAndRectangle:@{@&amp;quot;a&amp;quot; : @&amp;quot;b&amp;quot;, @&amp;quot;c&amp;quot; : @&amp;quot;d&amp;quot;}];
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;外观模式解决的问题&quot;&gt;&lt;a href=&quot;#外观模式解决的问题&quot; class=&quot;headerlink&quot; title=&quot;外观模式解决的问题&quot;&gt;&lt;/a&gt;外观模式解决的问题&lt;/h1&gt;&lt;p&gt;如果在viewController里绘制图形，需要单独的写很多行代码，耦合性很高&lt;/
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-原型</title>
    <link href="http://jackliu17.github.io/2016/05/27/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B/"/>
    <id>http://jackliu17.github.io/2016/05/27/iOS设计模式-原型/</id>
    <published>2016-05-27T02:34:13.000Z</published>
    <updated>2016-05-27T02:38:59.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;原型模式解决的问题&quot;&gt;&lt;a href=&quot;#原型模式解决的问题&quot; class=&quot;headerlink&quot; title=&quot;原型模式解决的问题&quot;&gt;&lt;/a&gt;原型模式解决的问题&lt;/h1&gt;&lt;p&gt;每个对象需要重新创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StudentModel *stu1 = [[StudentModel alloc] init];
stu1.name          = @&amp;quot;小王&amp;quot;;
stu1.age           = @(19);
stu1.address       = @&amp;quot;中关村&amp;quot;;
stu1.totalScore    = @(100);


StudentModel *stu2 = [[StudentModel alloc] init];
stu1.name          = @&amp;quot;小刘&amp;quot;;
stu1.age           = @(19);
stu1.address       = @&amp;quot;中关村&amp;quot;;
stu1.totalScore    = @(100);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;原型设计-自我拷贝&quot;&gt;&lt;a href=&quot;#原型设计-自我拷贝&quot; class=&quot;headerlink&quot; title=&quot;原型设计:自我拷贝&quot;&gt;&lt;/a&gt;原型设计:自我拷贝&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPattern0501.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用场景：对象创建特别复杂，两个对象在抽象逻辑完全一致，只是在实例化的细节略有差异，如果要重新创建一个对象，不如拷贝自己再去修改&lt;/p&gt;
&lt;p&gt;ProtoypeCopyProtocol    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@protocol ProtoypeCopyProtocol &amp;lt;NSObject&amp;gt;
@required
- (id)clone;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;StudentModel&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface StudentModel : NSObject &amp;lt;ProtoypeCopyProtocol&amp;gt;

@property (nonatomic, strong) NSString  *name;
@property (nonatomic, strong) NSNumber  *age;
@property (nonatomic, strong) NSString  *address;
@property (nonatomic, strong) NSNumber  *totalScore;

- (id)clone;
@end

@implementation StudentModel

- (id)clone {

    StudentModel *student = [[[self class] alloc] init];

    // 完成复杂操作的所有作业
    student.name       = self.name;
    student.age        = self.age;
    student.address    = self.address;
    student.totalScore = self.totalScore;
    return student;
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;viewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    // 学生1
    StudentModel *stu1 = [[StudentModel alloc] init];
    stu1.name          = @&amp;quot;小王&amp;quot;;
    stu1.age           = @(19);
    stu1.address       = @&amp;quot;中关村&amp;quot;;
    stu1.totalScore    = @(100);

    // 学生2
    StudentModel *stu2 = [stu1 clone];
    stu2.name          = @&amp;quot;小红&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;框架级别的原型模式-NSCopying&quot;&gt;&lt;a href=&quot;#框架级别的原型模式-NSCopying&quot; class=&quot;headerlink&quot; title=&quot;框架级别的原型模式:NSCopying&quot;&gt;&lt;/a&gt;框架级别的原型模式:NSCopying&lt;/h1&gt;&lt;p&gt;BasCopyObject&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//遵循NSCopying协议
@interface BasCopyObject : NSObject &amp;lt;NSCopying&amp;gt;


//子类不要重载这个方法
- (id)copyWithZone:(NSZone *)zone {
    .........
BasCopyObject *copyObject = [[self class] allocWithZone:zone];

// 赋值操作作业，//由子类重载实现
[self copyOperationWithObject:copyObject];
return copyObject;
}

- (void)copyOperationWithObject:(id)object {

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;StudentModel&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//继承基类
@interface StudentModel : BasCopyObject

- (void)copyOperationWithObject:(StudentModel *)object {  
object.name = self.name;
object.age  = self.age;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StudentModel *stu1 = [[StudentModel alloc] init];
StudentModel *stu2 = stu1.copy;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;深拷贝与浅拷贝&quot;&gt;&lt;a href=&quot;#深拷贝与浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;深拷贝与浅拷贝&quot;&gt;&lt;/a&gt;深拷贝与浅拷贝&lt;/h1&gt;&lt;h2 id=&quot;浅拷贝&quot;&gt;&lt;a href=&quot;#浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;浅拷贝&quot;&gt;&lt;/a&gt;浅拷贝&lt;/h2&gt;&lt;p&gt;ClassModel&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)copyOperationWithObject:(ClassModel *)object {
object.className = self.className;
object.students = self.students;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ClassModel *class1 = [[ClassModel alloc] init];
class1.className   = @&amp;quot;班级1&amp;quot;;
class1.students    = @[stu1, stu2];

ClassModel *class2 = class1.copy;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样拷贝出来的数组students内存地址一样。说明数组拷贝没有成功。就好像student既属于A班，又属于B班&lt;/p&gt;
&lt;h2 id=&quot;深拷贝&quot;&gt;&lt;a href=&quot;#深拷贝&quot; class=&quot;headerlink&quot; title=&quot;深拷贝&quot;&gt;&lt;/a&gt;深拷贝&lt;/h2&gt;&lt;p&gt;同时要求数组里的每个对象也要实现NSCopying协议&lt;/p&gt;
&lt;p&gt;ClassModel&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)copyOperationWithObject:(ClassModel *)object {

    object.className = self.className;
    // 完成了深拷贝(完整的复制了集合里面的对象)
    object.students  = [[NSArray alloc] initWithArray:self.students copyItems:YES];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ClassModel *class1 = [[ClassModel alloc] init];
class1.className   = @&amp;quot;班级1&amp;quot;;
class1.students    = @[stu1, stu2];

ClassModel *class2 = class1.copy;    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样拷贝出来的class2中的数组对象students才能与class1中的数组对象students有不同的内存地址&lt;/p&gt;
&lt;h1 id=&quot;self-class&quot;&gt;&lt;a href=&quot;#self-class&quot; class=&quot;headerlink&quot; title=&quot;[self class]&quot;&gt;&lt;/a&gt;[self class]&lt;/h1&gt;&lt;p&gt;这里使用self，是因为StudentModel可能会被子类继承&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StudentModel *student = [[[self class] alloc] init];
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原型模式解决的问题&quot;&gt;&lt;a href=&quot;#原型模式解决的问题&quot; class=&quot;headerlink&quot; title=&quot;原型模式解决的问题&quot;&gt;&lt;/a&gt;原型模式解决的问题&lt;/h1&gt;&lt;p&gt;每个对象需要重新创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StudentModel *st
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-观察者</title>
    <link href="http://jackliu17.github.io/2016/05/26/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85/"/>
    <id>http://jackliu17.github.io/2016/05/26/iOS设计模式-观察者/</id>
    <published>2016-05-26T09:46:49.000Z</published>
    <updated>2016-05-26T09:49:18.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;通知中心业务逻辑&quot;&gt;&lt;a href=&quot;#通知中心业务逻辑&quot; class=&quot;headerlink&quot; title=&quot;通知中心业务逻辑&quot;&gt;&lt;/a&gt;通知中心业务逻辑&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPattern0401.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;订阅中心是单例模式，只有一个&lt;/li&gt;
&lt;li&gt;订阅中心维护书刊的信息，书刊号维护用户的信息&lt;/li&gt;
&lt;li&gt;用户信息是某种集合(NSDictionary, NSSet, NSArray)&lt;/li&gt;
&lt;li&gt;观察者(用户)是被动接收消息的，不会影响到订阅中心的发布&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;抽象接口设计&quot;&gt;&lt;a href=&quot;#抽象接口设计&quot; class=&quot;headerlink&quot; title=&quot;抽象接口设计&quot;&gt;&lt;/a&gt;抽象接口设计&lt;/h1&gt;&lt;p&gt;按照业务逻辑，和涉及的对象，将逻辑理顺，&lt;strong&gt;不需要考虑如何实现&lt;/strong&gt;，先设计接口。例如，通知中心可以这样:&lt;/p&gt;
&lt;p&gt;维护订阅信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//创建订阅号
+ (void)createSubscriptionNumber:(NSString *)subscriptionNumber;

//移除订阅号
+ (void)removeSubscriptionNumber:(NSString *)subscriptionNumber;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;维护客户信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//添加客户到具体的订阅号当中
+ (void)addCustomer:(id &amp;lt;SubscriptionServiceCenterProtocol&amp;gt;)customer withSubscriptionNumber:(NSString *)subscriptionNumber;

//从具体的订阅号当中移除客户
+ (void)removeCustomer:(id &amp;lt;SubscriptionServiceCenterProtocol&amp;gt;)customer withSubscriptionNumber:(NSString *)subscriptionNumber;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;发送消息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//发送消息到具体的订阅号当中
+ (void)sendMessage:(id)message toSubscriptionNumber:(NSString *)subscriptionNumber;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;通知中心与用户的消息传递-协议&quot;&gt;&lt;a href=&quot;#通知中心与用户的消息传递-协议&quot; class=&quot;headerlink&quot; title=&quot;通知中心与用户的消息传递(协议)&quot;&gt;&lt;/a&gt;通知中心与用户的消息传递(协议)&lt;/h1&gt;&lt;p&gt;消息传递，就让它遵循某类协议，例如订阅的用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;id &amp;lt;SubscriptionServiceCenterProtocol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;订阅中心实例&quot;&gt;&lt;a href=&quot;#订阅中心实例&quot; class=&quot;headerlink&quot; title=&quot;订阅中心实例&quot;&gt;&lt;/a&gt;订阅中心实例&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPattern0402.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NSHashTable对持有的对象是weak引用。这里的例子用来存储”订阅杂志的用户集合”&lt;/li&gt;
&lt;li&gt;NSSet, NSArray, NSDictionary中对持有对象是strong引用&lt;/li&gt;
&lt;li&gt;NSParameterAssert判断不能为nil，否则程序会奔溃&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;订阅中心创建发行杂志的集合&quot;&gt;&lt;a href=&quot;#订阅中心创建发行杂志的集合&quot; class=&quot;headerlink&quot; title=&quot;订阅中心创建发行杂志的集合&quot;&gt;&lt;/a&gt;订阅中心创建发行杂志的集合&lt;/h2&gt;&lt;p&gt;发行杂志的集合:NSMutableDictionary&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (void)initialize {

if (self == [SubscriptionServiceCenter class]) {

    _subscriptionDictionary = [NSMutableDictionary dictionary];
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;获得某订阅号的用户集合&quot;&gt;&lt;a href=&quot;#获得某订阅号的用户集合&quot; class=&quot;headerlink&quot; title=&quot;获得某订阅号的用户集合&quot;&gt;&lt;/a&gt;获得某订阅号的用户集合&lt;/h2&gt;&lt;p&gt;用户集合:NSHashTable&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (NSHashTable *)existSubscriptionNumber:(NSString *)subscriptionNumber {

return [_subscriptionDictionary objectForKey:subscriptionNumber];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;创建订阅号&quot;&gt;&lt;a href=&quot;#创建订阅号&quot; class=&quot;headerlink&quot; title=&quot;创建订阅号&quot;&gt;&lt;/a&gt;创建订阅号&lt;/h2&gt;&lt;p&gt;创建订阅号，实质上是创建它的用户集合&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (void)createSubscriptionNumber:(NSString *)subscriptionNumber {

NSParameterAssert(subscriptionNumber);

//如果这杂志的用户集合不存在，则创建
NSHashTable *hashTable = [self existSubscriptionNumber:subscriptionNumber];

if (hashTable == nil) {
    hashTable = [NSHashTable weakObjectsHashTable];
    [_subscriptionDictionary setObject:hashTable forKey:subscriptionNumber];
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;移除订阅号&quot;&gt;&lt;a href=&quot;#移除订阅号&quot; class=&quot;headerlink&quot; title=&quot;移除订阅号&quot;&gt;&lt;/a&gt;移除订阅号&lt;/h2&gt;&lt;p&gt;移除订阅号，实质上是移除它的用户集合&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (void)removeSubscriptionNumber:(NSString *)subscriptionNumber {

NSParameterAssert(subscriptionNumber);

NSHashTable *hashTable = [self existSubscriptionNumber:subscriptionNumber];
if (hashTable) {

    [_subscriptionDictionary removeObjectForKey:subscriptionNumber];
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;添加客户到具体的订阅号当中&quot;&gt;&lt;a href=&quot;#添加客户到具体的订阅号当中&quot; class=&quot;headerlink&quot; title=&quot;添加客户到具体的订阅号当中&quot;&gt;&lt;/a&gt;添加客户到具体的订阅号当中&lt;/h2&gt;&lt;p&gt;根据订阅号，取出用户集合，并添加至NSHashTable集合中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (void)addCustomer:(id &amp;lt;SubscriptionServiceCenterProtocol&amp;gt;)customer withSubscriptionNumber:(NSString *)subscriptionNumber {

NSParameterAssert(customer);
NSParameterAssert(subscriptionNumber);


NSHashTable *hashTable = [self existSubscriptionNumber:subscriptionNumber];
[hashTable addObject:customer];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;从具体的订阅号当中移除客户&quot;&gt;&lt;a href=&quot;#从具体的订阅号当中移除客户&quot; class=&quot;headerlink&quot; title=&quot;从具体的订阅号当中移除客户&quot;&gt;&lt;/a&gt;从具体的订阅号当中移除客户&lt;/h2&gt;&lt;p&gt;根据订阅号，取出用户集合，从NSHashTable集合中删除，这里customer可以为nil，因为该customer可能本来就没有订阅。所以不需要NSParameterAssert判断&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (void)removeCustomer:(id &amp;lt;SubscriptionServiceCenterProtocol&amp;gt;)customer withSubscriptionNumber:(NSString *)subscriptionNumber {

NSParameterAssert(subscriptionNumber);

NSHashTable *hashTable = [self existSubscriptionNumber:subscriptionNumber];
[hashTable removeObject:customer];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;订阅中心发行期刊&quot;&gt;&lt;a href=&quot;#订阅中心发行期刊&quot; class=&quot;headerlink&quot; title=&quot;订阅中心发行期刊&quot;&gt;&lt;/a&gt;订阅中心发行期刊&lt;/h2&gt;&lt;p&gt;从用户集合中，遍历取出每个用户，只要它实现了协议，就可以获得消息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (void)sendMessage:(id)message toSubscriptionNumber:(NSString *)subscriptionNumber {

NSParameterAssert(subscriptionNumber);

NSHashTable *hashTable = [self existSubscriptionNumber:subscriptionNumber];
if (hashTable) {

    NSEnumerator *enumerator = [hashTable objectEnumerator];
    id &amp;lt;SubscriptionServiceCenterProtocol&amp;gt; object = nil;
    while (object = [enumerator nextObject]) {

        if ([object respondsToSelector:@selector(subscriptionMessage:subscriptionNumber:)]) {

            [object subscriptionMessage:message subscriptionNumber:subscriptionNumber];
        }
    }
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;订阅中心的工作过程&quot;&gt;&lt;a href=&quot;#订阅中心的工作过程&quot; class=&quot;headerlink&quot; title=&quot;订阅中心的工作过程&quot;&gt;&lt;/a&gt;订阅中心的工作过程&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;// 创建订阅号SCIENCE
[SubscriptionServiceCenter createSubscriptionNumber:SCIENCE];

// 添加订阅的用户到指定的刊物
[SubscriptionServiceCenter addCustomer:self(这里是viewcontroller,只要实现了协议，任何对象都可以)
                withSubscriptionNumber:SCIENCE];

// 发行机构发送消息
[SubscriptionServiceCenter sendMessage:@&amp;quot;V1.0&amp;quot; toSubscriptionNumber:SCIENCE];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;用户接收消息的实现&quot;&gt;&lt;a href=&quot;#用户接收消息的实现&quot; class=&quot;headerlink&quot; title=&quot;用户接收消息的实现&quot;&gt;&lt;/a&gt;用户接收消息的实现&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (void)subscriptionMessage:(id)message subscriptionNumber:(NSString *)subscriptionNumber {
NSLog(@&amp;quot;%@  %@&amp;quot;, message, subscriptionNumber);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;框架级别的观察者模式1-NSNotificationCenter&quot;&gt;&lt;a href=&quot;#框架级别的观察者模式1-NSNotificationCenter&quot; class=&quot;headerlink&quot; title=&quot;框架级别的观察者模式1:NSNotificationCenter&quot;&gt;&lt;/a&gt;框架级别的观察者模式1:NSNotificationCenter&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;// 添加客户到指定的订阅号中
[[NSNotificationCenter defaultCenter] addObserver:self  (用户)
                                         selector:@selector(notificationCenterEvent:)
                                             name:SCIENCE（订阅号）
                                           object:nil];

// 发送信息到指定的订阅号当中
[[NSNotificationCenter defaultCenter] postNotificationName:SCIENCE
                                                    object:@&amp;quot;V1.0&amp;quot;];



//通知中心方法
- (void)notificationCenterEvent:(id)sender {
NSLog(@&amp;quot;%@&amp;quot;, sender);
}

- (void)dealloc {

// 移除通知中心
[[NSNotificationCenter defaultCenter] removeObserver:self
                                          forKeyPath:SCIENCE];
                                      }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;框架级别的观察者模式2-KVO&quot;&gt;&lt;a href=&quot;#框架级别的观察者模式2-KVO&quot; class=&quot;headerlink&quot; title=&quot;框架级别的观察者模式2:KVO&quot;&gt;&lt;/a&gt;框架级别的观察者模式2:KVO&lt;/h1&gt;&lt;p&gt;kVO(key value obeserveing)是一种非常重要的机制，他允许监听对象属性的变化&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 创建订阅中心
self.model = [Model new];

// 客户添加了订阅中心的&amp;quot;name&amp;quot;服务
[self.model addObserver:self （用户）
             forKeyPath:@&amp;quot;name&amp;quot; （订阅号）
                options:NSKeyValueObservingOptionNew (当订阅号改变时，需要传递什么值给监听器（枚举类型）)
                context:nil];

// 订阅中心发送消息(通过修改属性值)
self.model.name = @&amp;quot;V1.0&amp;quot;;

//KVO方法
- (void)observeValueForKeyPath:(NSString *)keyPath 
        ofObject:(id)object 
        change:(NSDictionary *)change 
        context:(void *)context {

NSLog(@&amp;quot;%@&amp;quot;, change);
}


- (void)dealloc {
// 移除KVO
[self.model removeObserver:self forKeyPath:@&amp;quot;name&amp;quot;];

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h1&gt;&lt;h2 id=&quot;强引用和弱引用的叙述-转载&quot;&gt;&lt;a href=&quot;#强引用和弱引用的叙述-转载&quot; class=&quot;headerlink&quot; title=&quot;强引用和弱引用的叙述(转载)&quot;&gt;&lt;/a&gt;强引用和弱引用的叙述(转载)&lt;/h2&gt;&lt;p&gt;一个对象:类比为一条狗,释放对象:类比为狗要跑掉&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;strong类型的指针就像是栓住的狗，只要你用绳子拴住狗，那么狗就不会跑掉.——- (一个对象new过以后，不会自动的释放)&lt;/li&gt;
&lt;li&gt;如果有5个人都牵着这一条狗(5条绳子栓一只狗)——- (5个strong类型指针指向一个对象.)&lt;/li&gt;
&lt;li&gt;除非5个绳子都脱落，否则狗是不会跑掉的———— 5个strong指针都=nil，则该对象释放&lt;/li&gt;
&lt;li&gt;weak型指针就像是一个小孩子指着狗喊道：“看，有一只狗在那里”，只要狗一直被拴着，那么小孩子就能看到狗（weak指针）会一直指向它，&lt;/li&gt;
&lt;li&gt;只要狗的绳子脱落，那么狗就会跑掉，不管有多少的小孩在看着它。&lt;/li&gt;
&lt;li&gt;只要最后一个strong型指针不再指向对象，那么对象就会被释放，同时所有的weak型指针都将会被清除。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;NSEnumerator遍历&quot;&gt;&lt;a href=&quot;#NSEnumerator遍历&quot; class=&quot;headerlink&quot; title=&quot;NSEnumerator遍历&quot;&gt;&lt;/a&gt;NSEnumerator遍历&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;NSEnumerator *enumerator = [hashTable objectEnumerator];
id object = nil
while (object = [enumerator nextObject]) {

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;NSParameterAssert&quot;&gt;&lt;a href=&quot;#NSParameterAssert&quot; class=&quot;headerlink&quot; title=&quot;NSParameterAssert&quot;&gt;&lt;/a&gt;NSParameterAssert&lt;/h2&gt;&lt;p&gt;判断不能为nil，否则程序会奔溃&lt;/p&gt;
&lt;h2 id=&quot;判断对象存在与否&quot;&gt;&lt;a href=&quot;#判断对象存在与否&quot; class=&quot;headerlink&quot; title=&quot;判断对象存在与否&quot;&gt;&lt;/a&gt;判断对象存在与否&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//对象存在
if (hashTable) {...}

//对象不存在
if (hashTable == nil) {....}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;initialize&quot;&gt;&lt;a href=&quot;#initialize&quot; class=&quot;headerlink&quot; title=&quot;initialize&quot;&gt;&lt;/a&gt;initialize&lt;/h2&gt;&lt;p&gt;每个对象都具有的初始化方法，只执行一次&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (void)initialize {...}    
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;KVC-key-value-coding&quot;&gt;&lt;a href=&quot;#KVC-key-value-coding&quot; class=&quot;headerlink&quot; title=&quot;KVC (key value coding)&quot;&gt;&lt;/a&gt;KVC (key value coding)&lt;/h2&gt;&lt;p&gt;使用valueforKey:获取Student对象的name。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSString *name = [Student valueForKey :@&amp;quot;name&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用setValue：ForKey:设置student对象的name。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Student setVlue:@&amp;quot;zhangjl&amp;quot; forKey:@&amp;quot;name&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;支持通过键路径(key path)进行访问和赋值。比如：利用键路径对Student对象的Card对象的no属性进行访问和赋值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Student setValue:@&amp;quot;1234&amp;quot; forKeyPath: @&amp;quot;card.no&amp;quot;];
[Student valueForKeyPath:@&amp;quot;card.no&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;通知中心业务逻辑&quot;&gt;&lt;a href=&quot;#通知中心业务逻辑&quot; class=&quot;headerlink&quot; title=&quot;通知中心业务逻辑&quot;&gt;&lt;/a&gt;通知中心业务逻辑&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.co
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-策略</title>
    <link href="http://jackliu17.github.io/2016/05/24/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5/"/>
    <id>http://jackliu17.github.io/2016/05/24/iOS设计模式-策略/</id>
    <published>2016-05-24T09:10:03.000Z</published>
    <updated>2016-05-24T09:29:00.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;if-else的问题&quot;&gt;&lt;a href=&quot;#if-else的问题&quot; class=&quot;headerlink&quot; title=&quot;if-else的问题&quot;&gt;&lt;/a&gt;if-else的问题&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPattern0301.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果判断逻辑都使用if - else,将if - else 的每个判断逻辑抽象为对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef enum : NSUInteger {

EType_01,
EType_02,
EType_03,
EType_04,
EType_05,
EType_06,
EType_07,
EType_08,
EType_09,

} ETypes;

// 输入条件
ETypes type = EType_01;

// 输出条件
NSString *showString = nil;

if (type == EType_01) {

    // showString = ...

} else if (type == EType_02) {

    // showString = ...

} else if (type == EType_03) {

    // showStri
    ......
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;策略的原理&quot;&gt;&lt;a href=&quot;#策略的原理&quot; class=&quot;headerlink&quot; title=&quot;策略的原理&quot;&gt;&lt;/a&gt;策略的原理&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPattern0302.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用场景有策略的父类(strategy)引用，但是实际利用多态调用的是其子类(strategy A, stategy B, stategy C)的方法, 具体实现的算法封装在各个子类里。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相同的输入，不同的输出&lt;/strong&gt;。抽象的父类strategy定义了一个相同的接口，就是相同的输入。具体的实现在其各个子类strategyABC, 输出各不相同，就是不同的输出,因为每个子类里有不同的算法封装&lt;/li&gt;
&lt;li&gt;判断的每个条件生成对应的一个对象&lt;/li&gt;
&lt;li&gt;需要事先知道输入的条件&lt;/li&gt;
&lt;li&gt;策略类对象属于使用场景的一部分&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;策略的使用案例&quot;&gt;&lt;a href=&quot;#策略的使用案例&quot; class=&quot;headerlink&quot; title=&quot;策略的使用案例&quot;&gt;&lt;/a&gt;策略的使用案例&lt;/h1&gt;&lt;h2 id=&quot;抽象的策略-Strategy&quot;&gt;&lt;a href=&quot;#抽象的策略-Strategy&quot; class=&quot;headerlink&quot; title=&quot;抽象的策略 (Strategy)&quot;&gt;&lt;/a&gt;抽象的策略 (Strategy)&lt;/h2&gt;&lt;p&gt;CustomField: 内含inputValidator验证策略&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface CustomField : UITextField

@property (nonatomic, strong) InputValidator *validator;

- (BOOL)validate {
return [self.validator validateInput:self];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;InputValidator:策略的输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface InputValidator : NSObject

@property (nonatomic, strong) NSString *errorMessage;

- (BOOL)validateInput:(UITextField *)input {
return NO;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Email的验证-Strategy-A&quot;&gt;&lt;a href=&quot;#Email的验证-Strategy-A&quot; class=&quot;headerlink&quot; title=&quot;Email的验证 (Strategy A)&quot;&gt;&lt;/a&gt;Email的验证 (Strategy A)&lt;/h2&gt;&lt;p&gt;EmailValidator:重载了父类的验证方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface EmailValidator : InputValidator

- (BOOL)validateInput:(UITextField *)input {

if (input.text.length &amp;lt;= 0) {
    self.errorMessage = @&amp;quot;没有输入&amp;quot;;
} else {
    BOOL isMatch = [input.text isMatch:RX(@&amp;quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}&amp;quot;)];
    if (isMatch == NO) {
        self.errorMessage = @&amp;quot;请输入正确的邮箱&amp;quot;;
    } else {
        self.errorMessage = nil;
    }
}
return self.errorMessage == nil ? YES : NO;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Phone的验证-Strategy-B&quot;&gt;&lt;a href=&quot;#Phone的验证-Strategy-B&quot; class=&quot;headerlink&quot; title=&quot;Phone的验证  (Strategy B)&quot;&gt;&lt;/a&gt;Phone的验证  (Strategy B)&lt;/h2&gt;&lt;p&gt;PhoneNumberValidator :重载了父类的验证方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface PhoneNumberValidator : InputValidator

- (BOOL)validateInput:(UITextField *)input {

if (input.text.length &amp;lt;= 0) {
    self.errorMessage = @&amp;quot;没有输入&amp;quot;;
} else {
    BOOL isMatch = [input.text isMatch:RX(@&amp;quot;^((13[0-9])|(15[^4,\\D])|(18[0,0-9]))\\d{8}$&amp;quot;)];
    if (isMatch == NO) {
        self.errorMessage = @&amp;quot;请输入正确的手机号码&amp;quot;;
    } else {
        self.errorMessage = nil;
    }
}

return self.errorMessage == nil ? YES : NO;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h2&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@property (nonatomic, strong) CustomField  *emailField;
@property (nonatomic, strong) CustomField  *phoneNumberField;

......
self.emailField.validator   = [EmailValidator new];
......
self.phoneNumberField.validator   = [PhoneNumberValidator new];
......
- (void)textFieldDidEndEditing:(UITextField *)textField {
CustomField *customField = (CustomField *)textField;

//使用这行代码也可以 if ([customField.validator validateInput:customField] == NO){...}

if ([customField validate] == NO) {
    [UIInfomationView showAlertViewWithTitle:nil
                                     message:customField.validator.errorMessage
                           cancelButtonTitle:nil
                           otherButtonTitles:@[@&amp;quot;确定&amp;quot;]
                                clickAtIndex:^(NSInteger buttonIndex) {

                                }];
}
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;if-else的问题&quot;&gt;&lt;a href=&quot;#if-else的问题&quot; class=&quot;headerlink&quot; title=&quot;if-else的问题&quot;&gt;&lt;/a&gt;if-else的问题&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.cl
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式-适配器</title>
    <link href="http://jackliu17.github.io/2016/05/23/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8/"/>
    <id>http://jackliu17.github.io/2016/05/23/iOS设计模式-适配器/</id>
    <published>2016-05-22T23:26:19.000Z</published>
    <updated>2016-05-23T00:09:33.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;视图在中央&quot;&gt;&lt;a href=&quot;#视图在中央&quot; class=&quot;headerlink&quot; title=&quot;视图在中央&quot;&gt;&lt;/a&gt;视图在中央&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;cardView.center = self.view.center;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;直接赋值的弊端&quot;&gt;&lt;a href=&quot;#直接赋值的弊端&quot; class=&quot;headerlink&quot; title=&quot;直接赋值的弊端&quot;&gt;&lt;/a&gt;直接赋值的弊端&lt;/h1&gt;&lt;p&gt;如果要修改的话，需要修改所有赋值(目前有三处)&lt;/p&gt;
&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BusinessCardView *cardView = [[BusinessCardView alloc] initWithFrame:BUSINESS_FRAME];
cardView.name        = @&amp;quot;Hello&amp;quot;;
cardView.lineColor   = [UIColor redColor];
cardView.phoneNumber = @&amp;quot;101 - 5687 - 000&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;对象赋值-封装&quot;&gt;&lt;a href=&quot;#对象赋值-封装&quot; class=&quot;headerlink&quot; title=&quot;对象赋值(封装)&quot;&gt;&lt;/a&gt;对象赋值(封装)&lt;/h1&gt;&lt;p&gt;以一个类进行封装，降低了耦合度，只需要修改一处(model)。但问题是，如果导入的对象与loadData方法不一致呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BusinessCardView *cardView = [[BusinessCardView alloc] initWithFrame:BUSINESS_FRAME];

Model *model      = [[Model alloc] init];
model.name        = @&amp;quot;Hello&amp;quot;;
model.lineColor   = [UIColor redColor];
model.phoneNumber = @&amp;quot;101 - 5687 - 000&amp;quot;;

[cardView loadData:model];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;使用适配器模式&quot;&gt;&lt;a href=&quot;#使用适配器模式&quot; class=&quot;headerlink&quot; title=&quot;使用适配器模式&quot;&gt;&lt;/a&gt;使用适配器模式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;创建抽象适配器对象&lt;/li&gt;
&lt;li&gt;适配器与视图层建立输出联系&lt;/li&gt;
&lt;li&gt;适配器与数据层建立输入联系&lt;/li&gt;
&lt;li&gt;类适配器与对象适配器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPattern0201.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Protocl-Adapter&quot;&gt;&lt;a href=&quot;#Protocl-Adapter&quot; class=&quot;headerlink&quot; title=&quot;Protocl + Adapter&quot;&gt;&lt;/a&gt;Protocl + Adapter&lt;/h2&gt;&lt;p&gt;BusinessCardAdapterProtocol&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//输出的数据一致性
@protocol BusinessCardAdapterProtocol &amp;lt;NSObject&amp;gt;

- (NSString *)name;
- (UIColor *)lineColor;
- (NSString *)phoneNumber;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;BusinessCardAdapter (空实现，用来让子类继承)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface BusinessCardAdapter : NSObject &amp;lt;BusinessCardAdapterProtocol&amp;gt;
@property (nonatomic, weak) id data;
- (instancetype)initWithData:(id)data;

@implementation BusinessCardAdapter
- (instancetype)initWithData:(id)data {
self = [super init];
if (self) {
    self.data = data;
}
return self;
}

- (NSString *)name {
return nil;
}

- (UIColor *)lineColor {
return nil;
}

- (NSString *)phoneNumber {
return nil;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;BusinessCardView&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//加载数据(实现了BusinessCardAdapterProtocol协议的数据)
- (void)loadData:(id &amp;lt;BusinessCardAdapterProtocol&amp;gt;)data {
self.name        = [data name];
self.lineColor   = [data lineColor];
self.phoneNumber = [data phoneNumber];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;针对Model-class-的类适配器&quot;&gt;&lt;a href=&quot;#针对Model-class-的类适配器&quot; class=&quot;headerlink&quot; title=&quot;针对Model class 的类适配器&quot;&gt;&lt;/a&gt;针对Model class 的类适配器&lt;/h2&gt;&lt;p&gt;Model&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface Model : NSObject
@property (nonatomic, strong) NSString *name;
@property (nonatomic, strong) UIColor  *lineColor;
@property (nonatomic, strong) NSString *phoneNumber;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ModelAdapter(类适配器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface ModelAdapter : BusinessCardAdapter

@end

@implementation ModelAdapter

- (instancetype)initWithData:(id)data {
self = [super init];
if (self) {        
    self.data = data;
}  
return self;
}

- (NSString *)name {  
Model *data = self.data; 
return data.name;
}

- (UIColor *)lineColor {
Model *data = self.data; 
return data.lineColor;
}

- (NSString *)phoneNumber {
Model *data = self.data;
return data.phoneNumber;
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BusinessCardView *cardView = [[BusinessCardView alloc] initWithFrame:BUSINESS_FRAME];
Model *model      = [[Model alloc] init];
model.name        = @&amp;quot;JiKeXueYuan&amp;quot;;
model.lineColor   = [UIColor redColor];
model.phoneNumber = @&amp;quot;101 - 5687 - 000&amp;quot;;

// 与输入建立联系
BusinessCardAdapter *modelAdapter = [[ModalAdapter alloc] initWithData:model];

// 与输出建立联系
[cardView loadData:modelAdapter];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;针对NewCardModel的类适配器&quot;&gt;&lt;a href=&quot;#针对NewCardModel的类适配器&quot; class=&quot;headerlink&quot; title=&quot;针对NewCardModel的类适配器&quot;&gt;&lt;/a&gt;针对NewCardModel的类适配器&lt;/h2&gt;&lt;p&gt;NewCardModel&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface NewCardModel : NSObject
@property (nonatomic, strong) NSString *name;
@property (nonatomic, strong) NSString *colorHexString;
@property (nonatomic, strong) NSString *phoneNumber;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;NewCardModelApater (类适配器)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface NewCardModelApater : BusinessCardAdapter

@end

@implementation NewCardModelApater

- (instancetype)initWithData:(id)data {
self = [super init];
if (self) {
    self.data = data;
}
return self;
}

- (NSString *)name {
NewCardModel *data = self.data;
return data.name;
}

- (UIColor *)lineColor {
NewCardModel *data = self.data;
// todo
if ([data.colorHexString isEqualToString:@&amp;quot;black&amp;quot;]) {
    return [UIColor blackColor];
} else {
    return [UIColor redColor];
}
}

- (NSString *)phoneNumber {
NewCardModel *data = self.data;
return data.phoneNumber;
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BusinessCardView *cardView = [[BusinessCardView alloc] initWithFrame:BUSINESS_FRAME];

NewCardModel *newCardModel  = [[NewCardModel alloc] init];
newCardModel.name           = @&amp;quot;JiKeXueYuan&amp;quot;;
newCardModel.colorHexString = @&amp;quot;black&amp;quot;;
newCardModel.phoneNumber    = @&amp;quot;101 - 5687 - 000&amp;quot;;

// 与输入建立联系
BusinessCardAdapter *modelAdapter = [[NewCardModelApater alloc] initWithData:NewCardModel];

// 与输出建立联系
[cardView loadData:modelAdapter];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;对象适配器-万能&quot;&gt;&lt;a href=&quot;#对象适配器-万能&quot; class=&quot;headerlink&quot; title=&quot;对象适配器(万能)&quot;&gt;&lt;/a&gt;对象适配器(万能)&lt;/h2&gt;&lt;p&gt;一个适配器解决所有数据模型，代码里会显得很臃肿&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface CardAdapter : BusinessCardAdapter

@end

#import &amp;quot;CardAdapter.h&amp;quot;
#import &amp;quot;Model.h&amp;quot;
#import &amp;quot;NewCardModel.h&amp;quot;

@implementation CardAdapter

- (instancetype)initWithData:(id)data {
self = [super init];
if (self) {      
    self.data = data;
} 
return self;
}

- (NSString *)name {
NSString *name = nil;
if ([self.data isMemberOfClass:[Model class]]) {
    Model *model = self.data;
    name         = model.name;
} else if ([self.data isMemberOfClass:[NewCardModel class]]) {
    NewCardModel *model = self.data;
    name                = model.name;
}
return name;
}

- (UIColor *)lineColor {
UIColor *lineColor = nil;
if ([self.data isMemberOfClass:[Model class]]) { 
    Model *model = self.data;
    lineColor    = model.lineColor; 
} else if ([self.data isMemberOfClass:[NewCardModel class]]) {
    NewCardModel *model = self.data;
    if ([model.colorHexString isEqualToString:@&amp;quot;black&amp;quot;]) {
        lineColor = [UIColor blackColor];  
    } else { 
        lineColor = [UIColor redColor];
    }
}
return lineColor;
}

- (NSString *)phoneNumber {
NSString *phoneNumber = nil;
if ([self.data isMemberOfClass:[Model class]]) {
    Model *model = self.data;
    phoneNumber  = model.phoneNumber;
} else if ([self.data isMemberOfClass:[NewCardModel class]]) {
    NewCardModel *model = self.data;
    phoneNumber         = model.phoneNumber;
}
return phoneNumber;
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;适配器的优点和缺点&quot;&gt;&lt;a href=&quot;#适配器的优点和缺点&quot; class=&quot;headerlink&quot; title=&quot;适配器的优点和缺点&quot;&gt;&lt;/a&gt;适配器的优点和缺点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;降低视图层和数据层的耦合度&lt;/li&gt;
&lt;li&gt;让一个类在不经过修改的情况下适应更多的情形&lt;/li&gt;
&lt;li&gt;代码可读性差，比较繁琐&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;视图在中央&quot;&gt;&lt;a href=&quot;#视图在中央&quot; class=&quot;headerlink&quot; title=&quot;视图在中央&quot;&gt;&lt;/a&gt;视图在中央&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;cardView.center = self.view.center;
&lt;/code&gt;&lt;/pre&gt;&lt;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS播放音频简介</title>
    <link href="http://jackliu17.github.io/2016/05/22/iOS%E6%92%AD%E6%94%BE%E9%9F%B3%E9%A2%91%E7%AE%80%E4%BB%8B/"/>
    <id>http://jackliu17.github.io/2016/05/22/iOS播放音频简介/</id>
    <published>2016-05-22T00:27:59.000Z</published>
    <updated>2016-05-22T00:50:59.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Play-Sound-only&quot;&gt;&lt;a href=&quot;#Play-Sound-only&quot; class=&quot;headerlink&quot; title=&quot;Play Sound only&quot;&gt;&lt;/a&gt;Play Sound only&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;import AVFoundation

let fileUrl = NSURL(fileURLWithPath: NSBundle.mainBundle().pathForResource(&amp;quot;sound&amp;quot;, ofType: &amp;quot;mp3&amp;quot;)!)

aPlayer = try? AVAudioPlayer(contentsOfURL:fileUrl);

aPlayer.play();

aPlayer.pause()

//stop and reset to starting point      
aPlayer.stop()
aPlayer.currentTime = 0
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Play-Sound-with-UI&quot;&gt;&lt;a href=&quot;#Play-Sound-with-UI&quot; class=&quot;headerlink&quot; title=&quot;Play Sound with UI&quot;&gt;&lt;/a&gt;Play Sound with UI&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;import MediaPlayer            

let p = MPMoviePlayerViewController(contentURL: fileUrl);

presentViewController(p, animated: true, completion: nil)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Record-and-Play-Sound&quot;&gt;&lt;a href=&quot;#Record-and-Play-Sound&quot; class=&quot;headerlink&quot; title=&quot;Record and Play Sound&quot;&gt;&lt;/a&gt;Record and Play Sound&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;import AVFoundation

var avRec:AVAudioRecorder!
var audioFileUrl:NSURL!
var avPlayer:AVAudioPlayer!

override func viewDidLoad() {

    super.viewDidLoad()

    FileUrl = (NSFileManager.defaultManager().URLsForDirectory(NSSearchPathDirectory.DocumentDirectory, inDomains: NSSearchPathDomainMask.AllDomainsMask)[0] as NSURL)
        .URLByAppendingPathComponent(&amp;quot;rec&amp;quot;)

    avRec = try? AVAudioRecorder(URL:audioFileUrl, settings: [:])

    avRec.prepareToRecord()
}

@IBAction func playRecBtnClicked(sender: AnyObject) {

    avPlayer = try? AVAudioPlayer(contentsOfURL: audioFileUrl)
    avPlayer.prepareToPlay()
    avPlayer.play()
}

@IBAction func stopRecBtnClicked(sender: AnyObject) {

    avRec.stop()
}

@IBAction func startRecBtnClicked(sender: AnyObject) {

    avRec.record()
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Play-Sound-only&quot;&gt;&lt;a href=&quot;#Play-Sound-only&quot; class=&quot;headerlink&quot; title=&quot;Play Sound only&quot;&gt;&lt;/a&gt;Play Sound only&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;import AVF
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_media" scheme="http://jackliu17.github.io/tags/iOS-media/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式简介</title>
    <link href="http://jackliu17.github.io/2016/05/21/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/"/>
    <id>http://jackliu17.github.io/2016/05/21/iOS设计模式简介/</id>
    <published>2016-05-21T08:23:12.000Z</published>
    <updated>2016-05-21T08:26:31.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;设计模式的基本原则&quot;&gt;&lt;a href=&quot;#设计模式的基本原则&quot; class=&quot;headerlink&quot; title=&quot;设计模式的基本原则&quot;&gt;&lt;/a&gt;设计模式的基本原则&lt;/h1&gt;&lt;h2 id=&quot;开闭原则&quot;&gt;&lt;a href=&quot;#开闭原则&quot; class=&quot;headerlink&quot; title=&quot;开闭原则&quot;&gt;&lt;/a&gt;开闭原则&lt;/h2&gt;&lt;p&gt;扩展开放，修改关闭, 比如继承base类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;BaseAnimationView.h&amp;quot;
@interface FadeAnimationView : BaseAnimationView
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;里氏代换原则&quot;&gt;&lt;a href=&quot;#里氏代换原则&quot; class=&quot;headerlink&quot; title=&quot;里氏代换原则&quot;&gt;&lt;/a&gt;里氏代换原则&lt;/h2&gt;&lt;p&gt;子类父类相互替换，使用相互的方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad {
[super viewDidLoad];

BaseAnimationView *animationView = [[ScaleAnimationView alloc] init];
[animationView changeToDisableStateAnimated:YES duration:0.5f];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;空实现：建立一个类，并不是直接使用，而是把他当做抽象的父类来使用,在.m中进行空实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)changeToDisableStateAnimated:(BOOL)animated duration:(NSTimeInterval)duration {

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;依赖倒转原则&quot;&gt;&lt;a href=&quot;#依赖倒转原则&quot; class=&quot;headerlink&quot; title=&quot;依赖倒转原则&quot;&gt;&lt;/a&gt;依赖倒转原则&lt;/h2&gt;&lt;p&gt;抽象的方法可以暴露在.h文件，但具体的实现，即私有方法，不应该暴露&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)fadeAnimated:(BOOL)animated {

// todo
}

- (void)changeToNormalStateAnimated:(BOOL)animated duration:(NSTimeInterval)duration {

[self fadeAnimated:animated];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;接口隔离原则&quot;&gt;&lt;a href=&quot;#接口隔离原则&quot; class=&quot;headerlink&quot; title=&quot;接口隔离原则&quot;&gt;&lt;/a&gt;接口隔离原则&lt;/h2&gt;&lt;p&gt;接口只做必要的事情，比如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)changeToNormalStateAnimated:(BOOL)animated duration:(NSTimeInterval)duration;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果是这样，添加了frame值，就没必要。frame值完全没必要暴露出来&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)changeToNormalStateAnimated:(BOOL)animated duration:(NSTimeInterval)duration frame:(CGRect)frame;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;合成-聚合复用&quot;&gt;&lt;a href=&quot;#合成-聚合复用&quot; class=&quot;headerlink&quot; title=&quot;合成/聚合复用&quot;&gt;&lt;/a&gt;合成/聚合复用&lt;/h2&gt;&lt;p&gt;如果BaseAnimation中的方法满足不了需求了，不需要继承它创建新类,而是用一个类作为容器将其聚合&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface AnimationView : UIView

@property (nonatomic, strong) FadeAnimationView *fadeAnimationView;

- (void)changeToErrorStateAnimated:(BOOL)animated duration:(NSTimeInterval)duration;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;设计模式的类型&quot;&gt;&lt;a href=&quot;#设计模式的类型&quot; class=&quot;headerlink&quot; title=&quot;设计模式的类型&quot;&gt;&lt;/a&gt;设计模式的类型&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_designPattern0101.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;两本书推荐阅读&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pro Design Patterns in Swift  (By Adam Freeman)&lt;/li&gt;
&lt;li&gt;Pro Objective-C Design Patterns for iOS (By Carlo Chung)&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式的基本原则&quot;&gt;&lt;a href=&quot;#设计模式的基本原则&quot; class=&quot;headerlink&quot; title=&quot;设计模式的基本原则&quot;&gt;&lt;/a&gt;设计模式的基本原则&lt;/h1&gt;&lt;h2 id=&quot;开闭原则&quot;&gt;&lt;a href=&quot;#开闭原则&quot; class=&quot;headerli
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_designPattern" scheme="http://jackliu17.github.io/tags/iOS-designPattern/"/>
    
  </entry>
  
  <entry>
    <title>iOS视频播放和录制</title>
    <link href="http://jackliu17.github.io/2016/05/21/iOS%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%92%8C%E5%BD%95%E5%88%B6/"/>
    <id>http://jackliu17.github.io/2016/05/21/iOS视频播放和录制/</id>
    <published>2016-05-21T05:39:21.000Z</published>
    <updated>2016-05-21T05:40:01.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Play-Video&quot;&gt;&lt;a href=&quot;#Play-Video&quot; class=&quot;headerlink&quot; title=&quot;Play Video&quot;&gt;&lt;/a&gt;Play Video&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;import UIKit
import MediaPlayer

class ViewController: UIViewController {

var pc:MPMoviePlayerViewController!

@IBAction func playVideoBtnClicked(sender: AnyObject) {

    pc = MPMoviePlayerViewController(contentURL: NSBundle.mainBundle().URLForResource(&amp;quot;video&amp;quot;, withExtension: &amp;quot;mp4&amp;quot;))
    presentViewController(pc, animated: true, completion: nil)
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Record-Video&quot;&gt;&lt;a href=&quot;#Record-Video&quot; class=&quot;headerlink&quot; title=&quot;Record Video&quot;&gt;&lt;/a&gt;Record Video&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;import UIKit
import MobileCoreServices
import MediaPlayer

class ViewController: UIViewController,UIImagePickerControllerDelegate,UINavigationControllerDelegate  {

var picker:UIImagePickerController!
var videoUrl:NSURL?
var player:MPMoviePlayerViewController!

@IBAction func playVideoBtnClicked(sender: AnyObject) {

    if let url = videoUrl{
        player = MPMoviePlayerViewController(contentURL: url)
        presentViewController(player, animated: true, completion: nil)
    }
}


@IBAction func recVideoBtnClicked(sender: AnyObject) {

    picker = UIImagePickerController()
    picker.mediaTypes = [kUTTypeMovie as String]
    picker.sourceType = UIImagePickerControllerSourceType.Camera
    picker.cameraCaptureMode = UIImagePickerControllerCameraCaptureMode.Video
    picker.delegate = self

    presentViewController(picker, animated: true, completion: nil) 
}


func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) {

    videoUrl = info[UIImagePickerControllerMediaURL] as? NSURL

    picker.dismissViewControllerAnimated(true, completion: nil)
}

func imagePickerControllerDidCancel(picker: UIImagePickerController) {
    picker.dismissViewControllerAnimated(true, completion: nil)
}
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Play-Video&quot;&gt;&lt;a href=&quot;#Play-Video&quot; class=&quot;headerlink&quot; title=&quot;Play Video&quot;&gt;&lt;/a&gt;Play Video&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;import UIKit
import MediaPlaye
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_media" scheme="http://jackliu17.github.io/tags/iOS-media/"/>
    
  </entry>
  
  <entry>
    <title>iOS-HTTP通信</title>
    <link href="http://jackliu17.github.io/2016/05/21/iOS-HTTP%E9%80%9A%E4%BF%A1/"/>
    <id>http://jackliu17.github.io/2016/05/21/iOS-HTTP通信/</id>
    <published>2016-05-21T03:11:52.000Z</published>
    <updated>2016-05-21T03:14:46.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;URL-path&quot;&gt;&lt;a href=&quot;#URL-path&quot; class=&quot;headerlink&quot; title=&quot;URL path&quot;&gt;&lt;/a&gt;URL path&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let httpPath = NSURL(string:&amp;quot;http://jikexueyuan.com&amp;quot; )
let httpRequest = NSURLRequest(URL: httpPath!)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;打印HTML代码&quot;&gt;&lt;a href=&quot;#打印HTML代码&quot; class=&quot;headerlink&quot; title=&quot;打印HTML代码&quot;&gt;&lt;/a&gt;打印HTML代码&lt;/h1&gt;&lt;h2 id=&quot;字符串类型输出&quot;&gt;&lt;a href=&quot;#字符串类型输出&quot; class=&quot;headerlink&quot; title=&quot;字符串类型输出&quot;&gt;&lt;/a&gt;字符串类型输出&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;do {
    let httpCode = try NSString(contentsOfURL: httpPath!, encoding: NSUTF8StringEncoding)
    print(httpCode)
}catch{
    print(error)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二进制类型输出&quot;&gt;&lt;a href=&quot;#二进制类型输出&quot; class=&quot;headerlink&quot; title=&quot;二进制类型输出&quot;&gt;&lt;/a&gt;二进制类型输出&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let data = NSData(contentsOfURL:httpPath!)
print(data!)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二进制转字符串输出&quot;&gt;&lt;a href=&quot;#二进制转字符串输出&quot; class=&quot;headerlink&quot; title=&quot;二进制转字符串输出&quot;&gt;&lt;/a&gt;二进制转字符串输出&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let data = NSData(contentsOfURL:httpPath!)
print(NSString(data:data!, encoding: NSUTF8StringEncoding))
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;同步请求&quot;&gt;&lt;a href=&quot;#同步请求&quot; class=&quot;headerlink&quot; title=&quot;同步请求&quot;&gt;&lt;/a&gt;同步请求&lt;/h1&gt;&lt;h2 id=&quot;打印HTML代码-1&quot;&gt;&lt;a href=&quot;#打印HTML代码-1&quot; class=&quot;headerlink&quot; title=&quot;打印HTML代码&quot;&gt;&lt;/a&gt;打印HTML代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;do{
    let data = try NSURLConnection.sendSynchronousRequest(NSURLRequest(URL: httpPath!), returningResponse: nil)
    print(NSString(data:data, encoding: NSUTF8StringEncoding))
}catch{
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;打印HTTP-header&quot;&gt;&lt;a href=&quot;#打印HTTP-header&quot; class=&quot;headerlink&quot; title=&quot;打印HTTP header&quot;&gt;&lt;/a&gt;打印HTTP header&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var resp:NSURLResponse?

    do{
     try NSURLConnection.sendSynchronousRequest(NSURLRequest(URL: httpPath!), returningResponse: &amp;amp;resp)
    }catch{
    }

    if let r = resp{
       print(r)
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;异步请求&quot;&gt;&lt;a href=&quot;#异步请求&quot; class=&quot;headerlink&quot; title=&quot;异步请求&quot;&gt;&lt;/a&gt;异步请求&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;NSURLConnection.sendAsynchronousRequest(httpRequest, queue: NSOperationQueue()){
    (resp:NSURLResponse?, data:NSData?, error:NSError?) -&amp;gt; Void in

    print(NSString(data: data!, encoding: NSUTF8StringEncoding))

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Get-communication&quot;&gt;&lt;a href=&quot;#Get-communication&quot; class=&quot;headerlink&quot; title=&quot;Get communication&quot;&gt;&lt;/a&gt;Get communication&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let httpPath:NSURL? = NSURL(string:&amp;quot;http://localhost:8080/MyServer/Hello.jsp?name=\(self.tvInput.text)&amp;quot;)       
let httpRequest:NSURLRequest = NSURLRequest(URL:httpPath!)

NSURLConnection.sendAsynchronousRequest(httpRequest, queue: NSOperationQueue()){
(resp:NSURLResponse?, data:NSData?, error:NSError?) -&amp;gt; Void in
    dispatch_sync(dispatch_get_main_queue(), {
        self.tvOut.text = NSString(data: data!, encoding: NSUTF8StringEncoding)! as String
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;Get方式是将传输数据放在地址栏&lt;/li&gt;
&lt;li&gt;改变UI界面需要在主线程执行&lt;/li&gt;
&lt;li&gt;不能传输庞大的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Post-communication&quot;&gt;&lt;a href=&quot;#Post-communication&quot; class=&quot;headerlink&quot; title=&quot;Post communication&quot;&gt;&lt;/a&gt;Post communication&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let httpUrl = NSURL(string: &amp;quot;http://localhost:8080/MyServer/hello.jsp&amp;quot;)
let req = NSMutableURLRequest(URL:httpUrl!)
req.HTTPMethod = &amp;quot;POST&amp;quot;
req.HTTPBody = NSString(string:&amp;quot;name=\(tvInput.text)&amp;quot;).dataUsingEncoding(NSUTF8StringEncoding)

NSURLConnection.sendAsynchronousRequest(req, queue: NSOperationQueue()){

    (resp:NSURLResponse?, data:NSData?, error:NSError?) -&amp;gt; Void in

    if let d = data {
        dispatch_sync(dispatch_get_main_queue(), {
            self.tvOut.text = NSString(data: d, encoding: NSUTF8StringEncoding)! as String
        })}
    }
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;URL-path&quot;&gt;&lt;a href=&quot;#URL-path&quot; class=&quot;headerlink&quot; title=&quot;URL path&quot;&gt;&lt;/a&gt;URL path&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let httpPath = NSURL(string:&amp;quot;http
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_web" scheme="http://jackliu17.github.io/tags/iOS-web/"/>
    
  </entry>
  
  <entry>
    <title>iOS数据存储-沙盒数据</title>
    <link href="http://jackliu17.github.io/2016/05/20/iOS%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-%E6%B2%99%E7%9B%92%E6%95%B0%E6%8D%AE/"/>
    <id>http://jackliu17.github.io/2016/05/20/iOS数据存储-沙盒数据/</id>
    <published>2016-05-20T07:04:03.000Z</published>
    <updated>2016-05-20T07:04:58.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Sandbox-path&quot;&gt;&lt;a href=&quot;#Sandbox-path&quot; class=&quot;headerlink&quot; title=&quot;Sandbox path&quot;&gt;&lt;/a&gt;Sandbox path&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;var sp = NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.DocumentDirectory, NSSearchPathDomainMask.AllDomainsMask, true)

if sp.count &amp;gt; 0{
    let url = NSURL(fileURLWithPath: &amp;quot;\(sp[0])/data.txt&amp;quot;)
    print(url)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Write-Data&quot;&gt;&lt;a href=&quot;#Write-Data&quot; class=&quot;headerlink&quot; title=&quot;Write Data&quot;&gt;&lt;/a&gt;Write Data&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let data = NSMutableData()
data.appendData(&amp;quot;Hello Swift\n&amp;quot;.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: true)!)
data.writeToFile(url.path!, atomically: true)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Read-Data-Method-1&quot;&gt;&lt;a href=&quot;#Read-Data-Method-1&quot; class=&quot;headerlink&quot; title=&quot;Read Data - Method 1&quot;&gt;&lt;/a&gt;Read Data - Method 1&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;do {
    let str1 = try NSString (contentsOfURL: url, encoding: NSUTF8StringEncoding)
    print(str1)
}catch{
    print(error)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Read-Data-Method-2&quot;&gt;&lt;a href=&quot;#Read-Data-Method-2&quot; class=&quot;headerlink&quot; title=&quot;Read Data - Method 2&quot;&gt;&lt;/a&gt;Read Data - Method 2&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let data = NSData(contentsOfFile: url.path!)
let str = NSString(data: data!, encoding: NSUTF8StringEncoding)
print(str)
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Sandbox-path&quot;&gt;&lt;a href=&quot;#Sandbox-path&quot; class=&quot;headerlink&quot; title=&quot;Sandbox path&quot;&gt;&lt;/a&gt;Sandbox path&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;var sp = NSSearchPathF
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_dataStorage" scheme="http://jackliu17.github.io/tags/iOS-dataStorage/"/>
    
  </entry>
  
  <entry>
    <title>iOS数据存储-NSUserDefault</title>
    <link href="http://jackliu17.github.io/2016/05/20/iOS%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-NSUserDefault/"/>
    <id>http://jackliu17.github.io/2016/05/20/iOS数据存储-NSUserDefault/</id>
    <published>2016-05-20T06:13:21.000Z</published>
    <updated>2016-05-20T06:15:30.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;读取数据-from-NSUserDeafult&quot;&gt;&lt;a href=&quot;#读取数据-from-NSUserDeafult&quot; class=&quot;headerlink&quot; title=&quot;读取数据 from NSUserDeafult&quot;&gt;&lt;/a&gt;读取数据 from NSUserDeafult&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;var ud:NSUserDefaults!

ud = NSUserDefaults.standardUserDefaults()

    if let value: AnyObject = ud.objectForKey(&amp;quot;data&amp;quot;){

        inputTxt.text = value as! String

    }else{

        inputTxt.text = &amp;quot;No value&amp;quot;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;保存数据-to-NSUserDefaults&quot;&gt;&lt;a href=&quot;#保存数据-to-NSUserDefaults&quot; class=&quot;headerlink&quot; title=&quot;保存数据 to NSUserDefaults&quot;&gt;&lt;/a&gt;保存数据 to NSUserDefaults&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;ud.setObject(inputTxt.text, forKey: &amp;quot;data&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;AnyObject&quot;&gt;&lt;a href=&quot;#AnyObject&quot; class=&quot;headerlink&quot; title=&quot;AnyObject ?&quot;&gt;&lt;/a&gt;AnyObject ?&lt;/h1&gt;&lt;p&gt;如果发现返回值有问号 AnyObject?，有可能为空。最好先做如下判断&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if let value: AnyObject = ud.objectForKey(&amp;quot;data&amp;quot;){

    inputTxt.text = value as! String

}else{

    inputTxt.text = &amp;quot;No value&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;ShowTips-proj&quot;&gt;&lt;a href=&quot;#ShowTips-proj&quot; class=&quot;headerlink&quot; title=&quot;ShowTips proj&quot;&gt;&lt;/a&gt;ShowTips proj&lt;/h1&gt;&lt;h2 id=&quot;Global-setting&quot;&gt;&lt;a href=&quot;#Global-setting&quot; class=&quot;headerlink&quot; title=&quot;Global setting&quot;&gt;&lt;/a&gt;Global setting&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var ud:NSUserDefaults!
ud = NSUserDefaults.standardUserDefaults()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Get-data&quot;&gt;&lt;a href=&quot;#Get-data&quot; class=&quot;headerlink&quot; title=&quot;Get data&quot;&gt;&lt;/a&gt;Get data&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;mySwitch.on = ud.boolForKey(&amp;quot;showTips&amp;quot;)

if mySwitch.on{
    UIAlertView(title: &amp;quot;提示&amp;quot;, message: &amp;quot;今天要下雨，出门要带雨具哦！&amp;quot;, delegate: nil, cancelButtonTitle: &amp;quot;好的&amp;quot;).show()
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Save-data&quot;&gt;&lt;a href=&quot;#Save-data&quot; class=&quot;headerlink&quot; title=&quot;Save data&quot;&gt;&lt;/a&gt;Save data&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;ud.setBool(mySwitch.on, forKey: &amp;quot;showTips&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;读取数据-from-NSUserDeafult&quot;&gt;&lt;a href=&quot;#读取数据-from-NSUserDeafult&quot; class=&quot;headerlink&quot; title=&quot;读取数据 from NSUserDeafult&quot;&gt;&lt;/a&gt;读取数据 from NSUserD
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_dataStorage" scheme="http://jackliu17.github.io/tags/iOS-dataStorage/"/>
    
  </entry>
  
  <entry>
    <title>iOS数据存储-XML</title>
    <link href="http://jackliu17.github.io/2016/05/20/iOS%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-XML/"/>
    <id>http://jackliu17.github.io/2016/05/20/iOS数据存储-XML/</id>
    <published>2016-05-20T02:45:50.000Z</published>
    <updated>2016-05-20T02:48:14.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Start-parse-XML&quot;&gt;&lt;a href=&quot;#Start-parse-XML&quot; class=&quot;headerlink&quot; title=&quot;Start parse XML&quot;&gt;&lt;/a&gt;Start parse XML&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注意要遵循协议NSXMLParserDelegate&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class ViewController: UIViewController,NSXMLParserDelegate {

    override func viewDidLoad() {
        super.viewDidLoad()

        let filePath = NSBundle.mainBundle().pathForResource(&amp;quot;data&amp;quot;, ofType: &amp;quot;xml&amp;quot;)!
        let fileUrl = NSURL(fileURLWithPath: filePath )
        let parser = NSXMLParser(contentsOfURL:fileUrl)

        parser!.delegate = self
        parser!.parse()

    }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Parse-to-get-node-and-attribute&quot;&gt;&lt;a href=&quot;#Parse-to-get-node-and-attribute&quot; class=&quot;headerlink&quot; title=&quot;Parse to get node and attribute&quot;&gt;&lt;/a&gt;Parse to get node and attribute&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;var currentNodeName:String!

func parser(parser: NSXMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [String : String]) {      
    currentNodeName = elementName
    if elementName == &amp;quot;person&amp;quot; { 
        //需要判断，如果是空值的话，也不会报错
        if let age: AnyObject=attributeDict[&amp;quot;age&amp;quot;]{
            print(&amp;quot;age:\(age)&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Parse-to-get-Value-in-node&quot;&gt;&lt;a href=&quot;#Parse-to-get-Value-in-node&quot; class=&quot;headerlink&quot; title=&quot;Parse to get Value in node&quot;&gt;&lt;/a&gt;Parse to get Value in node&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;//获得节点的实际内容
func parser(parser: NSXMLParser, foundCharacters string: String) {

    let str = string.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())

    if str != &amp;quot;&amp;quot;{

        print(&amp;quot;current node : \(currentNodeName), value: \(str)&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;剔除空格的字符串&quot;&gt;&lt;a href=&quot;#剔除空格的字符串&quot; class=&quot;headerlink&quot; title=&quot;剔除空格的字符串&quot;&gt;&lt;/a&gt;剔除空格的字符串&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let str = string.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;判断不为空&quot;&gt;&lt;a href=&quot;#判断不为空&quot; class=&quot;headerlink&quot; title=&quot;判断不为空&quot;&gt;&lt;/a&gt;判断不为空&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;if str != &amp;quot;&amp;quot;{
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Question-Project&quot;&gt;&lt;a href=&quot;#Question-Project&quot; class=&quot;headerlink&quot; title=&quot;Question Project&quot;&gt;&lt;/a&gt;Question Project&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_dataStorageXmlProj.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Qustion-Model&quot;&gt;&lt;a href=&quot;#Qustion-Model&quot; class=&quot;headerlink&quot; title=&quot;Qustion Model&quot;&gt;&lt;/a&gt;Qustion Model&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Question: NSObject {

var question:String!
var right:String!
var anwserA:String!
var anwserB:String!
var anwserC:String!
var anwserD:String!
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Parse-all-node-automatically-without-loop&quot;&gt;&lt;a href=&quot;#Parse-all-node-automatically-without-loop&quot; class=&quot;headerlink&quot; title=&quot;Parse all node automatically without loop&quot;&gt;&lt;/a&gt;Parse all node automatically without loop&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var questions:Array&amp;lt;Question&amp;gt; = []    
var currentQuestion:Question!

func parser(parser: NSXMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [String : String]) {

    if elementName == &amp;quot;question&amp;quot; {

        currentQuestion = Question()
        questions.append(currentQuestion)
        currentQuestion.question = attributeDict[&amp;quot;text&amp;quot;]! as String
        currentQuestion.right = attributeDict[&amp;quot;right&amp;quot;]! as String

    } else if elementName == &amp;quot;anwser&amp;quot; {

        let tag = attributeDict[&amp;quot;tag&amp;quot;]! as String

        if tag == &amp;quot;A&amp;quot;{
            currentQuestion.anwserA = attributeDict[&amp;quot;text&amp;quot;]! as String
        }else if tag == &amp;quot;B&amp;quot;{
            currentQuestion.anwserB = attributeDict[&amp;quot;text&amp;quot;]! as String
        }else if tag == &amp;quot;C&amp;quot;{
            currentQuestion.anwserC = attributeDict[&amp;quot;text&amp;quot;]! as String
        }else if tag == &amp;quot;D&amp;quot;{
            currentQuestion.anwserD = attributeDict[&amp;quot;text&amp;quot;]! as String
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;After-Parse-finish&quot;&gt;&lt;a href=&quot;#After-Parse-finish&quot; class=&quot;headerlink&quot; title=&quot;After Parse finish&quot;&gt;&lt;/a&gt;After Parse finish&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func parserDidEndDocument(parser: NSXMLParser) {
...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Add-new-element-to-Array&quot;&gt;&lt;a href=&quot;#Add-new-element-to-Array&quot; class=&quot;headerlink&quot; title=&quot;Add new element to Array&quot;&gt;&lt;/a&gt;Add new element to Array&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;questions.append(currentQuestion)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Judge-if-equal-or-not&quot;&gt;&lt;a href=&quot;#Judge-if-equal-or-not&quot; class=&quot;headerlink&quot; title=&quot;Judge if equal or not&quot;&gt;&lt;/a&gt;Judge if equal or not&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;if tag == &amp;quot;A&amp;quot;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Start-parse-XML&quot;&gt;&lt;a href=&quot;#Start-parse-XML&quot; class=&quot;headerlink&quot; title=&quot;Start parse XML&quot;&gt;&lt;/a&gt;Start parse XML&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注意要遵循协议NSX
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_dataStorage" scheme="http://jackliu17.github.io/tags/iOS-dataStorage/"/>
    
  </entry>
  
  <entry>
    <title>iOS数据存储-JSON</title>
    <link href="http://jackliu17.github.io/2016/05/19/iOS%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-JSON/"/>
    <id>http://jackliu17.github.io/2016/05/19/iOS数据存储-JSON/</id>
    <published>2016-05-19T06:44:42.000Z</published>
    <updated>2016-05-19T06:47:08.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;读取JSON文件&quot;&gt;&lt;a href=&quot;#读取JSON文件&quot; class=&quot;headerlink&quot; title=&quot;读取JSON文件&quot;&gt;&lt;/a&gt;读取JSON文件&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let filePath: NSString = NSBundle.mainBundle().pathForResource(&amp;quot;obj&amp;quot;, ofType: &amp;quot;json&amp;quot;)!
let jsonUrl = NSURL(fileURLWithPath: filePath as String)
let jsonData = NSData(contentsOfURL: jsonUrl)

do{       
let json = try NSJSONSerialization.JSONObjectWithData(jsonData!, options: NSJSONReadingOptions())
let lang:AnyObject = json.objectForKey(&amp;quot;language&amp;quot;)!
print(lang)           
}catch{
print(error)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;生成JSON数据&quot;&gt;&lt;a href=&quot;#生成JSON数据&quot; class=&quot;headerlink&quot; title=&quot;生成JSON数据&quot;&gt;&lt;/a&gt;生成JSON数据&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let dict = [&amp;quot;name&amp;quot;:&amp;quot;jikexueyuan&amp;quot;,&amp;quot;age&amp;quot;:1]
do{
    let jsonData = try NSJSONSerialization.dataWithJSONObject(dict, options: NSJSONWritingOptions())
    let str = NSString(data: jsonData, encoding: NSUTF8StringEncoding)!
    print(str)
}catch{
    print(error)
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;读取JSON文件&quot;&gt;&lt;a href=&quot;#读取JSON文件&quot; class=&quot;headerlink&quot; title=&quot;读取JSON文件&quot;&gt;&lt;/a&gt;读取JSON文件&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let filePath: NSString = NSBundle.main
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_dataStorage" scheme="http://jackliu17.github.io/tags/iOS-dataStorage/"/>
    
  </entry>
  
  <entry>
    <title>iOS数据存储-CoreData</title>
    <link href="http://jackliu17.github.io/2016/05/19/iOS%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-CoreData/"/>
    <id>http://jackliu17.github.io/2016/05/19/iOS数据存储-CoreData/</id>
    <published>2016-05-19T02:51:09.000Z</published>
    <updated>2016-05-19T02:56:52.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;保存数据&quot;&gt;&lt;a href=&quot;#保存数据&quot; class=&quot;headerlink&quot; title=&quot;保存数据&quot;&gt;&lt;/a&gt;保存数据&lt;/h1&gt;&lt;h2 id=&quot;新建Entity&quot;&gt;&lt;a href=&quot;#新建Entity&quot; class=&quot;headerlink&quot; title=&quot;新建Entity&quot;&gt;&lt;/a&gt;新建Entity&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_dataStorageCoreData1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;import UIKit
import CoreData

class ViewController: UIViewController {

override func viewDidLoad(){
    super.viewDidLoad()

    let context = (UIApplication.sharedApplication()
        .delegate as! AppDelegate)
        .managedObjectContext


    let row:AnyObject = NSEntityDescription.insertNewObjectForEntityForName(&amp;quot;Users&amp;quot;, inManagedObjectContext: context)

    row.setValue(&amp;quot;jikexueyuan&amp;quot;, forKey: &amp;quot;name&amp;quot;)
    row.setValue(1, forKey: &amp;quot;age&amp;quot;)

    do{
     try context.save()
    }catch{
    print(error)
    }

}
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;注意要导入CoreData&lt;/li&gt;
&lt;li&gt;这样赋值只能是单个数据，如果要添加多条数据，需要循环&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;打印数据文件路径&quot;&gt;&lt;a href=&quot;#打印数据文件路径&quot; class=&quot;headerlink&quot; title=&quot;打印数据文件路径&quot;&gt;&lt;/a&gt;打印数据文件路径&lt;/h2&gt;&lt;p&gt;AppDelegate&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lazy var persistentStoreCoordinator: NSPersistentStoreCoordinator = {

    let coordinator = NSPersistentStoreCoordinator(managedObjectModel: self.managedObjectModel)
    let url = self.applicationDocumentsDirectory.URLByAppendingPathComponent(&amp;quot;SingleViewCoreData.sqlite&amp;quot;)
    print(url)
    ......

//Result
file:///Users/jackliu/Library/Developer/CoreSimulator/Devices/A2C2C116-004D-4A10-95F0-654B4D89D1EB/data/Containers
/Data/Application/F3D3A90B-A29D-42C9-A699-3FC44EF0D2CA/Documents/
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Application-Sqlitebrowser&quot;&gt;&lt;a href=&quot;#Application-Sqlitebrowser&quot; class=&quot;headerlink&quot; title=&quot;Application Sqlitebrowser&quot;&gt;&lt;/a&gt;Application Sqlitebrowser&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_dataStorageCoreData2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;读取数据&quot;&gt;&lt;a href=&quot;#读取数据&quot; class=&quot;headerlink&quot; title=&quot;读取数据&quot;&gt;&lt;/a&gt;读取数据&lt;/h1&gt;&lt;h2 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;import UIKit
import CoreData

class UsersTableViewController: UITableViewController {

    var dataArr:Array&amp;lt;AnyObject&amp;gt; = []
    var context:NSManagedObjectContext!

override func viewDidLoad() {
        super.viewDidLoad()

    context = (UIApplication.sharedApplication()
                .delegate as! AppDelegate)
                .managedObjectContext

            refreshData()
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;从sqlite数据库中读取&quot;&gt;&lt;a href=&quot;#从sqlite数据库中读取&quot; class=&quot;headerlink&quot; title=&quot;从sqlite数据库中读取&quot;&gt;&lt;/a&gt;从sqlite数据库中读取&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func refreshData(){ 

let f = NSFetchRequest(entityName: &amp;quot;Users&amp;quot;)

do{
try dataArr = context.executeFetchRequest(f)
}catch{
print(error)
}
tableView.reloadData()
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;KV取值配置Cell&quot;&gt;&lt;a href=&quot;#KV取值配置Cell&quot; class=&quot;headerlink&quot; title=&quot;KV取值配置Cell&quot;&gt;&lt;/a&gt;KV取值配置Cell&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;override func tableView(tableView: UITableView,cellForRowAtIndexPath indexPath: NSIndexPath) -&amp;gt; UITableViewCell {

    let cell = tableView.dequeueReusableCellWithIdentifier(&amp;quot;cell&amp;quot;, forIndexPath: indexPath)as UITableViewCell

    let label = cell.viewWithTag(2) as! UILabel

    let name: AnyObject! = dataArr[indexPath.row].valueForKey(&amp;quot;name&amp;quot;)
    let age: AnyObject! = dataArr[indexPath.row].valueForKey(&amp;quot;age&amp;quot;)

    label.text =  &amp;quot;name:\(name),age:\(age)&amp;quot;
    return cell
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;viewWithTag&quot;&gt;&lt;a href=&quot;#viewWithTag&quot; class=&quot;headerlink&quot; title=&quot;viewWithTag( )&quot;&gt;&lt;/a&gt;viewWithTag( )&lt;/h2&gt;&lt;p&gt;通过标签找到子视图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let label = cell.viewWithTag(2) as! UILabel
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;点击Cell跳转视图&quot;&gt;&lt;a href=&quot;#点击Cell跳转视图&quot; class=&quot;headerlink&quot; title=&quot;点击Cell跳转视图&quot;&gt;&lt;/a&gt;点击Cell跳转视图&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;override func tableView(tableView: UITableView,didSelectRowAtIndexPath indexPath: NSIndexPath) {

    let data = dataArr[indexPath.row] as! NSManagedObject

    let vc = storyboard!.instantiateViewControllerWithIdentifier(&amp;quot;UserContent&amp;quot;)as! UserContentViewController

    vc.data = data

    presentViewController(vc, animated: true, completion: nil)

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;视图跳转-StoryboardId&quot;&gt;&lt;a href=&quot;#视图跳转-StoryboardId&quot; class=&quot;headerlink&quot; title=&quot;视图跳转 - StoryboardId&quot;&gt;&lt;/a&gt;视图跳转 - StoryboardId&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let vc = storyboard!.instantiateViewControllerWithIdentifier(&amp;quot;UserContent&amp;quot;)as! UserContentViewController

vc.data = data

presentViewController(vc, animated: true, completion: nil)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_dataStorageCoredata03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;返回到tableView视图时&quot;&gt;&lt;a href=&quot;#返回到tableView视图时&quot; class=&quot;headerlink&quot; title=&quot;返回到tableView视图时&quot;&gt;&lt;/a&gt;返回到tableView视图时&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;override func viewWillAppear(animated: Bool) {
    refreshData()
}

func refreshData(){ 

let f = NSFetchRequest(entityName: &amp;quot;Users&amp;quot;)

do{
try dataArr = context.executeFetchRequest(f)
}catch{
print(error)
}
tableView.reloadData()
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;删除数据&quot;&gt;&lt;a href=&quot;#删除数据&quot; class=&quot;headerlink&quot; title=&quot;删除数据&quot;&gt;&lt;/a&gt;删除数据&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;override func tableView(tableView: UITableView,canEditRowAtIndexPath indexPath: NSIndexPath) -&amp;gt; Bool {

    return true
}


override func tableView(tableView: UITableView,commitEditingStyle editingStyle: UITableViewCellEditingStyle,forRowAtIndexPath indexPath: NSIndexPath) {
    if editingStyle == .Delete {

        //从数据库删除
        context.deleteObject(dataArr[indexPath.row] as! NSManagedObject)

        //存档
        do {
          try context.save()
        } catch _ {
        }

        //刷新
        refreshData()

    } else if editingStyle == .Insert {

    }    
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;接收到传递过来的CoreData数据&quot;&gt;&lt;a href=&quot;#接收到传递过来的CoreData数据&quot; class=&quot;headerlink&quot; title=&quot;接收到传递过来的CoreData数据&quot;&gt;&lt;/a&gt;接收到传递过来的CoreData数据&lt;/h1&gt;&lt;p&gt;UserContentViewController&lt;/p&gt;
&lt;h2 id=&quot;取值&quot;&gt;&lt;a href=&quot;#取值&quot; class=&quot;headerlink&quot; title=&quot;取值&quot;&gt;&lt;/a&gt;取值&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var data:NSManagedObject!

tfName.text = data.valueForKey(&amp;quot;name&amp;quot;) as? String        
let age: AnyObject! = data.valueForKey(&amp;quot;age&amp;quot;)
tfAge.text = &amp;quot;\(age)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;赋值存档&quot;&gt;&lt;a href=&quot;#赋值存档&quot; class=&quot;headerlink&quot; title=&quot;赋值存档&quot;&gt;&lt;/a&gt;赋值存档&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;data.setValue(tfName.text, forKey: &amp;quot;name&amp;quot;)
data.setValue(Int(tfAge.text!), forKey: &amp;quot;age&amp;quot;)

do{
    try data.managedObjectContext!.save()
}catch{
    print(error)
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;保存数据&quot;&gt;&lt;a href=&quot;#保存数据&quot; class=&quot;headerlink&quot; title=&quot;保存数据&quot;&gt;&lt;/a&gt;保存数据&lt;/h1&gt;&lt;h2 id=&quot;新建Entity&quot;&gt;&lt;a href=&quot;#新建Entity&quot; class=&quot;headerlink&quot; title=&quot;新
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_dataStorage" scheme="http://jackliu17.github.io/tags/iOS-dataStorage/"/>
    
  </entry>
  
  <entry>
    <title>iOS数据存储-plist文件</title>
    <link href="http://jackliu17.github.io/2016/05/18/iOS%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-plist%E6%96%87%E4%BB%B6/"/>
    <id>http://jackliu17.github.io/2016/05/18/iOS数据存储-plist文件/</id>
    <published>2016-05-18T02:39:46.000Z</published>
    <updated>2016-05-18T02:42:00.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;读取数组&quot;&gt;&lt;a href=&quot;#读取数组&quot; class=&quot;headerlink&quot; title=&quot;读取数组&quot;&gt;&lt;/a&gt;读取数组&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let arr = NSArray(contentsOfURL: NSURL(fileURLWithPath: NSBundle.mainBundle().pathForResource(&amp;quot;arr&amp;quot;, ofType: &amp;quot;plist&amp;quot;)!))
print(arr)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;读取字典&quot;&gt;&lt;a href=&quot;#读取字典&quot; class=&quot;headerlink&quot; title=&quot;读取字典&quot;&gt;&lt;/a&gt;读取字典&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let dict = NSDictionary(contentsOfURL: NSURL(fileURLWithPath: NSBundle.mainBundle().pathForResource(&amp;quot;data&amp;quot;, ofType: &amp;quot;plist&amp;quot;)!))
print(dict)

let name:String = dict![&amp;quot;name&amp;quot;] as! String
print(&amp;quot;name : \(name)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;读取数组&quot;&gt;&lt;a href=&quot;#读取数组&quot; class=&quot;headerlink&quot; title=&quot;读取数组&quot;&gt;&lt;/a&gt;读取数组&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;let arr = NSArray(contentsOfURL: NSURL(fileURLWithPath
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_dataStorage" scheme="http://jackliu17.github.io/tags/iOS-dataStorage/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目017.转盘抽奖</title>
    <link href="http://jackliu17.github.io/2016/05/17/iOS%E9%A1%B9%E7%9B%AE017-%E8%BD%AC%E7%9B%98%E6%8A%BD%E5%A5%96/"/>
    <id>http://jackliu17.github.io/2016/05/17/iOS项目017-转盘抽奖/</id>
    <published>2016-05-17T06:18:42.000Z</published>
    <updated>2016-05-17T06:57:42.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj01701.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;项目结构&quot;&gt;&lt;a href=&quot;#项目结构&quot; class=&quot;headerlink&quot; title=&quot;项目结构&quot;&gt;&lt;/a&gt;项目结构&lt;/h1&gt;&lt;h1 id=&quot;匿名类目-vs-IBOutlet&quot;&gt;&lt;a href=&quot;#匿名类目-vs-IBOutlet&quot; class=&quot;headerlink&quot; title=&quot;匿名类目 vs IBOutlet&quot;&gt;&lt;/a&gt;匿名类目 vs IBOutlet&lt;/h1&gt;&lt;p&gt;只有在.m文件中建立了匿名类目，才能连接storyBoard中的IBOutlet&lt;/p&gt;
&lt;p&gt;view.m&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface WheelView ()
@property (weak, nonatomic) IBOutlet UIImageView *centerView;
@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;加载xib文件&quot;&gt;&lt;a href=&quot;#加载xib文件&quot; class=&quot;headerlink&quot; title=&quot;加载xib文件&quot;&gt;&lt;/a&gt;加载xib文件&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;+ (instancetype)wheelView{
return [[[NSBundle mainBundle] loadNibNamed:@&amp;quot;WheelView&amp;quot; owner:nil options:nil] lastObject];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;裁剪图片&quot;&gt;&lt;a href=&quot;#裁剪图片&quot; class=&quot;headerlink&quot; title=&quot;裁剪图片&quot;&gt;&lt;/a&gt;裁剪图片&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;UIImage *img = [UIImage imageNamed:@&amp;quot;LuckyAstrology&amp;quot;];
CGFloat smallW = img.size.width / 12 * [UIScreen mainScreen].scale;
CGFloat smallH = img.size.height * [UIScreen mainScreen].scale; 
CGRect smallRect = CGRectMake(index * smallW, 0, smallW, smallH);
CGImageRef smallImage = CGImageCreateWithImageInRect(img.CGImage, smallRect);
[btn setImage:[UIImage imageWithCGImage:smallImage] forState:UIControlStateNormal];
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj01701.png&quot;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_animation" scheme="http://jackliu17.github.io/tags/iOS-animation/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目018.CAAnimation简介</title>
    <link href="http://jackliu17.github.io/2016/05/17/iOS%E9%A1%B9%E7%9B%AE018-CAAnimation%E7%AE%80%E4%BB%8B/"/>
    <id>http://jackliu17.github.io/2016/05/17/iOS项目018-CAAnimation简介/</id>
    <published>2016-05-17T00:40:57.000Z</published>
    <updated>2016-05-17T03:30:37.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;CAAnimation&quot;&gt;&lt;a href=&quot;#CAAnimation&quot; class=&quot;headerlink&quot; title=&quot;CAAnimation&quot;&gt;&lt;/a&gt;CAAnimation&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;基础动画 CABasicAnimation&lt;/li&gt;
&lt;li&gt;关键帧动画CAKeyframeAnimation&lt;/li&gt;
&lt;li&gt;转场动画 CATransition&lt;/li&gt;
&lt;li&gt;动画组 CAAnimationGroup&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上基础动画和关键帧动画是隐式动画，比如bound值是animable的&lt;/p&gt;
&lt;h1 id=&quot;CABasicAnimation&quot;&gt;&lt;a href=&quot;#CABasicAnimation&quot; class=&quot;headerlink&quot; title=&quot;CABasicAnimation&quot;&gt;&lt;/a&gt;CABasicAnimation&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj01801.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;viewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@property (nonatomic, strong) CALayer *layer;

- (void)viewDidLoad {
[super viewDidLoad];

CALayer *layer =[CALayer layer];
layer.bounds = CGRectMake(0, 0, 100, 100);
layer.position = CGPointMake(100,100);
layer.backgroundColor = [UIColor yellowColor].CGColor;
[self.view.layer addSublayer:layer];
self.layer = layer;  

}

-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event{
//[self animationScale];
//[self animationRotation];
//[self animationTranslate];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;keyPath-toValue-fromValue-byValue&quot;&gt;&lt;a href=&quot;#keyPath-toValue-fromValue-byValue&quot; class=&quot;headerlink&quot; title=&quot;keyPath, toValue, fromValue, byValue&quot;&gt;&lt;/a&gt;keyPath, toValue, fromValue, byValue&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;keyPath  决定了执行怎样的动画&lt;/li&gt;
&lt;li&gt;toValue 到达哪个点&lt;/li&gt;
&lt;li&gt;byValue 是增加多少值&lt;/li&gt;
&lt;li&gt;fromValue 从哪个点开始移动&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;缩放&quot;&gt;&lt;a href=&quot;#缩放&quot; class=&quot;headerlink&quot; title=&quot;缩放&quot;&gt;&lt;/a&gt;缩放&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;- (void)animationScale{

CABasicAnimation *animation = [CABasicAnimation animation];

animation.keyPath = @&amp;quot;bounds&amp;quot;;
animation.toValue = [NSValue valueWithCGRect:CGRectMake(0, 0, 50, 50)];

animation.duration = 2;
animation.removedOnCompletion = NO;
animation.fillMode = @&amp;quot;forwards&amp;quot;;

[self.layer addAnimation:animation forKey:nil];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;平移&quot;&gt;&lt;a href=&quot;#平移&quot; class=&quot;headerlink&quot; title=&quot;平移&quot;&gt;&lt;/a&gt;平移&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//toValue是到达哪个点
animation.keyPath = @&amp;quot;position&amp;quot;;
animation.toValue = [NSValue valueWithCGPoint:CGPointMake(200, 200)];

//byValue是xy轴分别增加多少
animation.keyPath = @&amp;quot;position&amp;quot;;
animation.byValue = [NSValue valueWithCGPoint:CGPointMake(200, 200)];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;旋转&quot;&gt;&lt;a href=&quot;#旋转&quot; class=&quot;headerlink&quot; title=&quot;旋转&quot;&gt;&lt;/a&gt;旋转&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;animation.keyPath = @&amp;quot;transform&amp;quot;;
animation.toValue = [NSValue valueWithCATransform3D:CATransform3DMakeRotation(M_PI_4, 1, 1, 0)];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;CAKeyframeAnimation&quot;&gt;&lt;a href=&quot;#CAKeyframeAnimation&quot; class=&quot;headerlink&quot; title=&quot;CAKeyframeAnimation&quot;&gt;&lt;/a&gt;CAKeyframeAnimation&lt;/h1&gt;&lt;p&gt;效果：方块绕椭圆轨迹运动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)keyAnimation{
CAKeyframeAnimation *anim = [CAKeyframeAnimation animation];

//这些是和CABasicAnimation一样的
anim.keyPath = @&amp;quot;position&amp;quot;;
anim.removedOnCompletion = NO;
anim.fillMode = kCAFillModeForwards;
anim.duration = 2.0;

//设置动画的路径
CGMutablePathRef path = CGPathCreateMutable();
CGPathAddEllipseInRect(path, NULL, CGRectMake(100, 100, 200, 200));
anim.path = path;
CGPathRelease(path);

// 设置动画的执行节奏
// kCAMediaTimingFunctionEaseInEaseOut : 一开始比较慢, 中间会加速,  临近结束的时候, 会变慢
anim.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];

//可以执行代理方法
anim.delegate = self;

[self.layer addAnimation:anim forKey:nil];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;CATransition&quot;&gt;&lt;a href=&quot;#CATransition&quot; class=&quot;headerlink&quot; title=&quot;CATransition&quot;&gt;&lt;/a&gt;CATransition&lt;/h1&gt;&lt;h2 id=&quot;导航视图切换&quot;&gt;&lt;a href=&quot;#导航视图切换&quot; class=&quot;headerlink&quot; title=&quot;导航视图切换&quot;&gt;&lt;/a&gt;导航视图切换&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;-(IBAction)pushAction{

CATransition *transition = [CATransition animation];
transition.duration = 1;
transition.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];

//私有API
//transition.type = @&amp;quot;pageCurl&amp;quot;;
transition.type = @&amp;quot;cube&amp;quot;;//立体动画效果

[self.navigationController.view.layer addAnimation:transition forKey:@&amp;quot;navAnimation&amp;quot;];
DetailViewController *detailVC = [[DetailViewController alloc]init];
[self.navigationController showViewController:detailVC sender:nil];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;View切换&quot;&gt;&lt;a href=&quot;#View切换&quot; class=&quot;headerlink&quot; title=&quot;View切换&quot;&gt;&lt;/a&gt;View切换&lt;/h2&gt;&lt;p&gt;这里的animaView是UIViewController  —&amp;gt; view 里的subView&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-(IBAction)exchangeView{
CATransition *transition = [CATransition animation];
transition.duration = 1;
transition.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];

//私有API
//transition.type = @&amp;quot;pageCurl&amp;quot;;
transition.type = @&amp;quot;fade&amp;quot;;
transition.subtype = kCATransitionFromRight;

//设置具体动画
[_animaView exchangeSubviewAtIndex:0 withSubviewAtIndex:1];
[_animaView.layer addAnimation:transition forKey:@&amp;quot;myAnimation&amp;quot;];

}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CAAnimation&quot;&gt;&lt;a href=&quot;#CAAnimation&quot; class=&quot;headerlink&quot; title=&quot;CAAnimation&quot;&gt;&lt;/a&gt;CAAnimation&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;基础动画 CABasicAnimation&lt;/li&gt;
&lt;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_animation" scheme="http://jackliu17.github.io/tags/iOS-animation/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目015.CALayer简介</title>
    <link href="http://jackliu17.github.io/2016/05/17/iOS%E9%A1%B9%E7%9B%AE015-CALayer%E7%AE%80%E4%BB%8B/"/>
    <id>http://jackliu17.github.io/2016/05/17/iOS项目015-CALayer简介/</id>
    <published>2016-05-17T00:35:01.000Z</published>
    <updated>2016-05-17T00:37:36.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Set-UIImageView-CALayer&quot;&gt;&lt;a href=&quot;#Set-UIImageView-CALayer&quot; class=&quot;headerlink&quot; title=&quot;Set UIImageView CALayer&quot;&gt;&lt;/a&gt;Set UIImageView CALayer&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- (void)initImgView{
UIImageView *imgView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&amp;quot;1.jpg&amp;quot;]];
imgView.frame = CGRectMake((kScreenWidth - 200)/2, (kScreenHeight - 200)/2, 200, 200);
[self.view addSubview:imgView];
.............
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;图像的CALayer层-阴影&quot;&gt;&lt;a href=&quot;#图像的CALayer层-阴影&quot; class=&quot;headerlink&quot; title=&quot;图像的CALayer层 - 阴影&quot;&gt;&lt;/a&gt;图像的CALayer层 - 阴影&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015sShadow.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//1.设置阴影
imgView.layer.shadowColor = [UIColor yellowColor].CGColor;
//2.阴影的偏移大小
imgView.layer.shadowOffset = CGSizeMake(10, 10);
//3.阴影的不透明度
imgView.layer.shadowOpacity = 0.5;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;图像的CALayer层-圆角&quot;&gt;&lt;a href=&quot;#图像的CALayer层-圆角&quot; class=&quot;headerlink&quot; title=&quot;图像的CALayer层 - 圆角&quot;&gt;&lt;/a&gt;图像的CALayer层 - 圆角&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015Round.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//4.设置圆角大小
imgView.layer.cornerRadius = 10;//设置圆角半径为10
imgView.layer.masksToBounds = YES;//强制内部的所有子层支持圆角效果，少了这个设置，UIImageView是不会有圆角效果的。设置之后，没有阴影效果
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;图像的CALayer层-边框&quot;&gt;&lt;a href=&quot;#图像的CALayer层-边框&quot; class=&quot;headerlink&quot; title=&quot;图像的CALayer层 - 边框&quot;&gt;&lt;/a&gt;图像的CALayer层 - 边框&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015Frame.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//5.设置边框
imgView.layer.borderWidth = 5;
imgView.layer.borderColor = [UIColor grayColor].CGColor;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;图像的CALayer层-3D旋转&quot;&gt;&lt;a href=&quot;#图像的CALayer层-3D旋转&quot; class=&quot;headerlink&quot; title=&quot;图像的CALayer层 - 3D旋转&quot;&gt;&lt;/a&gt;图像的CALayer层 - 3D旋转&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015Rotate.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//6.设置旋转 :利用transform属性可以设置旋转
//imgView.layer.transform = CATransform3DMakeRotation(M_PI_4, 1, 1, 0);//顺时针旋转45°,在x，y轴
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;图像的CALayer层-缩放&quot;&gt;&lt;a href=&quot;#图像的CALayer层-缩放&quot; class=&quot;headerlink&quot; title=&quot;图像的CALayer层 - 缩放&quot;&gt;&lt;/a&gt;图像的CALayer层 - 缩放&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015Scale.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;6.设置旋转 :利用transform属性可以设置缩放
imgView.layer.transform = CATransform3DMakeScale(0.5, 1, 0);//缩小0.5倍
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Add-CALayer-in-View&quot;&gt;&lt;a href=&quot;#Add-CALayer-in-View&quot; class=&quot;headerlink&quot; title=&quot;Add CALayer in View&quot;&gt;&lt;/a&gt;Add CALayer in View&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015CALayerInView.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;UIView里有CALayer这个图层&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)imageLayer{
CALayer *layer = [CALayer layer];
layer.backgroundColor = [UIColor grayColor].CGColor;
layer.bounds = CGRectMake(0, 0, 100, 100);
layer.position = CGPointMake(200, 200);
layer.anchorPoint = CGPointMake(0, 1);
layer.cornerRadius = 10;
layer.masksToBounds = YES;
layer.contents = (id)[UIImage imageNamed:@&amp;quot;1.jpg&amp;quot;].CGImage;
layer.transform = CATransform3DMakeRotation(M_PI_4, 1, 1, 0);
[self.view.layer addSublayer:layer];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;QuartzCore-for-CALayer&quot;&gt;&lt;a href=&quot;#QuartzCore-for-CALayer&quot; class=&quot;headerlink&quot; title=&quot;QuartzCore for CALayer&quot;&gt;&lt;/a&gt;QuartzCore for CALayer&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//导入框架 
#import &amp;lt;QuartzCore/QuartzCore.h&amp;gt;

CALayer *layer = [CALayer layer];
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Position-vs-anchorPoint&quot;&gt;&lt;a href=&quot;#Position-vs-anchorPoint&quot; class=&quot;headerlink&quot; title=&quot;Position vs anchorPoint&quot;&gt;&lt;/a&gt;Position vs anchorPoint&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;position 设置CALayer在父图层中的位置，以父层的左上角为原点（0，0）&lt;/li&gt;
&lt;li&gt;anchorPoint锚点(定位点)决定CALayer的哪个点在position属性所指的位置,以自己的左上角为原点（0，0），默认值（0.5，0.5），x~y取值是0~1，右下角（1，1）&lt;/li&gt;
&lt;li&gt;即：哪个anchor点在position的位置&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;anchor-point-0-0&quot;&gt;&lt;a href=&quot;#anchor-point-0-0&quot; class=&quot;headerlink&quot; title=&quot;anchor point (0,0)&quot;&gt;&lt;/a&gt;anchor point (0,0)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015Anchor1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;anchor-point-1-1&quot;&gt;&lt;a href=&quot;#anchor-point-1-1&quot; class=&quot;headerlink&quot; title=&quot;anchor point (1,1)&quot;&gt;&lt;/a&gt;anchor point (1,1)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015Anchor2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;anchor-point-0-1&quot;&gt;&lt;a href=&quot;#anchor-point-0-1&quot; class=&quot;headerlink&quot; title=&quot;anchor point (0,1)&quot;&gt;&lt;/a&gt;anchor point (0,1)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015Anchor3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Customized-CALayer&quot;&gt;&lt;a href=&quot;#Customized-CALayer&quot; class=&quot;headerlink&quot; title=&quot;Customized CALayer&quot;&gt;&lt;/a&gt;Customized CALayer&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_proj015CALayerCustomized.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Method-1&quot;&gt;&lt;a href=&quot;#Method-1&quot; class=&quot;headerlink&quot; title=&quot;Method 1.&quot;&gt;&lt;/a&gt;Method 1.&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;子类继承于CALayer，实现 drawInContext&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JKLayer&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;JKLayer.h&amp;quot;

@implementation JKLayer
-(void)drawInContext:(CGContextRef)ctx{
CGContextSetRGBFillColor(ctx, 0, 0, 1, 1);
CGContextAddEllipseInRect(ctx, CGRectMake(10,10, 100, 100));
CGContextFillPath(ctx);
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)initLayer{

JKLayer *layer = [JKLayer layer];
layer.bounds = CGRectMake(0, 0, 300, 300);
layer.anchorPoint = CGPointMake(0,0);
[layer setNeedsDisplay];//必须调用这个方法，layer才会显示
[self.view.layer addSublayer:layer];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Method-2&quot;&gt;&lt;a href=&quot;#Method-2&quot; class=&quot;headerlink&quot; title=&quot;Method 2.&quot;&gt;&lt;/a&gt;Method 2.&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;在控制器中设置代理，实现代理方法来画图层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ViewController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)initLayer{

JKLayer *layer = [JKLayer layer];
layer.bounds = CGRectMake(0, 0, 300, 300);
layer.anchorPoint = CGPointMake(0,0);
layer.delegate = self;//不用协议，任何对象可以作为代理
[layer setNeedsDisplay];//必须调用这个方法，layer才会显示
[self.view.layer addSublayer:layer];

}

#pragma mark 代理方法
-(void)drawLayer:(CALayer *)layer inContext:(CGContextRef)ctx{
CGContextSetRGBFillColor(ctx, 0, 0, 1, 1);
CGContextAddEllipseInRect(ctx, CGRectMake(10,10, 100, 100));
CGContextFillPath(ctx);
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Set-UIImageView-CALayer&quot;&gt;&lt;a href=&quot;#Set-UIImageView-CALayer&quot; class=&quot;headerlink&quot; title=&quot;Set UIImageView CALayer&quot;&gt;&lt;/a&gt;Set UIImageView C
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="iOS_CALayer" scheme="http://jackliu17.github.io/tags/iOS-CALayer/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目011-012.绘制图形及小黄人</title>
    <link href="http://jackliu17.github.io/2016/05/16/iOS%E9%A1%B9%E7%9B%AE011-012-%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2%E5%8F%8A%E5%B0%8F%E9%BB%84%E4%BA%BA/"/>
    <id>http://jackliu17.github.io/2016/05/16/iOS项目011-012-绘制图形及小黄人/</id>
    <published>2016-05-16T06:18:56.000Z</published>
    <updated>2016-05-16T06:23:05.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Quartz-2D&quot;&gt;&lt;a href=&quot;#Quartz-2D&quot; class=&quot;headerlink&quot; title=&quot;Quartz 2D&quot;&gt;&lt;/a&gt;Quartz 2D&lt;/h1&gt;&lt;h2 id=&quot;什么是Quartz-2D&quot;&gt;&lt;a href=&quot;#什么是Quartz-2D&quot; class=&quot;headerlink&quot; title=&quot;什么是Quartz 2D&quot;&gt;&lt;/a&gt;什么是Quartz 2D&lt;/h2&gt;&lt;p&gt;Quartz 2D是一个二维绘图引擎，Quartz 2D的API是C语言，来自于CoreGraphics框架，没有面向对象的思想&lt;/p&gt;
&lt;h2 id=&quot;Quartz-2D作用&quot;&gt;&lt;a href=&quot;#Quartz-2D作用&quot; class=&quot;headerlink&quot; title=&quot;Quartz 2D作用&quot;&gt;&lt;/a&gt;Quartz 2D作用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;作用，绘制图形：线条，三角形，矩形，圆形，弧形&lt;/li&gt;
&lt;li&gt;绘制文字&lt;/li&gt;
&lt;li&gt;绘制生成图像&lt;/li&gt;
&lt;li&gt;读取生成PDF&lt;/li&gt;
&lt;li&gt;截图裁剪图片&lt;/li&gt;
&lt;li&gt;自定义UI控件&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;图形上下文-Graphics-Context&quot;&gt;&lt;a href=&quot;#图形上下文-Graphics-Context&quot; class=&quot;headerlink&quot; title=&quot;图形上下文(Graphics Context)&quot;&gt;&lt;/a&gt;图形上下文(Graphics Context)&lt;/h1&gt;&lt;p&gt;是一个CGContextRef类型的数据.作用:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保存绘图信息，绘图状态&lt;/li&gt;
&lt;li&gt;决定绘制的输出目标，绘制到什么地方去，输出目标可以是PDF文件，Bitmap或者显示器的窗口上&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;什么时候自动调用drawRect&quot;&gt;&lt;a href=&quot;#什么时候自动调用drawRect&quot; class=&quot;headerlink&quot; title=&quot;什么时候自动调用drawRect&quot;&gt;&lt;/a&gt;什么时候自动调用drawRect&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;系统自动调用，视图显示在屏幕上的时候调用且调用一次&lt;/li&gt;
&lt;li&gt;需要更新的时候也会被调用，这时需要使seetNeedsDisplay&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)drawRect:(CGRect)rect &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Drawing code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;直线绘制&quot;&gt;&lt;a href=&quot;#直线绘制&quot; class=&quot;headerlink&quot; title=&quot;直线绘制&quot;&gt;&lt;/a&gt;直线绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawLine.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void drwaline(){

CGContextRef context = UIGraphicsGetCurrentContext();

CGContextSaveGState(context);

//第1条线-----------------------------------------

CGContextSetLineWidth(context, 20);
CGContextSetLineCap(context, kCGLineCapRound);
CGContextSetRGBStrokeColor(context, 1, 0, 0, 1);
CGContextMoveToPoint(context, 10, 10);
CGContextAddLineToPoint(context, 100, 100);
CGContextStrokePath(context);

CGContextRestoreGState(context);

//2条线-------------------------------------------

[[UIColor blueColor] set];
CGContextSetLineJoin(context, kCGLineJoinRound);
CGContextMoveToPoint(context, 100, 120);
CGContextAddLineToPoint(context, 150, 120);
CGContextAddLineToPoint(context, 150, 180);
CGContextStrokePath(context);

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;图像保留栈&quot;&gt;&lt;a href=&quot;#图像保留栈&quot; class=&quot;headerlink&quot; title=&quot;图像保留栈&quot;&gt;&lt;/a&gt;图像保留栈&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//将上下文复制一份放到栈中,防止两个图形互相影响
CGContextSaveGState(context);

....................

//将图形上下文出栈，替换当前的上下文，这样所设置的线条头尾部样式就不会影响到线条2
CGContextRestoreGState(context);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;矩形绘制&quot;&gt;&lt;a href=&quot;#矩形绘制&quot; class=&quot;headerlink&quot; title=&quot;矩形绘制&quot;&gt;&lt;/a&gt;矩形绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawRect2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void drawR(){

CGContextRef context = UIGraphicsGetCurrentContext();
CGContextAddRect(context, CGRectMake(10, 10, 120, 180));
[[UIColor purpleColor] setFill];
CGContextFillPath(context);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;三角形绘制&quot;&gt;&lt;a href=&quot;#三角形绘制&quot; class=&quot;headerlink&quot; title=&quot;三角形绘制&quot;&gt;&lt;/a&gt;三角形绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawTriangle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void drawTriangle(){

CGContextRef context = UIGraphicsGetCurrentContext();
CGContextMoveToPoint(context, 0, 0);
CGContextAddLineToPoint(context, 100, 100);
CGContextAddLineToPoint(context, 150, 100);
CGContextClosePath(context);
[[UIColor redColor] set];
CGContextStrokePath(context);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;圆形-椭圆形绘制&quot;&gt;&lt;a href=&quot;#圆形-椭圆形绘制&quot; class=&quot;headerlink&quot; title=&quot;圆形/椭圆形绘制&quot;&gt;&lt;/a&gt;圆形/椭圆形绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawCircle2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void drawCircle(){
CGContextRef context = UIGraphicsGetCurrentContext();

//绘制图形,宽度高度一样就是圆形，不一样就是椭圆
CGContextAddEllipseInRect(context, CGRectMake(50, 50, 130, 100));
CGContextSetLineWidth(context, 10);

CGContextStrokePath(context);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;弧形绘制&quot;&gt;&lt;a href=&quot;#弧形绘制&quot; class=&quot;headerlink&quot; title=&quot;弧形绘制&quot;&gt;&lt;/a&gt;弧形绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawArc.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CGFloat arc(CGFloat angle){
return angle * (M_PI / 180);
}

void drawArc(){

CGContextRef context = UIGraphicsGetCurrentContext();

//CGContextAddArc 内各个参数的定义
// x\y : 圆心
// radius : 半径
// startAngle : 开始角度
// endAngle : 结束角度
// clockwise : 圆弧的伸展方向(0:顺时针, 1:逆时针)

CGContextAddArc(context, 100, 100, 50, arc(90), arc(200), 1);

//CGContextFillPath(context); 如果采用这个方法就是填充弧形
 CGContextStrokePath(context);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;文字绘制&quot;&gt;&lt;a href=&quot;#文字绘制&quot; class=&quot;headerlink&quot; title=&quot;文字绘制&quot;&gt;&lt;/a&gt;文字绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawString.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void drawText(){
NSString *str = @&amp;quot;天道酬勤&amp;quot;;
NSMutableDictionary *attributes = [NSMutableDictionary dictionary];
attributes[NSFontAttributeName] = [UIFont systemFontOfSize:20];
attributes[NSForegroundColorAttributeName] = [UIColor purpleColor];
[str drawInRect:CGRectMake(100, 100, 100, 30) withAttributes:attributes];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;图像绘制-设置水印&quot;&gt;&lt;a href=&quot;#图像绘制-设置水印&quot; class=&quot;headerlink&quot; title=&quot;图像绘制(设置水印)&quot;&gt;&lt;/a&gt;图像绘制(设置水印)&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawImage2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void drawImg(){

UIImage *img = [UIImage imageNamed:@&amp;quot;1.jpg&amp;quot;];

//[img drawAtPoint:CGPointMake(50, 50)]; 这个方法是在某个点开始绘制
//[img drawInRect:CGRectMake(50, 50, 500, 500)]; 在某个矩形框内绘制

//以下方法规定了图片的宽高，以他来进行填充,可以画出格子图案
[img drawAsPatternInRect:CGRectMake(0, 0, 300, 300)];

NSString *str = @&amp;quot;刘米米爱兔宝宝&amp;quot;;
[str drawInRect:CGRectMake(0, 0, 100, 30) withAttributes:nil];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;JPG-vs-PNG&quot;&gt;&lt;a href=&quot;#JPG-vs-PNG&quot; class=&quot;headerlink&quot; title=&quot;JPG vs PNG&quot;&gt;&lt;/a&gt;JPG vs PNG&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//取得图片,jpg要后缀名，png不用
UIImage *img = [UIImage imageNamed:@&amp;quot;1.jpg&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;贝塞尔曲线绘制&quot;&gt;&lt;a href=&quot;#贝塞尔曲线绘制&quot; class=&quot;headerlink&quot; title=&quot;贝塞尔曲线绘制&quot;&gt;&lt;/a&gt;贝塞尔曲线绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawBezier.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void drawBezier(){

CGContextRef context = UIGraphicsGetCurrentContext();
//起点
CGContextMoveToPoint(context, 10, 10);
//2个控制点 和终点
CGContextAddCurveToPoint(context, 120, 100, 180, 50, 190, 190);
//1个控制点
//CGContextAddQuadCurveToPoint(context, 150, 200, 200, 100);
CGContextStrokePath(context);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;小黄人绘制&quot;&gt;&lt;a href=&quot;#小黄人绘制&quot; class=&quot;headerlink&quot; title=&quot;小黄人绘制&quot;&gt;&lt;/a&gt;小黄人绘制&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/iOS_drawHuman.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;定义常量&quot;&gt;&lt;a href=&quot;#定义常量&quot; class=&quot;headerlink&quot; title=&quot;定义常量&quot;&gt;&lt;/a&gt;定义常量&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#define JKColor(r,g,b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1.0]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;中心的的x坐标&quot;&gt;&lt;a href=&quot;#中心的的x坐标&quot; class=&quot;headerlink&quot; title=&quot;中心的的x坐标&quot;&gt;&lt;/a&gt;中心的的x坐标&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;CGFloat topX = rect.size.width * 0.5;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Quartz-2D&quot;&gt;&lt;a href=&quot;#Quartz-2D&quot; class=&quot;headerlink&quot; title=&quot;Quartz 2D&quot;&gt;&lt;/a&gt;Quartz 2D&lt;/h1&gt;&lt;h2 id=&quot;什么是Quartz-2D&quot;&gt;&lt;a href=&quot;#什么是Quartz-2D&quot;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
</feed>
