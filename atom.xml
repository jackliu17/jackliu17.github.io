<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cowboy Tech</title>
  <subtitle>The best preparation for tomorrow is doing your best today</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jackliu17.github.io/"/>
  <updated>2016-04-12T01:21:03.000Z</updated>
  <id>http://jackliu17.github.io/</id>
  
  <author>
    <name>Jack Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4月12日之夜梦</title>
    <link href="http://jackliu17.github.io/2016/04/12/4%E6%9C%8812%E6%97%A5%E4%B9%8B%E5%A4%9C%E6%A2%A6/"/>
    <id>http://jackliu17.github.io/2016/04/12/4月12日之夜梦/</id>
    <published>2016-04-12T00:53:22.000Z</published>
    <updated>2016-04-12T01:21:03.000Z</updated>
    
    <content type="html">&lt;p&gt;昨夜梦见D君了。&lt;/p&gt;
&lt;p&gt;他是多年前的朋友。一晃眼就14年了。那时我大学刚毕业，懵懂的来到广州找工作，托这个破专业的福，我误打误撞的进入了这个连锁餐厅当见习经理。他也是，只不过比我早点进去而已。那段日子，每日起早贪黑的在厨房忙碌着，期间多少心酸的感受，以后再找机会写吧。记得2003年新年除夕的那一天，结束了单位的庆祝活动后，从餐厅出来，我们俩坐在惠福西路寺庙前的石墩上，仰望星空，探究着自己不可测的未来。那一幕，那一满夜空的星星，时至今日，依然记忆犹新。&lt;/p&gt;
&lt;p&gt;长话短说，先把昨天的梦记录完，有时间再写当年的往事吧。&lt;/p&gt;
&lt;p&gt;昨夜梦见他在自己创业的小店里，给我做饭，为了煎一条鱼，花了五十多分钟。我笑着对他说：这也太慢了，顾客都等急了。然后我又搬出了自己自以为擅长的市场分析理论，“来快餐店吃饭的顾客有两种，第一是要赶时间的，第二是慢吞吞吃饭的，你们的店只能招待第二类顾客了”。他的店里能提供很多各式各样的广式煲汤，我一直很好奇，这库存怎么管理，如果每天做了很多汤，又吃不完卖不掉呢？&lt;/p&gt;
&lt;p&gt;他在现实中创业了，在沉淀了十多年的餐饮行业开始了扬帆前行。真羡慕，祝福他，也勉励自己。&lt;/p&gt;
&lt;p&gt;最近老是做一些梦，想起很多人很多事。也许我们怀念一个人，更确切的是，通过他来怀念自己的过去吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;昨夜梦见D君了。&lt;/p&gt;
&lt;p&gt;他是多年前的朋友。一晃眼就14年了。那时我大学刚毕业，懵懂的来到广州找工作，托这个破专业的福，我误打误撞的进入了这个连锁餐厅当见习经理。他也是，只不过比我早点进去而已。那段日子，每日起早贪黑的在厨房忙碌着，期间多少心酸的感受，以后再找机会写吧
    
    </summary>
    
      <category term="情感杂谈" scheme="http://jackliu17.github.io/categories/%E6%83%85%E6%84%9F%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS实例-通讯录</title>
    <link href="http://jackliu17.github.io/2016/03/26/iOS%E5%AE%9E%E4%BE%8B-%E9%80%9A%E8%AE%AF%E5%BD%95/"/>
    <id>http://jackliu17.github.io/2016/03/26/iOS实例-通讯录/</id>
    <published>2016-03-26T06:59:29.000Z</published>
    <updated>2016-03-26T07:02:39.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;视图&quot;&gt;&lt;a href=&quot;#视图&quot; class=&quot;headerlink&quot; title=&quot;视图&quot;&gt;&lt;/a&gt;视图&lt;/h2&gt;&lt;h3 id=&quot;创建新的navigation视图&quot;&gt;&lt;a href=&quot;#创建新的navigation视图&quot; class=&quot;headerlink&quot; title=&quot;创建新的navigation视图&quot;&gt;&lt;/a&gt;创建新的navigation视图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/new_navigation_controller.png&quot; alt=&quot;new navigation&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;创建新的rootViewController&quot;&gt;&lt;a href=&quot;#创建新的rootViewController&quot; class=&quot;headerlink&quot; title=&quot;创建新的rootViewController&quot;&gt;&lt;/a&gt;创建新的rootViewController&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/new_root_controller.png&quot; alt=&quot;new root view controller&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;导航视图顶部标题及按钮的设置&quot;&gt;&lt;a href=&quot;#导航视图顶部标题及按钮的设置&quot; class=&quot;headerlink&quot; title=&quot;导航视图顶部标题及按钮的设置&quot;&gt;&lt;/a&gt;导航视图顶部标题及按钮的设置&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/custom_bar_button_item.png&quot; alt=&quot;自定义标题栏&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;登录后视跳转视图&quot;&gt;&lt;a href=&quot;#登录后视跳转视图&quot; class=&quot;headerlink&quot; title=&quot;登录后视跳转视图&quot;&gt;&lt;/a&gt;登录后视跳转视图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/%E7%99%BB%E5%BD%95%E5%90%8E%E6%89%8D%E5%87%BA%E7%8E%B0%E7%9A%84%E9%A1%B5%E9%9D%A2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;UITableView-Cell-跳转到新视图&quot;&gt;&lt;a href=&quot;#UITableView-Cell-跳转到新视图&quot; class=&quot;headerlink&quot; title=&quot;UITableView Cell 跳转到新视图&quot;&gt;&lt;/a&gt;UITableView Cell 跳转到新视图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/tableViewCell.png&quot; alt=&quot;UITableView Cell&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;UI-element&quot;&gt;&lt;a href=&quot;#UI-element&quot; class=&quot;headerlink&quot; title=&quot;UI element&quot;&gt;&lt;/a&gt;UI element&lt;/h2&gt;&lt;h2 id=&quot;UIBarbutton的属性配置&quot;&gt;&lt;a href=&quot;#UIBarbutton的属性配置&quot; class=&quot;headerlink&quot; title=&quot;UIBarbutton的属性配置&quot;&gt;&lt;/a&gt;UIBarbutton的属性配置&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/Bar_button_item__.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;UITextfield的属性配置&quot;&gt;&lt;a href=&quot;#UITextfield的属性配置&quot; class=&quot;headerlink&quot; title=&quot;UITextfield的属性配置&quot;&gt;&lt;/a&gt;UITextfield的属性配置&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/TextField.png&quot; alt=&quot;TextField&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;UIButton的属性配置&quot;&gt;&lt;a href=&quot;#UIButton的属性配置&quot; class=&quot;headerlink&quot; title=&quot;UIButton的属性配置&quot;&gt;&lt;/a&gt;UIButton的属性配置&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/UIButton.png&quot; alt=&quot;UIButton&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何在xcode里正确的建立文件夹？&quot;&gt;&lt;a href=&quot;#如何在xcode里正确的建立文件夹？&quot; class=&quot;headerlink&quot; title=&quot;如何在xcode里正确的建立文件夹？&quot;&gt;&lt;/a&gt;如何在xcode里正确的建立文件夹？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;如果仅是在xcode里创建，那文件夹不会在存在finder里，实际上相关文件还是存在一个目录下&lt;/li&gt;
&lt;li&gt;需要在Xcode里左下角，”add new file to ….project” –&amp;gt; create new folder –&amp;gt; add,这样创建的文件夹可以存在finder里&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;视图&quot;&gt;&lt;a href=&quot;#视图&quot; class=&quot;headerlink&quot; title=&quot;视图&quot;&gt;&lt;/a&gt;视图&lt;/h2&gt;&lt;h3 id=&quot;创建新的navigation视图&quot;&gt;&lt;a href=&quot;#创建新的navigation视图&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>iOS实战项目开发（1）</title>
    <link href="http://jackliu17.github.io/2016/03/20/iOS%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/"/>
    <id>http://jackliu17.github.io/2016/03/20/iOS实战项目开发（1）/</id>
    <published>2016-03-20T04:22:12.000Z</published>
    <updated>2016-03-20T04:23:03.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>iOS的疑问</title>
    <link href="http://jackliu17.github.io/2016/03/18/iOS%E7%9A%84%E7%96%91%E9%97%AE/"/>
    <id>http://jackliu17.github.io/2016/03/18/iOS的疑问/</id>
    <published>2016-03-18T05:45:00.000Z</published>
    <updated>2016-03-26T06:39:07.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;为啥要在viewController中加入如下代码？&quot;&gt;&lt;a href=&quot;#为啥要在viewController中加入如下代码？&quot; class=&quot;headerlink&quot; title=&quot;为啥要在viewController中加入如下代码？&quot;&gt;&lt;/a&gt;为啥要在viewController中加入如下代码？&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;init(coder aDecoder:NSCoder!)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  super.init(coder:aDecoder)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;为什么不能用这个方法？（通讯录实例）&quot;&gt;&lt;a href=&quot;#为什么不能用这个方法？（通讯录实例）&quot; class=&quot;headerlink&quot; title=&quot;为什么不能用这个方法？（通讯录实例）&quot;&gt;&lt;/a&gt;为什么不能用这个方法？（通讯录实例）&lt;/h1&gt;&lt;p&gt;dequeueReusableCellWithIdentifier:forIndexPath:&lt;br&gt;而是要去掉forIndexPath &lt;/p&gt;
&lt;h1 id=&quot;不使用模拟器中的键盘&quot;&gt;&lt;a href=&quot;#不使用模拟器中的键盘&quot; class=&quot;headerlink&quot; title=&quot;不使用模拟器中的键盘?&quot;&gt;&lt;/a&gt;不使用模拟器中的键盘?&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为啥要在viewController中加入如下代码？&quot;&gt;&lt;a href=&quot;#为啥要在viewController中加入如下代码？&quot; class=&quot;headerlink&quot; title=&quot;为啥要在viewController中加入如下代码？&quot;&gt;&lt;/a&gt;为啥要在view
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UI-CodeExample</title>
    <link href="http://jackliu17.github.io/2016/03/18/iOS-UI-CodeExample/"/>
    <id>http://jackliu17.github.io/2016/03/18/iOS-UI-CodeExample/</id>
    <published>2016-03-18T02:08:59.000Z</published>
    <updated>2016-03-20T04:21:09.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;000-使用代码创建UI元素&quot;&gt;&lt;a href=&quot;#000-使用代码创建UI元素&quot; class=&quot;headerlink&quot; title=&quot;000 使用代码创建UI元素&quot;&gt;&lt;/a&gt;000 使用代码创建UI元素&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let label = UILabel(frame: CGRect(x: 50, y: 50, width: 200, height: 100))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      label.text = &amp;quot;Hello jikexueyuan&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      view.addSubview(label)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;001-使用webView打开网站&quot;&gt;&lt;a href=&quot;#001-使用webView打开网站&quot; class=&quot;headerlink&quot; title=&quot;001.使用webView打开网站&quot;&gt;&lt;/a&gt;001.使用webView打开网站&lt;/h1&gt;&lt;p&gt;需要在info.plist里设置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/webview%20setting.png&quot; alt=&quot;uiwebview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;@IBOutlet weak var wv: UIWebView!
@IBOutlet weak var urlInput: UITextField!
@IBAction func btnGoClicked(sender: AnyObject) {
    wv.loadRequest(NSURLRequest(URL:NSURL(string: urlInput.text!)!))
    urlInput.resignFirstResponder()
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;002-圆形进度指示器&quot;&gt;&lt;a href=&quot;#002-圆形进度指示器&quot; class=&quot;headerlink&quot; title=&quot;002.圆形进度指示器&quot;&gt;&lt;/a&gt;002.圆形进度指示器&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/%E5%9C%86%E5%BD%A2%E8%BF%9B%E5%BA%A6%E6%8C%87%E7%A4%BA%E5%99%A8.gif&quot; alt=&quot;圆形进度指示器&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ProgressControl-swift&quot;&gt;&lt;a href=&quot;#ProgressControl-swift&quot; class=&quot;headerlink&quot; title=&quot;ProgressControl.swift&quot;&gt;&lt;/a&gt;ProgressControl.swift&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import UIKit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class ProgressControl: UIView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override init(frame:CGRect)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.init(frame: frame)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.backgroundColor = UIColor(white: 1, alpha: 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    required init?(coder aDecoder: NSCoder) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fatalError(&amp;quot;init(coder:) has not been implemented&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private var _progressValue:CGFloat = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    internal func getProgressValue()-&amp;gt;CGFloat&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return _progressValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    internal func setProgressValue(value:CGFloat)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _progressValue = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setNeedsDisplay()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func drawRect(rect: CGRect) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.backgroundColor = UIColor(white: 1, alpha: 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Drawing code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let ctx = UIGraphicsGetCurrentContext()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let r = rect.width/2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CGContextAddArc(ctx, r, r, r, 0, 3.141592653*2, 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CGContextSetRGBFillColor(ctx, 0.7, 0.7, 0.7, 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CGContextFillPath(ctx) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CGContextAddArc(ctx,r,r,r,0,3.141592653*2*_progressValue, 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CGContextAddLineToPoint(ctx, r, r)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CGContextSetRGBFillColor(ctx, 0, 0, 1, 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CGContextFillPath(ctx)   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;viewController-swift&quot;&gt;&lt;a href=&quot;#viewController-swift&quot; class=&quot;headerlink&quot; title=&quot;viewController.swift&quot;&gt;&lt;/a&gt;viewController.swift&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import UIKit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class ViewController: UIViewController &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private var pc:ProgressControl!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @IBAction func addProgressBtnPress(sender: AnyObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pc.setProgressValue(pc.getProgressValue()+0.1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func viewDidLoad() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.viewDidLoad()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Do any additional setup after loading the view, typically from a nib.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pc = ProgressControl(frame:CGRect(x: 100,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            y: 100,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 100,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 100))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.view.addSubview(pc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func didReceiveMemoryWarning() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.didReceiveMemoryWarning()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Dispose of any resources that can be recreated.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;003-实时预览自定义控件&quot;&gt;&lt;a href=&quot;#003-实时预览自定义控件&quot; class=&quot;headerlink&quot; title=&quot;003.实时预览自定义控件&quot;&gt;&lt;/a&gt;003.实时预览自定义控件&lt;/h1&gt;&lt;h2 id=&quot;1-创建一个new-Target&quot;&gt;&lt;a href=&quot;#1-创建一个new-Target&quot; class=&quot;headerlink&quot; title=&quot;1.创建一个new Target&quot;&gt;&lt;/a&gt;1.创建一个new Target&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/new%20target.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-创建新的文件MyView-swift在这个target里&quot;&gt;&lt;a href=&quot;#2-创建新的文件MyView-swift在这个target里&quot; class=&quot;headerlink&quot; title=&quot;2.创建新的文件MyView.swift在这个target里&quot;&gt;&lt;/a&gt;2.创建新的文件MyView.swift在这个target里&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import UIKit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@IBDesignable class MyView: UIView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @IBInspectable var str:String = &amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @IBInspectable var borderWidth:CGFloat = 0&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        didSet&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        layer.borderWidth = borderWidth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @IBInspectable var borderColor:UIColor = UIColor.clearColor()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        didSet&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        layer.borderColor = borderColor.CGColor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @IBInspectable var cornerRaius:CGFloat=0&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        didSet&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        layer.cornerRadius = cornerRaius&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-实时预览编辑效果&quot;&gt;&lt;a href=&quot;#3-实时预览编辑效果&quot; class=&quot;headerlink&quot; title=&quot;3.实时预览编辑效果&quot;&gt;&lt;/a&gt;3.实时预览编辑效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;004-传感器&quot;&gt;&lt;a href=&quot;#004-传感器&quot; class=&quot;headerlink&quot; title=&quot;004. 传感器&quot;&gt;&lt;/a&gt;004. 传感器&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import UIKit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import CoreMotion&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class ViewController: UIViewController &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var cmm:CMMotionManager!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var q:NSOperationQueue!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func viewDidLoad() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.viewDidLoad()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Do any additional setup after loading the view, typically from a nib.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cmm = CMMotionManager()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        q = NSOperationQueue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func viewWillAppear(animated: Bool) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        startAccelerometerUpdate()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        startGyroUpdate()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        startListenProximity()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        startListenLevel()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func viewWillDisappear(animated: Bool) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stopAccelerometerUpdate()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stopGyroUpdate()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stopListenProximity()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stopListenLevel()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //调用加速度传感器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func startAccelerometerUpdate()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cmm.accelerometerUpdateInterval = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if cmm.accelerometerAvailable &amp;amp;&amp;amp; !cmm.accelerometerActive &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cmm.startAccelerometerUpdatesToQueue(q, withHandler: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (data:CMAccelerometerData?,err:NSError?) -&amp;gt; Void in&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                print(&amp;quot;AccelerometerData:\(data)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&amp;quot;加速度传感器不可用&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //调用陀螺仪&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func startGyroUpdate()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cmm.gyroUpdateInterval = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if cmm.gyroAvailable &amp;amp;&amp;amp; !cmm.gyroActive&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cmm.startGyroUpdatesToQueue(q, withHandler:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (data:CMGyroData?,err:NSError?)in&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                print(&amp;quot;Gyro data:\(data)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //调用距离传感器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func startListenProximity()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        UIDevice.currentDevice().proximityMonitoringEnabled = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSNotificationCenter.defaultCenter().addObserver(self,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            selector: Selector(&amp;quot;proximityChanged&amp;quot;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name:UIDeviceProximityStateDidChangeNotification,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            object: nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func proximityChanged()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;\(UIDevice.currentDevice().proximityState)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //调用电源传感器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func startListenLevel()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIDevice.currentDevice().batteryMonitoringEnabled = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;\(UIDevice.currentDevice().batteryLevel)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSNotificationCenter.defaultCenter().addObserver(self,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            selector: (&amp;quot;levelChanged&amp;quot;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name: UIDeviceBatteryLevelDidChangeNotification,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            object: nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func levelChanged()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;\(UIDevice.currentDevice().batteryLevel)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func stopListenLevel()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSNotificationCenter.defaultCenter().removeObserver(self, name: UIDeviceBatteryLevelDidChangeNotification,object:nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func stopAccelerometerUpdate()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if cmm.accelerometerActive &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cmm.stopAccelerometerUpdates()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func stopGyroUpdate()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if cmm.gyroActive&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cmm.stopGyroUpdates()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func stopListenProximity()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSNotificationCenter.defaultCenter().removeObserver(self,name:UIDeviceProximityStateDidChangeNotification,object:nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func didReceiveMemoryWarning() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.didReceiveMemoryWarning()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Dispose of any resources that can be recreated.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;005-指南针&quot;&gt;&lt;a href=&quot;#005-指南针&quot; class=&quot;headerlink&quot; title=&quot;005. 指南针&quot;&gt;&lt;/a&gt;005. 指南针&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import UIKit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import CoreLocation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class ViewController: UIViewController,CLLocationManagerDelegate &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @IBOutlet weak var pointerIv: UIImageView!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var lm:CLLocationManager!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func viewDidLoad() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.viewDidLoad()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lm = CLLocationManager()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lm.delegate = self&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func viewWillAppear(animated: Bool) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lm.startUpdatingHeading()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func locationManager(manager: CLLocationManager, didUpdateHeading newHeading: CLHeading) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pointerIv.transform = CGAffineTransformMakeRotation(CGFloat((180-newHeading.magneticHeading)/180.0 * 3.141592653))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func viewWillDisappear(animated: Bool) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lm.stopUpdatingHeading()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;006-触摸事件的侦听-amp-图片的缩小放大&quot;&gt;&lt;a href=&quot;#006-触摸事件的侦听-amp-图片的缩小放大&quot; class=&quot;headerlink&quot; title=&quot;006.触摸事件的侦听 &amp;amp; 图片的缩小放大&quot;&gt;&lt;/a&gt;006.触摸事件的侦听 &amp;amp; 图片的缩小放大&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import UIKit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class ViewController: UIViewController &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @IBOutlet weak var iv:UIImageView!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private var lastDistance:CGFloat = 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func viewDidLoad() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.viewDidLoad()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Do any additional setup after loading the view, typically from a nib.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //开启侦听多点触摸&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.view.multipleTouchEnabled = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func touchesBegan(touches: Set&amp;lt;UITouch&amp;gt;, withEvent event: UIEvent?) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lastDistance = 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;touchedBegan&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func touchesMoved(touches: Set&amp;lt;UITouch&amp;gt;, withEvent event: UIEvent?) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //输出触摸时某个点的坐标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //print(touches.first!.locationInView(self.view))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //输出有多少个触摸点同时在屏幕上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // print(touches.count)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //输出每一个触摸点的坐标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//        for touch in touches &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//        print(touch.locationInView(self.view))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //图片的缩小放大&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let touchesSet = touches as NSSet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if touchesSet.count == 2&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let p1 = touchesSet.allObjects[0].locationInView(self.view)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let p2 = touchesSet.allObjects[1].locationInView(self.view)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            let xx = p1.x - p2.x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            let yy = p1.y - p2.y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            let currentDistance = sqrt(xx * xx + yy * yy)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if lastDistance == 0.0 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lastDistance = currentDistance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if lastDistance - currentDistance &amp;gt; 5&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                print(&amp;quot;缩小&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    lastDistance = currentDistance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    iv.transform = CGAffineTransformScale(iv.transform, 0.9, 0.9)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;else if lastDistance - currentDistance &amp;lt; -5&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                print(&amp;quot;放大&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    lastDistance = currentDistance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    iv.transform = CGAffineTransformScale(iv.transform, 1.1, 1.1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func touchesEnded(touches: Set&amp;lt;UITouch&amp;gt;, withEvent event: UIEvent?) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;touchedEnded&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;007-浏览器打开网页-打电话-发短信-发邮件&quot;&gt;&lt;a href=&quot;#007-浏览器打开网页-打电话-发短信-发邮件&quot; class=&quot;headerlink&quot; title=&quot;007.浏览器打开网页 - 打电话 - 发短信 - 发邮件&quot;&gt;&lt;/a&gt;007.浏览器打开网页 - 打电话 - 发短信 - 发邮件&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@IBAction func btnGoWeb(sender: AnyObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIApplication.sharedApplication().openURL(NSURL(string:&amp;quot;http://www.google.com&amp;quot;)!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@IBAction func btnGoMail(sender: AnyObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIApplication.sharedApplication().openURL(NSURL(string:&amp;quot;mailto://xxx@jikexueyuan.com&amp;quot;)!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@IBAction func btnGoPhone(sender: AnyObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIApplication.sharedApplication().openURL(NSURL(string:&amp;quot;tel://10086&amp;quot;)!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@IBAction func btnGoMsg(sender: AnyObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIApplication.sharedApplication().openURL(NSURL(string:&amp;quot;sms://10086&amp;quot;)!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;app-A调用app-B&quot;&gt;&lt;a href=&quot;#app-A调用app-B&quot; class=&quot;headerlink&quot; title=&quot;app A调用app B&quot;&gt;&lt;/a&gt;app A调用app B&lt;/h1&gt;&lt;h2 id=&quot;app-A&quot;&gt;&lt;a href=&quot;#app-A&quot; class=&quot;headerlink&quot; title=&quot;app A&quot;&gt;&lt;/a&gt;app A&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@IBAction func btnCallIme(sender: AnyObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      UIApplication.sharedApplication().openURL(NSURL(string: &amp;quot;ime://i.love.you?h=Hello&amp;amp;b=World&amp;quot;)!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;app-B&quot;&gt;&lt;a href=&quot;#app-B&quot; class=&quot;headerlink&quot; title=&quot;app B&quot;&gt;&lt;/a&gt;app B&lt;/h2&gt;&lt;p&gt;在info.plist里先注册&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/register%20protocol.png&quot; alt=&quot;register protocol&quot;&gt;&lt;/p&gt;
&lt;p&gt;AppDelegate.swift&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func application(application: UIApplication, handleOpenURL url: NSURL) -&amp;gt; Bool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      let vc = LabelViewController(nibName:&amp;quot;LabelViewController&amp;quot;,bundle:nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      window?.addSubview(vc.view)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      vc.myLabel.text = &amp;quot;\(url)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;008-从相册获取照片&quot;&gt;&lt;a href=&quot;#008-从相册获取照片&quot; class=&quot;headerlink&quot; title=&quot;008.从相册获取照片&quot;&gt;&lt;/a&gt;008.从相册获取照片&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/getImage.gif&quot; alt=&quot;getImage&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class ViewController: UIViewController,UIImagePickerControllerDelegate,UINavigationControllerDelegate &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @IBOutlet weak var iv:UIImageView!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @IBAction func btnGetImage(sender: AnyObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let c = UIImagePickerController()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c.sourceType = UIImagePickerControllerSourceType.PhotoLibrary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c.delegate = self&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.presentViewController(c, animated:true,completion: nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func imagePickerController(picker: UIImagePickerController,didFinishPickingMediaWithInfo info: [String : AnyObject]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            let image:UIImage = info[UIImagePickerControllerOriginalImage] as! UIImage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            iv.image = image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            picker.dismissViewControllerAnimated(true, completion: nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;000-使用代码创建UI元素&quot;&gt;&lt;a href=&quot;#000-使用代码创建UI元素&quot; class=&quot;headerlink&quot; title=&quot;000 使用代码创建UI元素&quot;&gt;&lt;/a&gt;000 使用代码创建UI元素&lt;/h1&gt;&lt;figure class=&quot;highlight 
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="UIKit" scheme="http://jackliu17.github.io/tags/UIKit/"/>
    
      <category term="codeExample" scheme="http://jackliu17.github.io/tags/codeExample/"/>
    
  </entry>
  
  <entry>
    <title>Interview-English</title>
    <link href="http://jackliu17.github.io/2016/03/17/Interview-English/"/>
    <id>http://jackliu17.github.io/2016/03/17/Interview-English/</id>
    <published>2016-03-17T02:34:05.000Z</published>
    <updated>2016-03-17T02:35:19.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="English" scheme="http://jackliu17.github.io/categories/English/"/>
    
    
      <category term="interview" scheme="http://jackliu17.github.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>UIStoryboard的相关操作</title>
    <link href="http://jackliu17.github.io/2016/03/17/UIStoryboard%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <id>http://jackliu17.github.io/2016/03/17/UIStoryboard的相关操作/</id>
    <published>2016-03-17T02:18:16.000Z</published>
    <updated>2016-03-18T06:00:48.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h1&gt;&lt;p&gt;在info.plist文件中指定了所启动的storyboard是哪个。也可以另建新的storybord&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/UIStoryboard%20mainname.png&quot; alt=&quot;info.plist&quot;&gt;&lt;/p&gt;
&lt;p&gt;箭头所指就是启动的画面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/UIStoryboard.png&quot; alt=&quot;箭头所指&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;在Tab模板中新建一个new-tab&quot;&gt;&lt;a href=&quot;#在Tab模板中新建一个new-tab&quot; class=&quot;headerlink&quot; title=&quot;在Tab模板中新建一个new tab&quot;&gt;&lt;/a&gt;在Tab模板中新建一个new tab&lt;/h1&gt;&lt;p&gt;按住ctrl 键拖入到新的视图，选择 &lt;strong&gt;Relationship Segue — view controllers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/new%20tab.png&quot; alt=&quot;new tab&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;不同视图的跳转&quot;&gt;&lt;a href=&quot;#不同视图的跳转&quot; class=&quot;headerlink&quot; title=&quot;不同视图的跳转&quot;&gt;&lt;/a&gt;不同视图的跳转&lt;/h1&gt;&lt;h2 id=&quot;使用UIStoryboard创建视图&quot;&gt;&lt;a href=&quot;#使用UIStoryboard创建视图&quot; class=&quot;headerlink&quot; title=&quot;使用UIStoryboard创建视图&quot;&gt;&lt;/a&gt;使用UIStoryboard创建视图&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;点住Button,按住ctrl，向新的viewController拖动,选择segue模式&lt;/li&gt;
&lt;li&gt;从新视图的返回，使用如下代码: &lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;self.dismissModalViewControllerAnimated(true)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用nib文件创建视图&quot;&gt;&lt;a href=&quot;#使用nib文件创建视图&quot; class=&quot;headerlink&quot; title=&quot;使用nib文件创建视图&quot;&gt;&lt;/a&gt;使用nib文件创建视图&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建新的viewController文件和nib&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在初始视图中，如下代码跳转到新视图:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;self.presentModalViewController(MyViewController(nibName:&amp;quot;MyViewController&amp;quot;,bundle:nil),animated:true)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;从新视图的返回，使用如下代码: &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;self.dismissModalViewControllerAnimated(true)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;视图中传值&quot;&gt;&lt;a href=&quot;#视图中传值&quot; class=&quot;headerlink&quot; title=&quot;视图中传值&quot;&gt;&lt;/a&gt;视图中传值&lt;/h1&gt;&lt;h2 id=&quot;在第一个视图中&quot;&gt;&lt;a href=&quot;#在第一个视图中&quot; class=&quot;headerlink&quot; title=&quot;在第一个视图中&quot;&gt;&lt;/a&gt;在第一个视图中&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建新视图的同时，就将其属性配置好&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@IBOutlet var input:UITextField&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@IBAction func nextBtn&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let vc = MyViewController(nibName:&amp;quot;MyViewController&amp;quot;,bundle:nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vc.labelContent = input.text&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self.presentModalViewController(vc,animated:true)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;在第二个视图中&quot;&gt;&lt;a href=&quot;#在第二个视图中&quot; class=&quot;headerlink&quot; title=&quot;在第二个视图中&quot;&gt;&lt;/a&gt;在第二个视图中&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var labelContent:String = &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func viewDidLoad()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myLabel.text = labelContent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;返回时传值&quot;&gt;&lt;a href=&quot;#返回时传值&quot; class=&quot;headerlink&quot; title=&quot;返回时传值&quot;&gt;&lt;/a&gt;返回时传值&lt;/h2&gt;&lt;p&gt;在第二个视图中，通过如下代码，访问到前一个视图&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;self.parentViewController&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h1&gt;&lt;p&gt;在info.plist文件中指定了所启动的storyboard是哪个。也可以另建新的storybord&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;h
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="Xcode" scheme="http://jackliu17.github.io/tags/Xcode/"/>
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="UIKit" scheme="http://jackliu17.github.io/tags/UIKit/"/>
    
  </entry>
  
  <entry>
    <title>Keyboad快捷键</title>
    <link href="http://jackliu17.github.io/2016/03/17/Keyboad%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://jackliu17.github.io/2016/03/17/Keyboad快捷键/</id>
    <published>2016-03-17T02:13:06.000Z</published>
    <updated>2016-03-26T06:40:17.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Xcode&quot;&gt;&lt;a href=&quot;#Xcode&quot; class=&quot;headerlink&quot; title=&quot;Xcode&quot;&gt;&lt;/a&gt;Xcode&lt;/h1&gt;&lt;h3 id=&quot;显示某class的方法提示，在-后按esc键&quot;&gt;&lt;a href=&quot;#显示某class的方法提示，在-后按esc键&quot; class=&quot;headerlink&quot; title=&quot;显示某class的方法提示，在.后按esc键&quot;&gt;&lt;/a&gt;显示某class的方法提示，在.后按esc键&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Esc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Storyboard里放大缩小视图&quot;&gt;&lt;a href=&quot;#Storyboard里放大缩小视图&quot; class=&quot;headerlink&quot; title=&quot;Storyboard里放大缩小视图&quot;&gt;&lt;/a&gt;Storyboard里放大缩小视图&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;触摸板上的手势&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;查看某class内部的详情&quot;&gt;&lt;a href=&quot;#查看某class内部的详情&quot; class=&quot;headerlink&quot; title=&quot;查看某class内部的详情&quot;&gt;&lt;/a&gt;查看某class内部的详情&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;command + 点击&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Xcode&quot;&gt;&lt;a href=&quot;#Xcode&quot; class=&quot;headerlink&quot; title=&quot;Xcode&quot;&gt;&lt;/a&gt;Xcode&lt;/h1&gt;&lt;h3 id=&quot;显示某class的方法提示，在-后按esc键&quot;&gt;&lt;a href=&quot;#显示某class的方法提示，在-后按e
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="Mac" scheme="http://jackliu17.github.io/tags/Mac/"/>
    
      <category term="Xcode" scheme="http://jackliu17.github.io/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C语言应用开发基础编程入门</title>
    <link href="http://jackliu17.github.io/2016/03/16/Objective-C%E8%AF%AD%E8%A8%80%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/"/>
    <id>http://jackliu17.github.io/2016/03/16/Objective-C语言应用开发基础编程入门/</id>
    <published>2016-03-16T07:40:55.000Z</published>
    <updated>2016-03-17T02:07:30.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;NSString *name = @&amp;quot;jikexueyuan&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;以’-’代表对象&quot;&gt;&lt;a href=&quot;#以’-’代表对象&quot; class=&quot;headerlink&quot; title=&quot;以’%@’代表对象&quot;&gt;&lt;/a&gt;以’%@’代表对象&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;NSLog(@&amp;quot;Hello Objective-C&amp;quot;);
NSLog(@&amp;quot;The number is %d&amp;quot;,1000);
NSLog(@&amp;quot;Hello %s&amp;quot;,&amp;quot;XiaoLi&amp;quot;);
NSLog(@&amp;quot;Hello %@&amp;quot;,name);
NSLog(@&amp;quot;ObjC Object %@&amp;quot;,[[[NSObject alloc] init] description]); //实际上是调用NSObject中的description方法
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Class的构成&quot;&gt;&lt;a href=&quot;#Class的构成&quot; class=&quot;headerlink&quot; title=&quot;Class的构成&quot;&gt;&lt;/a&gt;Class的构成&lt;/h1&gt;&lt;h2 id=&quot;h-file&quot;&gt;&lt;a href=&quot;#h-file&quot; class=&quot;headerlink&quot; title=&quot;.h file&quot;&gt;&lt;/a&gt;.h file&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface People : NSObject&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int _age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *_name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// class method-------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+(People*)peopleWithAge:(int)age andName:(NSString*)name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(id)initWithAge:(int)age andName:(NSString*)name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(int)getAge;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(NSString*)getName;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;m-file&quot;&gt;&lt;a href=&quot;#m-file&quot; class=&quot;headerlink&quot; title=&quot;.m file&quot;&gt;&lt;/a&gt;.m file&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+(People*)peopleWithAge:(int)age andName:(NSString *)name&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return [[People alloc] initWithAge:age andName:name];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithAge:(int)age andName:(NSString *)name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self = [super init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (self) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(int)getAge&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return _age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(NSString*)getName&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return _name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;call-method&quot;&gt;&lt;a href=&quot;#call-method&quot; class=&quot;headerlink&quot; title=&quot;call method&quot;&gt;&lt;/a&gt;call method&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Hello *h = [[Hello alloc] init];
[h sayHello];
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;数组与字典&quot;&gt;&lt;a href=&quot;#数组与字典&quot; class=&quot;headerlink&quot; title=&quot;数组与字典&quot;&gt;&lt;/a&gt;数组与字典&lt;/h1&gt;&lt;h2 id=&quot;非可变数组&quot;&gt;&lt;a href=&quot;#非可变数组&quot; class=&quot;headerlink&quot; title=&quot;非可变数组&quot;&gt;&lt;/a&gt;非可变数组&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//三种构造方法，可以从plist文件中获取数据
NSArray *arr = @[@&amp;quot;Hello&amp;quot;,@&amp;quot;jikexueyuan&amp;quot;];
NSArray *arr = [NSArray arrayWithObjects:@&amp;quot;Hello&amp;quot;, @&amp;quot;jikexueyuan&amp;quot;,nil];
NSArray *arr = [NSArray arrayWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&amp;quot;data&amp;quot; ofType:@&amp;quot;plist&amp;quot;]];

for (int i=0; i&amp;lt;[arr count]; i++) {
    NSLog(@&amp;quot;%@&amp;quot;,[arr objectAtIndex:i]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;可变数组&quot;&gt;&lt;a href=&quot;#可变数组&quot; class=&quot;headerlink&quot; title=&quot;可变数组&quot;&gt;&lt;/a&gt;可变数组&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;NSMutableArray *arr = [[NSMutableArray alloc] init];

for (int i=0; i&amp;lt;100; i++) {
    [arr addObject:[NSString stringWithFormat:@&amp;quot;Item %d&amp;quot;,i]];
}

NSLog(@&amp;quot;%@&amp;quot;,arr);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;数组的plist文件&quot;&gt;&lt;a href=&quot;#数组的plist文件&quot; class=&quot;headerlink&quot; title=&quot;数组的plist文件&quot;&gt;&lt;/a&gt;数组的plist文件&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/array%20plist%20file.png&quot; alt=&quot;数组的plist文件&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;字典的plist文件&quot;&gt;&lt;a href=&quot;#字典的plist文件&quot; class=&quot;headerlink&quot; title=&quot;字典的plist文件&quot;&gt;&lt;/a&gt;字典的plist文件&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/dic%20plist%20file.png&quot; alt=&quot;字典的plist文件&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;字典与可变字典&quot;&gt;&lt;a href=&quot;#字典与可变字典&quot; class=&quot;headerlink&quot; title=&quot;字典与可变字典&quot;&gt;&lt;/a&gt;字典与可变字典&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//字典的构造
NSDictionary *dict = @{@&amp;quot;name&amp;quot;: @&amp;quot;ZhangSan&amp;quot;,@&amp;quot;sex&amp;quot;:@&amp;quot;male&amp;quot;};    
NSDictionary *dict = [NSDictionary dictionaryWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&amp;quot;data&amp;quot; ofType:@&amp;quot;plist&amp;quot;]];
NSLog(@&amp;quot;%@&amp;quot;,[dict objectForKey:@&amp;quot;age&amp;quot;]);

//可变字典
NSMutableDictionary *dict = [[NSMutableDictionary alloc] init];
[dict setObject:@&amp;quot;jikexueyuan&amp;quot; forKey:@&amp;quot;name&amp;quot;];

NSLog(@&amp;quot;%@&amp;quot;,[dict objectForKey:@&amp;quot;name&amp;quot;]);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;protocol&quot;&gt;&lt;a href=&quot;#protocol&quot; class=&quot;headerlink&quot; title=&quot;protocol&quot;&gt;&lt;/a&gt;protocol&lt;/h1&gt;&lt;h2 id=&quot;h-file-1&quot;&gt;&lt;a href=&quot;#h-file-1&quot; class=&quot;headerlink&quot; title=&quot;.h file&quot;&gt;&lt;/a&gt;.h file&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;

@protocol IPeople &amp;lt;NSObject&amp;gt;

-(int)getAge;
-(void)setAge:(int)age;
-(NSString*)getName;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;m-file-1&quot;&gt;&lt;a href=&quot;#m-file-1&quot; class=&quot;headerlink&quot; title=&quot;.m file&quot;&gt;&lt;/a&gt;.m file&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;@interface Man : NSObject&amp;lt;IPeople&amp;gt;{
int _age;
}

-(id)init;

-(void)setAge:(int)age;
-(NSString*)getName;
-(int)getAge;

@property id&amp;lt;ManDelegate&amp;gt; delegate;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Exception&quot;&gt;&lt;a href=&quot;#Exception&quot; class=&quot;headerlink&quot; title=&quot;Exception&quot;&gt;&lt;/a&gt;Exception&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;@try {

    //需要被捕获异常的代码
    @throw [NSException exceptionWithName:@&amp;quot;My Error&amp;quot; reason:nil userInfo:nil];
}
@catch (NSException *exception) {

    //输出一场信息
    NSLog(@&amp;quot;%@&amp;quot;,exception);
}
@finally {
    //无论是否有异常，都要执行
    NSLog(@&amp;quot;run&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;NSString *name = @&amp;quot;jikexueyuan&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;h
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="objective-C" scheme="http://jackliu17.github.io/tags/objective-C/"/>
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发面试</title>
    <link href="http://jackliu17.github.io/2016/03/16/iOS%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95/"/>
    <id>http://jackliu17.github.io/2016/03/16/iOS开发面试/</id>
    <published>2016-03-16T05:43:22.000Z</published>
    <updated>2016-03-16T07:18:16.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Objective-C有多重继承吗？不是的话有什么替代方法&quot;&gt;&lt;a href=&quot;#Objective-C有多重继承吗？不是的话有什么替代方法&quot; class=&quot;headerlink&quot; title=&quot;Objective-C有多重继承吗？不是的话有什么替代方法?&quot;&gt;&lt;/a&gt;Objective-C有多重继承吗？不是的话有什么替代方法?&lt;/h3&gt;&lt;p&gt;cocoa中所有的类都是NSObject的子类，多继承在这里是用protocol委托代理实现的&lt;/p&gt;
&lt;h3 id=&quot;Objective-C有私有方法吗，私有变量呢&quot;&gt;&lt;a href=&quot;#Objective-C有私有方法吗，私有变量呢&quot; class=&quot;headerlink&quot; title=&quot;Objective-C有私有方法吗，私有变量呢?&quot;&gt;&lt;/a&gt;Objective-C有私有方法吗，私有变量呢?&lt;/h3&gt;&lt;p&gt;Objectivie-C类里面的方法只有两种，静态方法和实例方法。所有实例变量默认都是私有的，所有实例方法默认都是公有的。&lt;/p&gt;
&lt;h3 id=&quot;const作用&quot;&gt;&lt;a href=&quot;#const作用&quot; class=&quot;headerlink&quot; title=&quot;const作用&quot;&gt;&lt;/a&gt;const作用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;欲阻止一个变量被改变，可以使用const关键字&lt;/li&gt;
&lt;li&gt;对指针来说，可以指定指针本身为const,也可以指定指针所指的数据为const,或二者同时指定为const&lt;/li&gt;
&lt;li&gt;在一个函数声明中，const可以修饰形参，表明它是一个输入参数，在函数内部不能改变其值&lt;/li&gt;
&lt;li&gt;对于类的成员函数，若指定其为const类型，则表明其是一个常函数，不能修改类的成员变量&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;static作用&quot;&gt;&lt;a href=&quot;#static作用&quot; class=&quot;headerlink&quot; title=&quot;static作用&quot;&gt;&lt;/a&gt;static作用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;函数体内static变量的作用范围为该函数体，不同于auto变量，该变量的内存只被分配一次，因此其值在下次调用时仍维持上次的值&lt;/li&gt;
&lt;li&gt;在模块内的static全局变量可以被模块内所用的函数访问，但不能被模块外其他函数访问&lt;/li&gt;
&lt;li&gt;在模块内的static函数只可被这一模块内的其他函数调用，这个函数的使用范围被限制在声明它的模块内&lt;/li&gt;
&lt;li&gt;在类中的static成员变量属于整个类所拥有，对类的所有对象只有一份拷贝&lt;/li&gt;
&lt;li&gt;在类中的static成员函数属于整个类所拥有，这个函数不接收this指针，因而只能访问类的static成员变量&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;extern-“C”的作用&quot;&gt;&lt;a href=&quot;#extern-“C”的作用&quot; class=&quot;headerlink&quot; title=&quot;extern “C”的作用&quot;&gt;&lt;/a&gt;extern “C”的作用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;被extern”C”限定的函数或者变量是extern类型的&lt;/li&gt;
&lt;li&gt;被extern”C”修饰的变量和函数是按照C语言方式编译和连接的&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;import和-include的区别，-class呢？&quot;&gt;&lt;a href=&quot;#import和-include的区别，-class呢？&quot; class=&quot;headerlink&quot; title=&quot;#import和 #include的区别，@class呢？&quot;&gt;&lt;/a&gt;#import和 #include的区别，@class呢？&lt;/h3&gt;&lt;p&gt;@class一般用于头文件中需要声明该类的某个实例变量的时候用到，在m文件中还是需要使用#import，而#import比#include的好处就是不会引起交叉编译&lt;/p&gt;
&lt;h3 id=&quot;objective-C的优点&quot;&gt;&lt;a href=&quot;#objective-C的优点&quot; class=&quot;headerlink&quot; title=&quot;objective-C的优点&quot;&gt;&lt;/a&gt;objective-C的优点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Categories&lt;/li&gt;
&lt;li&gt;Posing&lt;/li&gt;
&lt;li&gt;动态识别&lt;/li&gt;
&lt;li&gt;指标计算&lt;/li&gt;
&lt;li&gt;弹性讯息传递&lt;/li&gt;
&lt;li&gt;不是一个过度复杂的C衍生语言&lt;/li&gt;
&lt;li&gt;OC与C++可以混合编程&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Objective-C的缺点&quot;&gt;&lt;a href=&quot;#Objective-C的缺点&quot; class=&quot;headerlink&quot; title=&quot;Objective-C的缺点&quot;&gt;&lt;/a&gt;Objective-C的缺点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;不支持命名空间&lt;/li&gt;
&lt;li&gt;不支持运算符重载&lt;/li&gt;
&lt;li&gt;不支持多重继承&lt;/li&gt;
&lt;li&gt;使用动态运行时类型，所有的方法都是函数调用，所以很多编译时优化方法都用不到&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Objective-C的内存管理&quot;&gt;&lt;a href=&quot;#Objective-C的内存管理&quot; class=&quot;headerlink&quot; title=&quot;Objective-C的内存管理&quot;&gt;&lt;/a&gt;Objective-C的内存管理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;通过分配和初始化([[MyClass alloc]init])的方式来创建对象，那就拥有这个对象，需要负责该对象的释放。这个规则在使用NSObject的便利方法new时也同样适用。&lt;/li&gt;
&lt;li&gt;如果您拷贝(copy)一个对象，您也拥有拷贝得到的对象，需要负责该对象的释放。如果您保持(retain)一个对象，你就部分拥有这个对象，需要&lt;br&gt;在不再使用时释放该对象。反过来如果您从其他对象那里接收到一个对象。则您不再拥有该对象。也不应该释放它。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;自动释放池是什么，如何工作&quot;&gt;&lt;a href=&quot;#自动释放池是什么，如何工作&quot; class=&quot;headerlink&quot; title=&quot;自动释放池是什么，如何工作&quot;&gt;&lt;/a&gt;自动释放池是什么，如何工作&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/%E8%87%AA%E5%8A%A8%E9%87%8A%E6%94%BE%E6%B1%A0.png&quot; alt=&quot;自动释放池&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;堆和栈的区别&quot;&gt;&lt;a href=&quot;#堆和栈的区别&quot; class=&quot;headerlink&quot; title=&quot;堆和栈的区别&quot;&gt;&lt;/a&gt;堆和栈的区别&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB1.png&quot; alt=&quot;堆和栈的区别1&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB2.png&quot; alt=&quot;堆和栈的区别2&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;swift新特性&quot;&gt;&lt;a href=&quot;#swift新特性&quot; class=&quot;headerlink&quot; title=&quot;swift新特性&quot;&gt;&lt;/a&gt;swift新特性&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/Swift%E6%96%B0%E7%89%B9%E6%80%A7.png&quot; alt=&quot;swift新特性&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Objective-C有多重继承吗？不是的话有什么替代方法&quot;&gt;&lt;a href=&quot;#Objective-C有多重继承吗？不是的话有什么替代方法&quot; class=&quot;headerlink&quot; title=&quot;Objective-C有多重继承吗？不是的话有什么替代方法?&quot;&gt;&lt;/
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="interview" scheme="http://jackliu17.github.io/tags/interview/"/>
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-Swift与Objective-C混合编程</title>
    <link href="http://jackliu17.github.io/2016/03/16/iOS-Swift%E4%B8%8EObjective-C%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/"/>
    <id>http://jackliu17.github.io/2016/03/16/iOS-Swift与Objective-C混合编程/</id>
    <published>2016-03-16T04:35:57.000Z</published>
    <updated>2016-03-16T07:22:24.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Swift调用Objective-C代码&quot;&gt;&lt;a href=&quot;#Swift调用Objective-C代码&quot; class=&quot;headerlink&quot; title=&quot;Swift调用Objective-C代码&quot;&gt;&lt;/a&gt;Swift调用Objective-C代码&lt;/h1&gt;&lt;p&gt;在swift project里新建OC文件时，会弹出如下对话框，选择yes,创建&lt;code&gt;SwiftTut-Bridging-Header&lt;/code&gt;文件与&lt;code&gt;OCHello&lt;/code&gt;文件&lt;br&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/swift-oc-Bridge.png&quot; alt=&quot;dialogue&quot;&gt;&lt;br&gt;在SwiftTut-Bridging-Header里加入如下代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;quot;OCHello.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以在swift项目里使用oc文件了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var h = OCHello()
    h.sayHello()
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Objective-C调用Swift代码&quot;&gt;&lt;a href=&quot;#Objective-C调用Swift代码&quot; class=&quot;headerlink&quot; title=&quot;Objective-C调用Swift代码&quot;&gt;&lt;/a&gt;Objective-C调用Swift代码&lt;/h1&gt;&lt;p&gt;在OC project里新建swift文件时，会弹出如下对话框，选择yes,创建&lt;code&gt;SwiftTut-Bridging-Header&lt;/code&gt;文件与&lt;code&gt;SwfitHello&lt;/code&gt;文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/swift-oc-Bridge.png&quot; alt=&quot;dialogue&quot;&gt;&lt;/p&gt;
&lt;p&gt;在Project file –&amp;gt;Build setting –&amp;gt; Package –&amp;gt;Defines module –&amp;gt; 选择”Yes”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/import%20Swift%20-%20build%20setting.png&quot; alt=&quot;dialogue2&quot;&gt;&lt;/p&gt;
&lt;p&gt;在OC文件里引入”ProductName-Swift.h”文件，这个是系统自动生成的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;CallSwift-Swift.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在OC文件里可以引用swift类了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SwiftHello *h = [[SwiftHello alloc]init];
[h sayHello];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS official doc for mixing swift with OC&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Swift调用Objective-C代码&quot;&gt;&lt;a href=&quot;#Swift调用Objective-C代码&quot; class=&quot;headerlink&quot; title=&quot;Swift调用Objective-C代码&quot;&gt;&lt;/a&gt;Swift调用Objective-C代码&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="objective-C" scheme="http://jackliu17.github.io/tags/objective-C/"/>
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift中类的构造与析构</title>
    <link href="http://jackliu17.github.io/2016/03/15/Swift%E4%B8%AD%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E6%9E%90%E6%9E%84/"/>
    <id>http://jackliu17.github.io/2016/03/15/Swift中类的构造与析构/</id>
    <published>2016-03-14T23:44:10.000Z</published>
    <updated>2016-03-16T07:26:40.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;类的构造器&quot;&gt;&lt;a href=&quot;#类的构造器&quot; class=&quot;headerlink&quot; title=&quot;类的构造器&quot;&gt;&lt;/a&gt;类的构造器&lt;/h1&gt;&lt;h2 id=&quot;类的指定构造器和便利构造器&quot;&gt;&lt;a href=&quot;#类的指定构造器和便利构造器&quot; class=&quot;headerlink&quot; title=&quot;类的指定构造器和便利构造器&quot;&gt;&lt;/a&gt;类的指定构造器和便利构造器&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;便利构造器的语法格式:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   convenience init(形参)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;一个类中至少有一个指定构造器，其必须负责初始化类中所有的实例存储属性。&lt;/li&gt;
&lt;li&gt;便利构造器属于次要的，辅助性的构造器&lt;/li&gt;
&lt;li&gt;类中可以不定义便利构造器，便利构造器必须调用同一个类中的其他构造器完成初始化&lt;/li&gt;
&lt;li&gt;只有类中才有便利构造器的概念&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/%E6%8C%87%E5%AE%9A%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E4%BB%A3%E7%A0%81%E9%A1%BA%E5%BA%8F.png&quot; alt=&quot;指定构造器&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Apple&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name:String!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var weight:Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义指定构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name:String, weight:Double)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.weight = weight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义便利构造器，使用convenience修饰&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    convenience init(n name:String, w weight:Double)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //便利构造器必须调用同一个类中其他构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.init(name: name, weight: weight)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var app1 = Apple(n: &amp;quot;Red apple&amp;quot;, w: 1.2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var app2 = Apple(name: &amp;quot;Alvocado&amp;quot;, weight: 2.4)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;类的构造器链&quot;&gt;&lt;a href=&quot;#类的构造器链&quot; class=&quot;headerlink&quot; title=&quot;类的构造器链&quot;&gt;&lt;/a&gt;类的构造器链&lt;/h2&gt;&lt;p&gt;Swift对构造器之间的调用链制定了如下3条规则:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;子类构造器必须调用直接父类的指定构造器(如果有父类)&lt;/li&gt;
&lt;li&gt;便利构造器必须调用同一个类中的其他构造器;&lt;/li&gt;
&lt;li&gt;便利构造器调用的构造器链的最终节点必须是指定构造器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简化记忆为:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;指定构造器总是向上代理(调用父类构造器)&lt;/li&gt;
&lt;li&gt;便利构造器总是必须横向代理(调用当前类的其他构造器)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%E9%93%BE.png&quot; alt=&quot;类的构造器链1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%E9%93%BE2.png&quot; alt=&quot;类的构造器链2&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var weight:Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init (name:String) &amp;#123; //1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       self.weight = 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义便利构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    convenience init (name:String,weight:Double)&amp;#123;//2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //调用本类中的1号指定构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.init(name:name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.weight = weight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义另一个便利构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    convenience init(n name:String,w weight:Double)&amp;#123;//3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //调用本类中2号便利构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.init(name:name,weight:weight)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Apple:Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var color:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name:String,weight:Double,color:String)&amp;#123;//4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.color = color&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //子类指定构造器必须调用父类的指定构造器，此处调用父类1号构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super.init(name: name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.weight = weight //为什么不能放在init前面？因为父类构造器会把值给覆盖&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init()&amp;#123;//5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.color = &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //子类指定构造器必须调用父类的指定构造器，此处调用父类1号构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.init(name: &amp;quot;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.weight = 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义一个便利构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    convenience init(name:String,color:String) &amp;#123;//6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //调用本类中4号指定构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.init(name:name,weight:0.0,color:color)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义一个便利构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    convenience init(n name:String, c color:String)&amp;#123;//7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //调用本类中6号便利构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.init(name:name,color:color)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;两段式构造&quot;&gt;&lt;a href=&quot;#两段式构造&quot; class=&quot;headerlink&quot; title=&quot;两段式构造&quot;&gt;&lt;/a&gt;两段式构造&lt;/h2&gt;&lt;h3 id=&quot;第一阶段&quot;&gt;&lt;a href=&quot;#第一阶段&quot; class=&quot;headerlink&quot; title=&quot;第一阶段&quot;&gt;&lt;/a&gt;第一阶段&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;程序调用子类的某个构造器&lt;/li&gt;
&lt;li&gt;为实例分配内存，此时实例的内存还没有被初始化&lt;/li&gt;
&lt;li&gt;指定构造器确保子类定义的所有实例存储属性都已被赋初值&lt;/li&gt;
&lt;li&gt;指定构造器将调用父类的构造器，完成父类定义的实例存储属性的初始化&lt;/li&gt;
&lt;li&gt;沿着调用父类构造器的构造器链一直往上执行，直到到达构造器链的最顶部&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/%E4%B8%A4%E6%AE%B5%E5%BC%8F%E6%9E%84%E9%80%A0%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5.png&quot; alt=&quot;第一阶段&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;第二阶段&quot;&gt;&lt;a href=&quot;#第二阶段&quot; class=&quot;headerlink&quot; title=&quot;第二阶段&quot;&gt;&lt;/a&gt;第二阶段&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;沿着继承树往下，构造器此时可以修改实例属性，访问self,甚至可以调用实例方法&lt;/li&gt;
&lt;li&gt;最后，构造器链中的便利构造器都有机会定制实例和使用self&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/%E4%B8%A4%E6%AE%B5%E5%BC%8F%E6%9E%84%E9%80%A0%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5.png&quot; alt=&quot;第二阶段&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;安全检查&quot;&gt;&lt;a href=&quot;#安全检查&quot; class=&quot;headerlink&quot; title=&quot;安全检查&quot;&gt;&lt;/a&gt;安全检查&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;指定构造器必须先初始化当前类中定义的实例存储属性，然后才能向上调用父类构造器&lt;/li&gt;
&lt;li&gt;指定构造器必须先向上调用父类构造器，然后才能对继承得到的属性赋值&lt;/li&gt;
&lt;li&gt;便利构造器必须先调用同一个类的其他构造器，然后才能对属性赋值&lt;/li&gt;
&lt;li&gt;构造器在第一阶段完成之前，不能调用实例方法，不能读取实例属性&lt;/li&gt;
&lt;li&gt;建议为实例存储属性指定初始值&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;安全检查1-amp-2&quot;&gt;&lt;a href=&quot;#安全检查1-amp-2&quot; class=&quot;headerlink&quot; title=&quot;安全检查1&amp;amp;2&quot;&gt;&lt;/a&gt;安全检查1&amp;amp;2&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Apple:Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var color:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(color:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //print(self.color) // error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.color = color&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //print(self.color)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.color = &amp;quot;Red&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //print(super.name)// error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.init(name: &amp;quot;Flower apple&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //print(super.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.name = &amp;quot;red apple&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var a = Apple(color: &amp;quot;Green&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;安全检查3&quot;&gt;&lt;a href=&quot;#安全检查3&quot; class=&quot;headerlink&quot; title=&quot;安全检查3&quot;&gt;&lt;/a&gt;安全检查3&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A53.png&quot; alt=&quot;安全检查3&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Apple:Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var color:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(color:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.color = color&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(self.color)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.init(name:&amp;quot;Red apple&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义便利构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    convenience init (name:String,color:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //调用其他构造器之前，不能访问或修改任何实例存储属性，下面两行代码出错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //print(self.color)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      //  super.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //调用本类其他构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.init(color:&amp;quot;Red&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var a = Apple(color: &amp;quot;Red&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;构造器的继承和重写&quot;&gt;&lt;a href=&quot;#构造器的继承和重写&quot; class=&quot;headerlink&quot; title=&quot;构造器的继承和重写&quot;&gt;&lt;/a&gt;构造器的继承和重写&lt;/h1&gt;&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Swift的子类不会自动继承父类的构造器，若继承，则满足如下规则：&lt;/li&gt;
&lt;li&gt;-1.如果子类没有提供任何指定构造器，那么它将自动继承父类的所有指定构造器&lt;/li&gt;
&lt;li&gt;-2.如果子类实现了父类所有的指定构造器，无论如何实现的，都将自动继承父类的所有便利构造器&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var weight:Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义一个指定构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name:String,weight:Double)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.weight = weight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义2个便利构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    convenience init(name:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.init(name:name,weight:0.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    convenience init()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.init(name:&amp;quot;Fruit&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.weight = 1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//该类提供了指定构造器，并未实现父类所有的指定构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Apple:Fruit&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var color:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义一个指定构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name:String,color:String,weight:Double)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.color = color&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.init(name: name, weight: weight)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义一个便利构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    convenience init(name:String,color:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.init(name:name,color:color,weight:0.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//该类没有定义任何构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Fu:Apple&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var vitamin:Double = 0.21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;重写&quot;&gt;&lt;a href=&quot;#重写&quot; class=&quot;headerlink&quot; title=&quot;重写&quot;&gt;&lt;/a&gt;重写&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;子类构造器重写了父类的指定构造器，必须添加override修饰符&lt;/li&gt;
&lt;li&gt;子类中定义的构造器只是与父类中便利构造器的形参列表，外部形参名相同，不算重写&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var weight:Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.name = &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.weight = 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name:String,weight:Double)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.weight = weight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    convenience init(name:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.init(name:name,weight:0.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    convenience init(_ name:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.init(name:name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Apple:Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var color:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //重写父类的指定构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override init(name:String,weight:Double)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.color = &amp;quot;Default&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //调用父类构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.init(name:name, weight:weight)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义指定构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.color = &amp;quot;Default&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.init(name: name, weight: 0.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //便利构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    convenience init(name: String, weight: Double,color:String) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.init(name:name,weight:weight)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.weight = weight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //使用便利构造器重写父类的指定构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override convenience init() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.init(name:&amp;quot;Apple&amp;quot;,weight:0.0,color:&amp;quot;Pink&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;可能失败的构造器&quot;&gt;&lt;a href=&quot;#可能失败的构造器&quot; class=&quot;headerlink&quot; title=&quot;可能失败的构造器&quot;&gt;&lt;/a&gt;可能失败的构造器&lt;/h1&gt;&lt;p&gt;可能失败的构造器必须满足如下两个条件才能触发:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;该类中的所有实例存储属性都已被赋初始值&lt;/li&gt;
&lt;li&gt;所有的构造器调用都已经被执行&lt;/li&gt;
&lt;li&gt;可能失败的构造器可以调用同一个类中的普通构造器&lt;/li&gt;
&lt;li&gt;普通构造器不能调用同一个类中可能失败的构造器&lt;/li&gt;
&lt;li&gt;结构体中，普通构造器却可以调用同一个结构体中可能失败的构造器&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class User &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name :String!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init?(name:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //self.name = &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if name.isEmpty&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class User&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name: String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init?(name:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.name = &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if name.isEmpty&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Student:User &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var grade:Int!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init!(name:String,grade:Int)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //调用父类的可能失败的构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.init(name: name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;--super.init(name:\(name))之后--&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //如果grade小于1，使用return nil触发构造失败&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if grade &amp;lt; 1&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.grade = grade&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let s1 = Student(name: &amp;quot;Tom&amp;quot;, grade: 4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&amp;quot;s1的name:\(s1.name),s1的grade:\(s1.grade)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let s2 = Student(name: &amp;quot;Jerry&amp;quot;, grade: 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(s2 == nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let s3 = Student(name: &amp;quot;&amp;quot;, grade: 3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(s3 == nil)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;重写可能失败的构造器&quot;&gt;&lt;a href=&quot;#重写可能失败的构造器&quot; class=&quot;headerlink&quot; title=&quot;重写可能失败的构造器&quot;&gt;&lt;/a&gt;重写可能失败的构造器&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;子类可以用可能失败的构造器或者普通的构造器重写父类中的可能失败的构造器&lt;/li&gt;
&lt;li&gt;子类的普通构造器不能向上调用父类的可能失败的构造器&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Bird &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name:String!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义普通构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义可能失败的构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init?(name:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if name.isEmpty&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Sparrow:Bird &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let weight:Double!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init?(name:String,weight:Double)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //由于该构造器是可能失败的构造器，可以调用父类可能失败的构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.init(name: name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if weight &amp;lt;= 0 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.weight = weight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //使用普通构造器重写父类的构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override init(name: String) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //由于该构造器是普通构造器，因此不能调用父类的可能失败的构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //因此只能调用父类的普通构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.init()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if name.isEmpty &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.name = &amp;quot;麻雀&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let sp1 = Sparrow(name: &amp;quot;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&amp;quot;sp1的name:\(sp1.name)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let sp2 = Sparrow(name: &amp;quot;&amp;quot;, weight: 2.2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(sp2 == nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let sp3 = Sparrow(name: &amp;quot;小黄嘴&amp;quot;, weight: 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(sp3 == nil)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;required构造器&quot;&gt;&lt;a href=&quot;#required构造器&quot; class=&quot;headerlink&quot; title=&quot;required构造器&quot;&gt;&lt;/a&gt;required构造器&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Swift允许在父类构造器前添加require关键字，用于声明所有子类必须包含该require构造器&lt;/li&gt;
&lt;li&gt;父类中声明的required构造器即可是指定构造器，也可以便利构造器&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var weight:Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    required init(name:String)&amp;#123;//1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.weight = 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    required convenience init(name:String,weight:Double)&amp;#123;//2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.init(name:name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.weight = weight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Apple:Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var color:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    required init(name:String,weight:Double)&amp;#123;//3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.color = &amp;quot;Pink&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.init(name: name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(color:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.color = color&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super.init(name: &amp;quot;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    required convenience init(name:String)&amp;#123;//4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.init(color:&amp;quot;aaaa&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//该类将会继承得到父类的request构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Grape:Fruit&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var sugarRate:Double = 0.45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;析构器&quot;&gt;&lt;a href=&quot;#析构器&quot; class=&quot;headerlink&quot; title=&quot;析构器&quot;&gt;&lt;/a&gt;析构器&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;析构器是一个名为deinit的函数，不需要使用func关键字，无参数和返回值&lt;/li&gt;
&lt;li&gt;析构器在实例释放之前由系统自动调用，不要主动调用析构器&lt;/li&gt;
&lt;li&gt;子类自动继承父类的析构器，而且无论如何，子类析构器一定会调用父类析构器&lt;/li&gt;
&lt;li&gt;析构器可以访问该实例的所有实例存储属性，或者根据这些属性来关闭资源&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var weight:Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义指定构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.weight = 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义析构器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    deinit&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;程序准备释放fruit&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //此处可访问实例属性，可用于释放资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Apple:Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var color:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义指定构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name:String,weight:Double,color:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.color = color&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super.init(name: name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义析构器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    deinit&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;程序准备释放apple&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //此处可访问实例属性，可用于释放资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var ap:Apple? = Apple(name: &amp;quot;红富士&amp;quot;, weight: 0.34, color: &amp;quot;红色&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(ap!.name + &amp;quot;--&amp;gt;&amp;quot; + ap!.color)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ap = nil&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类的构造器&quot;&gt;&lt;a href=&quot;#类的构造器&quot; class=&quot;headerlink&quot; title=&quot;类的构造器&quot;&gt;&lt;/a&gt;类的构造器&lt;/h1&gt;&lt;h2 id=&quot;类的指定构造器和便利构造器&quot;&gt;&lt;a href=&quot;#类的指定构造器和便利构造器&quot; class=&quot;header
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift中的扩展和协议</title>
    <link href="http://jackliu17.github.io/2016/03/14/Swift%E4%B8%AD%E7%9A%84%E6%89%A9%E5%B1%95%E5%92%8C%E5%8D%8F%E8%AE%AE/"/>
    <id>http://jackliu17.github.io/2016/03/14/Swift中的扩展和协议/</id>
    <published>2016-03-14T05:30:21.000Z</published>
    <updated>2016-03-14T09:07:53.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;扩展&quot;&gt;&lt;a href=&quot;#扩展&quot; class=&quot;headerlink&quot; title=&quot;扩展&quot;&gt;&lt;/a&gt;扩展&lt;/h1&gt;&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;添加属性，方法，可变方法，构造器，下标，嵌套类型&lt;/li&gt;
&lt;li&gt;可以使一个已有类型符合一个或者多个协议&lt;/li&gt;
&lt;li&gt;Swift的扩展与OC的Category类似，只是swift中的扩展没有名字&lt;/li&gt;
&lt;li&gt;扩展并不是派生子类，因此不支持重写&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;语法定义&quot;&gt;&lt;a href=&quot;#语法定义&quot; class=&quot;headerlink&quot; title=&quot;语法定义&quot;&gt;&lt;/a&gt;语法定义&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[修饰符]extension已有类型&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//添加新功能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[修饰符]extension已有类型:协议1，协议2&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//添加新功能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;修饰符可以省略，或者是private,internal,public其中之一，类型可以是枚举，结构体和类其中之一。&lt;/li&gt;
&lt;li&gt;通过扩展为已有类型添加了新功能，那这个新功能在该类型的所有已有实例中都是可用的。 &lt;/li&gt;
&lt;li&gt;通过扩展让已有的类型遵守一个或者多个协议&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;使用扩展添加属性，方法&quot;&gt;&lt;a href=&quot;#使用扩展添加属性，方法&quot; class=&quot;headerlink&quot; title=&quot;使用扩展添加属性，方法&quot;&gt;&lt;/a&gt;使用扩展添加属性，方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用扩展可以添加3种属性：类型存储属性，实例计算属性，类型计算属性&lt;/li&gt;
&lt;li&gt;使用扩展可以添加实例方法或者类型方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;添加属性&quot;&gt;&lt;a href=&quot;#添加属性&quot; class=&quot;headerlink&quot; title=&quot;添加属性&quot;&gt;&lt;/a&gt;添加属性&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;extension String &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static var data:[String:Any] = [:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var length:Int&amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        get&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          return self.characters.count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        set&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let originLength = self.characters.count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //如果新设置的长度大于字符串原有长度，在字符串后面添加空字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if newValue &amp;gt; originLength &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                for _ in 1...newValue - originLength &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  self += &amp;quot; &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //如果新设置的长度小于字符串原有长度，将后面多余的字符截断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            else if newValue &amp;lt; originLength &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                var tmp = &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                var count = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                for ch in self.characters &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    tmp = &amp;quot;\(tmp)\(ch)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    count++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    //如果已经拼接了newValue个字符，跳出循环&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    if count == newValue &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    break&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                self = tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String.data[&amp;quot;swift&amp;quot;] = 89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String.data[&amp;quot;OC&amp;quot;] = 92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(String.data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var s = &amp;quot;jike.org&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//通过length输出字符串的长度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(s.length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//通过设置length属性，截断String后面多出来的字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//s.length = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//print(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//通过设置length属性，在string后面补充空格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s.length = 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(s)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;添加方法&quot;&gt;&lt;a href=&quot;#添加方法&quot; class=&quot;headerlink&quot; title=&quot;添加方法&quot;&gt;&lt;/a&gt;添加方法&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;extension String &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//添加一个新方法，用于获取当前字符串中指定范围的子串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func substringFromStart(start:Int, toEnd:Int) -&amp;gt;String&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var count = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var tmp = &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for ch in self.characters &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if count &amp;gt;= start &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            tmp = &amp;quot;\(tmp)\(ch)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if count &amp;gt;= toEnd - 1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            break&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            count++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义一个类方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static func valueOf(value:Bool) -&amp;gt;String&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;quot;\(value)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var str = &amp;quot;jike.isagoodstudycenter&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//截取原字符串中从索引5开始，到索引10之间的子串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var subStr = str.substringFromStart(5, toEnd: 10)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(subStr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(String.valueOf(true))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(String.valueOf(false))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;添加可变方法&quot;&gt;&lt;a href=&quot;#添加可变方法&quot; class=&quot;headerlink&quot; title=&quot;添加可变方法&quot;&gt;&lt;/a&gt;添加可变方法&lt;/h3&gt;&lt;p&gt;类不可以定义可变方法，不能通过扩展来为类添加可变方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;extension Array &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//定义一个方法，用于计算数组的交集&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mutating func retainAll(array:[Element],compartor:(Element,Element)-&amp;gt;Bool)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var tmp = [Element]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //遍历当前数组中所有元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for ele in self &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //遍历第二个数组的所有元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for target in array &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //如果两个元素通过compartor比较返回true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if compartor(ele,target)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                tmp.append(ele)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    break&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self = tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var books = [&amp;quot;iOS&amp;quot;,&amp;quot;Android&amp;quot;,&amp;quot;Swift&amp;quot;,&amp;quot;Java&amp;quot;,&amp;quot;Ruby&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;books.retainAll([&amp;quot;Android&amp;quot;,&amp;quot;iOS&amp;quot;,&amp;quot;C&amp;quot;])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return $0 == $1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(books)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;添加下标&quot;&gt;&lt;a href=&quot;#添加下标&quot; class=&quot;headerlink&quot; title=&quot;添加下标&quot;&gt;&lt;/a&gt;添加下标&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;extension String &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subscript(idx:Int)-&amp;gt;String&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        get&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //如果下标位于字符串长度之内&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if idx &amp;gt; -1 &amp;amp;&amp;amp; idx &amp;lt; self.characters.count &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                var count = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                var result = &amp;quot;&amp;quot; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //通过遍历搜索字符串内指定索引处的字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                for ch in self.characters&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    if count == idx &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    //将找到的字符转换为字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        result = &amp;quot;\(ch)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    count++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //如果下标没有位于字符串长度之内，返回空字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              return&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        set&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var result = &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var count = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for ch in self.characters&amp;#123;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if count == idx&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result += newValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result += &amp;quot;\(ch)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                count++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self = result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义只读下标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subscript(start:Int,end:Int)-&amp;gt;String&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //如果start,end都位于字符串长度之内，且start小于end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if start &amp;gt; -1 &amp;amp;&amp;amp; start &amp;lt; self.characters.count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;&amp;amp; end &amp;gt; -1 &amp;amp;&amp;amp; end &amp;lt;= self.characters.count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;&amp;amp; start &amp;lt; end &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var result = &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var count = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for ch in self.characters &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if count &amp;gt;= start &amp;amp;&amp;amp; count &amp;lt; end&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result.append(ch)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            count++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //如果给定的下标不符合要求，程序直接返回空字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//定义一个字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var s = &amp;quot;jike is a excellent training center&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//通过下标访问索引为5的字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(s[5])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//通过下标改变字符串指定索引处的字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s[0] = &amp;quot;J&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s[2] = &amp;quot;K&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//通过带两个Int参数的下标来获取字符串中间范围的子串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(s[2,6])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;添加构造器&quot;&gt;&lt;a href=&quot;#添加构造器&quot; class=&quot;headerlink&quot; title=&quot;添加构造器&quot;&gt;&lt;/a&gt;添加构造器&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;没有构造器，系统会提供默认的，&lt;/li&gt;
&lt;li&gt;已经定义了，系统就不会提供构造器&lt;/li&gt;
&lt;li&gt;想要他们并存，就需要扩展，通过扩展添加的构造器，不会影响原有的构造器&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//定义一个结构体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct SomeStruct&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var count:Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//使用扩展来添加构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extension SomeStruct&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name:String)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.count = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(count:Int)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.count = count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.name = &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//下面使用了SomeStruct的3个构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var sc1 = SomeStruct(name: &amp;quot;jike&amp;quot;, count: 5)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var sc2 = SomeStruct(name: &amp;quot;crazyjike&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var sc3 = SomeStruct(count: 20)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;添加嵌套类型&quot;&gt;&lt;a href=&quot;#添加嵌套类型&quot; class=&quot;headerlink&quot; title=&quot;添加嵌套类型&quot;&gt;&lt;/a&gt;添加嵌套类型&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;extension String &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//定义一个嵌套枚举&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    enum Suit:String&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    case Diamond = &amp;quot;A&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    case Club = &amp;quot;B&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    case Heart = &amp;quot;C&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    case Spade = &amp;quot;D&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //通过扩展为String增加一个类型方法，用于判断指定字符串属于哪种花色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static func judgeSuit(s:String)-&amp;gt;Suit?&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        switch(s)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case &amp;quot;A&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return .Diamond&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case &amp;quot;B&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return .Club&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case &amp;quot;C&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return .Heart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case &amp;quot;D&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return .Spade&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//使用Strig包含的嵌套枚举&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var s1:String.Suit? = String.judgeSuit(&amp;quot;C&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(s1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var s2:String.Suit? = String.judgeSuit(&amp;quot;j&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(s2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;协议-规范和实现的分离，松耦合的设计&quot;&gt;&lt;a href=&quot;#协议-规范和实现的分离，松耦合的设计&quot; class=&quot;headerlink&quot; title=&quot;协议 -规范和实现的分离，松耦合的设计&quot;&gt;&lt;/a&gt;协议 -规范和实现的分离，松耦合的设计&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Swift协议用于定义多个类型应该遵守的规范&lt;/li&gt;
&lt;li&gt;协议定义了一种规范，不提供任何实现&lt;/li&gt;
&lt;li&gt;协议统一了属性名，方法，下标，但是协议并不提供任何实现&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;定义语法格式&quot;&gt;&lt;a href=&quot;#定义语法格式&quot; class=&quot;headerlink&quot; title=&quot;定义语法格式:&quot;&gt;&lt;/a&gt;定义语法格式:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;修饰符:可以省略，也可以是private,internal,public之一&lt;/li&gt;
&lt;li&gt;协议名应与类名采用相同的命名规则&lt;/li&gt;
&lt;li&gt;一个协议可以有多个直接父协议，但协议只能继承协议，不能继承类&lt;/li&gt;
&lt;li&gt;协议内容:指定协议实现者必须提供的那些功能，比如属性，方法，构造器和下标等&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[修饰符]protocol协议名:父协议1,父协议2,...&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//协议内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;实现协议的语法：结构体和枚举一样的&quot;&gt;&lt;a href=&quot;#实现协议的语法：结构体和枚举一样的&quot; class=&quot;headerlink&quot; title=&quot;实现协议的语法：结构体和枚举一样的&quot;&gt;&lt;/a&gt;实现协议的语法：结构体和枚举一样的&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. Struct结构名:第一个协议，第二个协议,...&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//实现协议要求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.Class类名:SuperClass,第一个协议，第二个协议,...&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;协议指定的属性要求&quot;&gt;&lt;a href=&quot;#协议指定的属性要求&quot; class=&quot;headerlink&quot; title=&quot;协议指定的属性要求&quot;&gt;&lt;/a&gt;协议指定的属性要求&lt;/h2&gt;&lt;h3 id=&quot;语法格式&quot;&gt;&lt;a href=&quot;#语法格式&quot; class=&quot;headerlink&quot; title=&quot;语法格式&quot;&gt;&lt;/a&gt;语法格式&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class var 属性名:类型&amp;#123;get set&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;class可有可无。如果有class关键字，说明为类型属性，否则为实例属性。不可以使用static代替class&lt;/li&gt;
&lt;li&gt;get和set部分:只需要写get,set即可，无须提供实现，set可有可无&lt;/li&gt;
&lt;li&gt;协议多继承，弥补了类单继承的不足&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;protocol Strokable&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var strokeWidth:Double &amp;#123;get set&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;protocol Fullable&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var fullColor:Color? &amp;#123;get set&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//定义一个枚举作为协议属性的类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;enum Color &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    case Red,Green,Blue,Yellow,Cyan&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;protocol HasArea:Fullable,Strokable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var area:Double&amp;#123;get&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;protocol Mathable&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //这里怎么用static? 和说明上不一样哦&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static var pi: Double &amp;#123;get&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static var e: Double &amp;#123;get&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//让Rect实现2个协议&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct Rect:HasArea,Mathable&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var width:Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var height:Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(width:Double,height:Double)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.width = width&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.height = height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //使用存储属性实现Fullable协议的fullColor属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var fullColor:Color?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //使用存储属性实现Strokable协议的strokeWidth属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var strokeWidth:Double = 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //使用存储属性实现HASAREA协议要求的area属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var area: Double&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        get&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return width * height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //通过存储属性实现Mathable协议要求的两个类型属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //虽然协议中使用class关键字定义类型属性，但值类型中依然使用static定义类型属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static var pi:Double = 3.14159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static var e:Double = 2.71626&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;扩展&quot;&gt;&lt;a href=&quot;#扩展&quot; class=&quot;headerlink&quot; title=&quot;扩展&quot;&gt;&lt;/a&gt;扩展&lt;/h1&gt;&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;ol&gt;
&lt;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift中的继承和多态</title>
    <link href="http://jackliu17.github.io/2016/03/13/Swift%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/"/>
    <id>http://jackliu17.github.io/2016/03/13/Swift中的继承和多态/</id>
    <published>2016-03-13T04:16:20.000Z</published>
    <updated>2016-03-14T03:02:32.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h1&gt;&lt;h2 id=&quot;继承的特点&quot;&gt;&lt;a href=&quot;#继承的特点&quot; class=&quot;headerlink&quot; title=&quot;继承的特点&quot;&gt;&lt;/a&gt;继承的特点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;单继承，每个子类只有一个直接父类，与OC不同，他不继承NSObject。如果不显示父类，就说明没有父类。可以有多个间接父类&lt;/li&gt;
&lt;li&gt;子类继承父类，可以获得父类的属性，方法，下标，也可以进行重写&lt;/li&gt;
&lt;li&gt;swift的类并不是从一个通用的基类继承而来的&lt;/li&gt;
&lt;li&gt;override修饰被重写的部分&lt;/li&gt;
&lt;li&gt;final修饰的类不能被继承，属性，方法和下标不能被重写&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;父类的继承&quot;&gt;&lt;a href=&quot;#父类的继承&quot; class=&quot;headerlink&quot; title=&quot;父类的继承&quot;&gt;&lt;/a&gt;父类的继承&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Fruit &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var weight = 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func info()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;我是一个水果，重\(weight)g!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Apple:Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name:String!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func taste()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;\(name)吃起来很好吃&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var a = Apple()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//Apple本身没有weight属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//因为Apple的父类有weight属性，也可以访问Apple实例的weight属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.weight = 56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.name = &amp;quot;红富士&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//调用Apple实例的info方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.info()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.taste()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;重写父类的方法&quot;&gt;&lt;a href=&quot;#重写父类的方法&quot; class=&quot;headerlink&quot; title=&quot;重写父类的方法&quot;&gt;&lt;/a&gt;重写父类的方法&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Bird&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //Bird类的fly()方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func fly()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;我在天空里自由自在的飞翔&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Ostrich:Bird &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //重写Bird类的fly()方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func fly() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;我只能在地上奔跑...&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//创建Ostrich实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var os = Ostrich()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//执行Ostrich实例的fly()方法，将输出....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;os.fly()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;重写父类的属性&quot;&gt;&lt;a href=&quot;#重写父类的属性&quot; class=&quot;headerlink&quot; title=&quot;重写父类的属性&quot;&gt;&lt;/a&gt;重写父类的属性&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Bird &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var speed: Double = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Ostrich: Bird &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //重写Bird类的speed属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override var speed:Double&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        get&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;正在访问被重写的属性&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return super.speed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        set&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.speed = newValue * newValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//创建Ostrich实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var os = Ostrich()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//对重写后的属性赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;os.speed = 20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 访问被重写后的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&amp;quot;os的速度为:\(os.speed)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;重写属性观察者&quot;&gt;&lt;a href=&quot;#重写属性观察者&quot; class=&quot;headerlink&quot; title=&quot;重写属性观察者&quot;&gt;&lt;/a&gt;重写属性观察者&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;不要同时添加set和didSet&lt;/li&gt;
&lt;li&gt;不要给常量存储属性和只读计算属性添加属性观察者 &lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Bird &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var speed: Double = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Ostrich: Bird &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //重写Bird类的speed属性,添加属性观察者  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override var speed:Double&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        didSet&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //属性值被改变完成后，将会自动执行该方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&amp;quot;改变之前的speed为:\(oldValue)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            super.speed *= speed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//创建Ostrich实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var os = Ostrich()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//对重写后的属性赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;os.speed = 20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 访问被重写后的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&amp;quot;os的速度为:\(os.speed)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;重写父类的下标&quot;&gt;&lt;a href=&quot;#重写父类的下标&quot; class=&quot;headerlink&quot; title=&quot;重写父类的下标&quot;&gt;&lt;/a&gt;重写父类的下标&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Base &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subscript(idx:Int) -&amp;gt;Int&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        get&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;父类的下标的get方法&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return idx + 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Sub:Base &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //重写Base类的下标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override subscript(idx:Int) -&amp;gt;Int&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        get&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&amp;quot;重写后的下标的get方法&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&amp;quot;通过super访问被重写之前的下标:\(super[idx])&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return idx * idx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        set&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&amp;quot;重写后的下标的setter方法，传入的参数值为:\(newValue)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var base = Base()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(base[7]) //输出17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//创建Sub实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var sub = Sub()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(sub[7]) //输出49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub[7] = 90&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;多态&quot;&gt;&lt;a href=&quot;#多态&quot; class=&quot;headerlink&quot; title=&quot;多态&quot;&gt;&lt;/a&gt;多态&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Swift引用变量有两个类型:编译时类型，运行时类型，编译器只认编译时类型&lt;/li&gt;
&lt;li&gt;编译时类型由声明该变量时使用类型决定&lt;/li&gt;
&lt;li&gt;运行时类型由实际赋予该变量的实例决定&lt;/li&gt;
&lt;li&gt;多态:相同类型的变量，调用同一个方法时呈现出多种不同的行为特征。也就是编译时类型和运行时类型不一样&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class BaseClass &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func base()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;父类的普通方法&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func test()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;父类的被覆盖的方法&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class SubClass:BaseClass &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func test() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;子类的覆盖父类的方法&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func sub()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;子类的普通方法&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let bc:BaseClass = BaseClass()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//下面两次调用将执行BaseClass的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bc.base()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bc.test()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let sc:SubClass = SubClass()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//下面调用将执行从父类继承到的base()方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sc.base()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//下面调用将执行从当前类的test()方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sc.test()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sc.sub()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//下面编译时类型和运行时类型不一样，多态发生&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//下面将子类实例赋值给父类变量，称为向上转型,由系统自动完成&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//编译类型是BaseClass，运行时类型是SubClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let ploymophicBc: BaseClass = SubClass()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//下面调用将执行父类继承到的base()方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ploymophicBc.base()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//下面调用将执行从当前类的test()方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ploymophicBc.test()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//因为ploymophicBc的编译类型是BaseClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//BaseClass类没有提供sub方法，所以下面代码编译时会出现错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//ploymophicBc.sub()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;使用is运算符检查类型&quot;&gt;&lt;a href=&quot;#使用is运算符检查类型&quot; class=&quot;headerlink&quot; title=&quot;使用is运算符检查类型&quot;&gt;&lt;/a&gt;使用is运算符检查类型&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;使用is运算符检查类型，返回值为布尔类型，判断前面的引用变量是否引用后面的类或者子类的实例。是则true&lt;/li&gt;
&lt;li&gt;前一个操作数是一个引用类型变量，后一个操作数是一个类&lt;/li&gt;
&lt;li&gt;运算符前面操作数的编译类型要么与后面的类相同，要么具有继承关系，否则编译报错。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//定义一个可被objective-C类使用的协议&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@objc protocol TestProtocol&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let hello:NSObject = &amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&amp;quot;字符串是否是NSString类的实例:\(hello is NSString)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&amp;quot;字符串是否是NSDate类的实例:\(hello is NSDate)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&amp;quot;字符串是否是TestProtocol协议的实例:\(hello is TestProtocol)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let a: NSString = &amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//下面这行代码会报错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//print(&amp;quot;字符串是否是Math类的实例:\(a is NSDate)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;向下转型&quot;&gt;&lt;a href=&quot;#向下转型&quot; class=&quot;headerlink&quot; title=&quot;向下转型&quot;&gt;&lt;/a&gt;向下转型&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;使用as运算符向下转型&lt;/li&gt;
&lt;li&gt;向上转型:把一个子类实例直接赋给一个父类引用变量，不用任何类型转换&lt;/li&gt;
&lt;li&gt;引用变量只能调用其编译时类型的方法，强制转换为其实际类型，可以调用运行时类型的方法，这种强制转换为向下转型&lt;/li&gt;
&lt;li&gt;向下转型运算符: 1. as!强制将运算符前面的引用变量转换为后面的类型。 2.(a..as?…b)!可选形式的向下转换&lt;/li&gt;
&lt;li&gt;向下转换只能在具有继承关系的两个类型之间进行&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;例子1&quot;&gt;&lt;a href=&quot;#例子1&quot; class=&quot;headerlink&quot; title=&quot;例子1&quot;&gt;&lt;/a&gt;例子1&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//编译类型为NSObject的obj向下转换，程序可以运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let obj:NSObject = &amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let objStr:NSString = obj as! NSString&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(objStr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//编译类型为NSObject的obj向下转换为NSString，但实际上它运行时的类型为NSNumber。编译没问题，但运行相冲突&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let objPri:NSObject = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let str:NSString = objPri as! NSString&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//针对上述代码有以下两个解决方案&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//1.------- 先进行判断，再转换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if objPri is NSString &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let str: NSString = objPri as! NSString&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//2.------- 使用可选类型转换符as?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let str2:NSString = (objPri as? NSString)!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;例子2&quot;&gt;&lt;a href=&quot;#例子2&quot; class=&quot;headerlink&quot; title=&quot;例子2&quot;&gt;&lt;/a&gt;例子2&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var weight:Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name:String, weight:Double)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.weight = weight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Apple:Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var color:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name: String, weight: Double,color:String) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.color = color&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.init(name: name, weight: weight)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Grape: Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var sugarRate:Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name: String, weight: Double,sugarRate:Double) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.sugarRate = sugarRate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.init(name: name, weight: weight)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//定义元素为any的数组，该数组的元素几乎可以放置任何数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var anyArray:[Any] = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;swift&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    29,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&amp;quot;iOS&amp;quot;:89,&amp;quot;android&amp;quot;:92],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Fruit(name: &amp;quot;Cherry&amp;quot;, weight: 2.3),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Apple(name: &amp;quot;Pink lady&amp;quot;, weight: 2.4, color: &amp;quot;Pink&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//遍历元素为Any的数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for element in anyArray&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//尝试将数组元素强转为Fruit，然后执行可选绑定&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if let f = element as? Fruit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;\(f.name)水果重\(f.weight)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//定义元素为AnyObject的数组，该数组的元素只能是对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var anyObjectArray:[AnyObject] = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Fruit(name: &amp;quot;Cherry&amp;quot;, weight: 2.3),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Apple(name: &amp;quot;Pink lady&amp;quot;, weight: 2.4, color: &amp;quot;Pink&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Any和AnyObject&quot;&gt;&lt;a href=&quot;#Any和AnyObject&quot; class=&quot;headerlink&quot; title=&quot;Any和AnyObject&quot;&gt;&lt;/a&gt;Any和AnyObject&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;AnyObject: 可代表任何类的实例&lt;/li&gt;
&lt;li&gt;Any: 可代表任何类型，包括Int,Double等值类型，AnyObject修饰的实例&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;嵌套类型&quot;&gt;&lt;a href=&quot;#嵌套类型&quot; class=&quot;headerlink&quot; title=&quot;嵌套类型&quot;&gt;&lt;/a&gt;嵌套类型&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;在一个类型的内部定义另一个类型&lt;/li&gt;
&lt;li&gt;Swift的枚举、类，结构体都可以定义嵌套类型&lt;/li&gt;
&lt;li&gt;Swift的嵌套类型支持多级嵌套&lt;/li&gt;
&lt;li&gt;嵌套类型不允许使用static或者class修饰&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class User &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var holidays:[Weekday]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var location:Point&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(holidays:[Weekday],location:Point)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.holidays = holidays&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.location = location&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义一个嵌套类型:结构体Point&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    struct Point &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var latitude:Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var longitude:Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var position:Orientation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //嵌套枚举&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        enum Orientation&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case Up,Left,Bottom,Right&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义一个嵌套类型:枚举Weekday&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    enum Weekday&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    case Monday, Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        struct Duration &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var num:Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var unit:String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//使用嵌套类型时，需要以被嵌套类型的名字为前缀&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var user = User(holidays:[],location:User.Point(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    latitude:-23.33,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    longitude:122.11,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position:User.Point.Orientation.Left))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//引用User.Weekday嵌套枚举&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user.holidays.append(User.Weekday.Saturday)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user.holidays.append(User.Weekday.Sunday)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h1&gt;&lt;h2 id=&quot;继承的特点&quot;&gt;&lt;a href=&quot;#继承的特点&quot; class=&quot;headerlink&quot; title=&quot;继承的特点&quot;&gt;&lt;/a&gt;继承的特
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift面向对象基础（下）</title>
    <link href="http://jackliu17.github.io/2016/03/13/Swift%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://jackliu17.github.io/2016/03/13/Swift面向对象基础（下）/</id>
    <published>2016-03-12T23:15:37.000Z</published>
    <updated>2016-03-14T03:31:36.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;可选链&quot;&gt;&lt;a href=&quot;#可选链&quot; class=&quot;headerlink&quot; title=&quot;可选链&quot;&gt;&lt;/a&gt;可选链&lt;/h1&gt;&lt;h2 id=&quot;可选类型&quot;&gt;&lt;a href=&quot;#可选类型&quot; class=&quot;headerlink&quot; title=&quot;可选类型&quot;&gt;&lt;/a&gt;可选类型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在原有类型后面添加?,需要强制解析&lt;/li&gt;
&lt;li&gt;在原有类型后面添加！，不需要强制解析，因为这已经是隐式解析了&lt;/li&gt;
&lt;li&gt;所有类型默认不接受nil，但是可选类型可以&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;可选链-1&quot;&gt;&lt;a href=&quot;#可选链-1&quot; class=&quot;headerlink&quot; title=&quot;可选链&quot;&gt;&lt;/a&gt;可选链&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Customer {

var name = &amp;quot;&amp;quot;
var emp: Employee?

init(name :String){
self.name = name
}

//定义一个常量类型的employee数组，用于模拟系统中所有员工
let employees = [
    Employee(name: &amp;quot;张三&amp;quot;, title: &amp;quot;销售客服&amp;quot;),
    Employee (name: &amp;quot;小明&amp;quot;, title: &amp;quot;售后客服&amp;quot;),
    Employee (name: &amp;quot;Han&amp;quot;, title: &amp;quot;普通客服&amp;quot;),
    Employee (name: &amp;quot;Better&amp;quot;, title: &amp;quot;销售主管&amp;quot;),
]

//定义一个方法，该方法可根据员工名返回对应的员工，返回值为可选类型
func findEmp(empName:String) -&amp;gt; Employee! {

    for emp in employees {
        if emp.name == empName {
          return emp
        }
    }
    return nil
}

}


class Company {

  var name = &amp;quot;&amp;quot;
  var addr = &amp;quot;&amp;quot;

  init (name:String, addr:String){
  self.name = name
  self.addr = addr
  }
}

class Employee {

var name = &amp;quot;Lily&amp;quot;
var title = &amp;quot;行政&amp;quot;
var company:Company!

init(name:String, title:String){

    self.name = name
    self.title = title
}

func info(){

     print(&amp;quot;本员工名为\(self.name),职位是\(self.title)&amp;quot;)

}
}

//第一种情况----------------------
var c = Customer(name: &amp;quot;Damon&amp;quot;)
var emp = Employee(name: &amp;quot;Elena&amp;quot;, title: &amp;quot;Student&amp;quot;)

//设置Customer关联的Employee实例
c.emp = emp

//设置Employee关联的Company实例
emp.company = Company(name: &amp;quot;极客学院&amp;quot;, addr: &amp;quot;北京市&amp;quot;)

//print(&amp;quot;为\(c.name)服务的公司是:\(c.emp!.company.name)&amp;quot;)
//print(&amp;quot;为\(c.name)服务的公司是:\(c.emp?.company?.name)&amp;quot;) //使用可选链访问属性

//第二种情况, 如果不赋值的情况下强制解析，会有空值报错
var c2 = Customer(name: &amp;quot;Lucky&amp;quot;)
c2.emp = Employee(name: &amp;quot;Snow&amp;quot;, title: &amp;quot;客服&amp;quot;)
//print(&amp;quot;为\(c2.name)服务的公司是:\(c2.emp!.company.name)&amp;quot;) //会报错，因为有空值
//print(&amp;quot;为\(c2.name)服务的公司是:\(c2.emp?.company?.name)&amp;quot;) //使用可选链访问属性

//第三种情况 ---------------
var c3 = Customer(name: &amp;quot;Paul&amp;quot;)
c3.findEmp(&amp;quot;张三&amp;quot;)?.info()
c3.findEmp(&amp;quot;小明&amp;quot;)?.info()
//print(&amp;quot;为\(c3.name)服务的公司是:\(c3.emp?.company?.name)&amp;quot;)


//第四种情况
var dict = [Int: Customer]()
dict[1] = Customer(name: &amp;quot;Han&amp;quot;)
dict[2] = Customer(name: &amp;quot;Angle&amp;quot;)

dict[1]?.findEmp(&amp;quot;Better&amp;quot;)?.info()
dict[4]?.findEmp(&amp;quot;Better&amp;quot;)?.info() //dict[4]是没有值的，所以该条命令不会输出语句
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;可选链用于处理可选类型的属性，方法和下标&lt;/li&gt;
&lt;li&gt;使用可选链代替强制解析，访问方式：将强制解析的感叹号换成?，在隐式解析的后面也添加?后缀&lt;/li&gt;
&lt;li&gt;可选链会自动判断程序访问的关联实例是否为nil&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;类型属性和类型方法&quot;&gt;&lt;a href=&quot;#类型属性和类型方法&quot; class=&quot;headerlink&quot; title=&quot;类型属性和类型方法&quot;&gt;&lt;/a&gt;类型属性和类型方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Swift的类型中可以定义5种成员:属性，方法，下标，构造器和嵌套类型&lt;/li&gt;
&lt;li&gt;类型属性，实例属性&lt;/li&gt;
&lt;li&gt;类型方法，实例方法&lt;/li&gt;
&lt;li&gt;static:在枚举，结构体中修饰的属性，方法为类型属性，类型方法&lt;/li&gt;
&lt;li&gt;class:在类中修饰的属性，方法&lt;/li&gt;
&lt;li&gt;结构体可以包含实例计算属性，不能包含实例存储属性&lt;/li&gt;
&lt;li&gt;类中不可以定义类型存储属性，只能包含类型计算属性&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;值类型的类型属性-枚举&quot;&gt;&lt;a href=&quot;#值类型的类型属性-枚举&quot; class=&quot;headerlink&quot; title=&quot;值类型的类型属性-枚举&quot;&gt;&lt;/a&gt;值类型的类型属性-枚举&lt;/h2&gt;&lt;p&gt;结构体可以包含实例计算属性，不能包含实例存储属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enum Season {
//为枚举定义类型存储属性，使用可选类型，系统将其初始化为nil
static var desc:String?
//为枚举定义类型存储属性，且声明为常量
static let name = &amp;quot;季节&amp;quot;
static var info:String{

    get{

    return&amp;quot;代表季节的枚举，其desc为:\(desc)&amp;quot;

    }

    set{

    print(&amp;quot;程序尝试对info计算属性进行赋值:\(newValue)&amp;quot;)

    }
}
}
//对Season枚举的类型属性赋值
Season.desc = &amp;quot;季节类&amp;quot;
print(Season.name)
Season.info = &amp;quot;新的info&amp;quot;
print(Season.info)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;值类型的类型属性-结构体&quot;&gt;&lt;a href=&quot;#值类型的类型属性-结构体&quot; class=&quot;headerlink&quot; title=&quot;值类型的类型属性-结构体&quot;&gt;&lt;/a&gt;值类型的类型属性-结构体&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;struct FkRange {

//为结构体定义类型存储属性，使用可选类型，系统将其初始化为nil
static var desc:String?
//为结构体定义类型存储属性，且声明为常量
static let maxWidth = 10000
static let maxHeight = 40000
//定义类型计算属性，该属性只有get部分，是一个只读属性
static var maxArea:Int{
return maxWidth * maxHeight
}
}

FkRange.desc = &amp;quot;描述范围的结构体&amp;quot;
print(FkRange.desc)
print(FkRange.maxWidth)
print(FkRange.maxHeight)
print(FkRange.maxArea)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;类的类型属性&quot;&gt;&lt;a href=&quot;#类的类型属性&quot; class=&quot;headerlink&quot; title=&quot;类的类型属性&quot;&gt;&lt;/a&gt;类的类型属性&lt;/h2&gt;&lt;p&gt;类中不可以定义类型存储属性，只能包含类型计算属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class User {

   //为类定义类型计算属性
class var nameMaxLength:Int {
    get {
    return 24
    }

    set {
    print(&amp;quot;程序尝试对User类的nameMaxLength类型计算属性赋值:\(newValue)&amp;quot;)
    }
}
}
print(User.nameMaxLength)
User.nameMaxLength = 20
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;值类型的类型方法&quot;&gt;&lt;a href=&quot;#值类型的类型方法&quot; class=&quot;headerlink&quot; title=&quot;值类型的类型方法&quot;&gt;&lt;/a&gt;值类型的类型方法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;enum Season2{

 //为枚举定义类型存储属性，使用可选类型，系统将其初始化为nil
static var desc:String?

//为枚举定义类型存储属性，且声明为常量
static let name = &amp;quot;季节&amp;quot;

//定义无参数的类型方法
static func info(){

print(&amp;quot;季节类的info方法，该类的name存储属性为:\(name)&amp;quot;)
}

//定义带一个参数的类型方法
static func setDesc(desc:String){

self.desc = desc
}
}

Season2.info()
Season2.setDesc(&amp;quot;描述季节变化的枚举&amp;quot;)
print(Season2.desc)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;类的类型方法&quot;&gt;&lt;a href=&quot;#类的类型方法&quot; class=&quot;headerlink&quot; title=&quot;类的类型方法&quot;&gt;&lt;/a&gt;类的类型方法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Math {

   //类不允许定义类型存储属性，使用类型计算属性代替
class var pi:Double {
    return 3.1415926535
}

class func abs(value:Double)-&amp;gt;Double {
    return value&amp;lt;0 ? -value:value
}

//定义类型方法，取消第二个形参的外部形参名
class func pow(base:Double,_ exponent:Int)-&amp;gt;Double {
    var result = 1.0
    for idx in 1...exponent{
    result *= base
    }
    return result
}

//定义类型方法，类型方法可直接访问类型属性
class func radian2Degre(radian:Double)-&amp;gt;Double {
    return radian * 180/pi
}

//定义类型方法，类型方法可通过self引用类型属性
class func degree2Radian(degree:Double)-&amp;gt;Double {
    return degree * self.pi/180
}
}

print(Math.pi)
print(Math.pow(2, 4))
print(Math.radian2Degre(1.57))
print(Math.degree2Radian(45))
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;构造器&quot;&gt;&lt;a href=&quot;#构造器&quot; class=&quot;headerlink&quot; title=&quot;构造器&quot;&gt;&lt;/a&gt;构造器&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Swift的构造器构造出来的实例由系统隐式返回&lt;/li&gt;
&lt;li&gt;构造器的作用完成每个类，结构体中实例存储属性的初始化&lt;/li&gt;
&lt;li&gt;为实例存储属性赋初始值的时机:1.定义实例存储属性时指定初始值。2.在构造器中为实例存储属性指定初始值.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;实例存储属性的初始化分类&quot;&gt;&lt;a href=&quot;#实例存储属性的初始化分类&quot; class=&quot;headerlink&quot; title=&quot;实例存储属性的初始化分类&quot;&gt;&lt;/a&gt;实例存储属性的初始化分类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;定义实例存储属性时显示指定了初始值&lt;/li&gt;
&lt;li&gt;实例存储属性的类型为可选类型&lt;/li&gt;
&lt;li&gt;系统提供的默认构造器为实例存储属性分配初始值&lt;/li&gt;
&lt;li&gt;显式提供的构造器为实例存储属性分配初始值&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;类和结构体的构造器&quot;&gt;&lt;a href=&quot;#类和结构体的构造器&quot; class=&quot;headerlink&quot; title=&quot;类和结构体的构造器&quot;&gt;&lt;/a&gt;类和结构体的构造器&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;swift只为类提供一个无参数的构造器&lt;/li&gt;
&lt;li&gt;swift为结构体提供两个构造器:无参数的构造器和初始化所有实例存储属性的构造器&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;可能失败的构造器&quot;&gt;&lt;a href=&quot;#可能失败的构造器&quot; class=&quot;headerlink&quot; title=&quot;可能失败的构造器&quot;&gt;&lt;/a&gt;可能失败的构造器&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;可能失败的构造器:使用Init？或者!关键字进行定义&lt;/li&gt;
&lt;li&gt;在构造器执行体中使用return nil 来表示构造器失败&lt;/li&gt;
&lt;li&gt;Swift不允许定义两个相同形参列表的构造器。即使一个是可能失败的构造器，一个是普通的构造器也不行&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;构造器的外部形参名&quot;&gt;&lt;a href=&quot;#构造器的外部形参名&quot; class=&quot;headerlink&quot; title=&quot;构造器的外部形参名&quot;&gt;&lt;/a&gt;构造器的外部形参名&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;struct FkPoint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var left: Int = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var top: Int = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义带两个参数的构造器，并为第二个构造器参数显式指定外部形参名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(left: Int , y top: Int)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.left = left&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.top = top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 第一个形参的外部形参名与局部形参名相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 第二个形参的外部形参名使用显式指定的形参名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var p1 = FkPoint(left:20 , y:12)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;取消构造器的外部形参名&quot;&gt;&lt;a href=&quot;#取消构造器的外部形参名&quot; class=&quot;headerlink&quot; title=&quot;取消构造器的外部形参名&quot;&gt;&lt;/a&gt;取消构造器的外部形参名&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Person&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name: String?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var gender: String?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var age = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 由于该类中前2个实例存储属性使用了可选类型，后1个实例存储属性指定了初始值，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 因此该结构体对构造器没有要求，故此处可随便定义一个带参数的构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 取消构造器参数的外部形参名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(_ name:String , _ gender:String)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.gender = gender&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 调用构造器时无需使用外部形参名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var p = Person(&amp;quot;孙悟空&amp;quot; , &amp;quot;男&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(p.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(p.gender)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(p.age)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;在构造过程中常量属性是可以修改的&quot;&gt;&lt;a href=&quot;#在构造过程中常量属性是可以修改的&quot; class=&quot;headerlink&quot; title=&quot;在构造过程中常量属性是可以修改的&quot;&gt;&lt;/a&gt;在构造过程中常量属性是可以修改的&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class User&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let maxAge = 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name: String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(maxAge: Int , name :String) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      println(self.maxAge)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.maxAge = Int.max&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      println(self.maxAge)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.maxAge = maxAge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var u = User(maxAge:120 , name:&amp;quot;白骨精&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(u.maxAge)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(u.name)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用闭包或函数为属性设置初始值&quot;&gt;&lt;a href=&quot;#使用闭包或函数为属性设置初始值&quot; class=&quot;headerlink&quot; title=&quot;使用闭包或函数为属性设置初始值&quot;&gt;&lt;/a&gt;使用闭包或函数为属性设置初始值&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;struct ClosureInit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 使用闭包对test实例存储属性执行初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var test: Int = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var dt = NSDate()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var gregorian = NSCalendar.currentCalendar()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 定义一个时间字段的旗标，指定将会获取指定月、日信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var unitFlags = NSCalendarUnit.CalendarUnitMonth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | NSCalendarUnit.CalendarUnitDay&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var comp = gregorian.components(unitFlags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    , fromDate:dt)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 获取当前的月份&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var month = Int(comp.month)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 获取当前第几日&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var day = Int(comp.day)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 得到计算结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return day - month&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var ci = ClosureInit()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(ci.test)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;值类型的构造器重载&quot;&gt;&lt;a href=&quot;#值类型的构造器重载&quot; class=&quot;headerlink&quot; title=&quot;值类型的构造器重载&quot;&gt;&lt;/a&gt;值类型的构造器重载&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;struct ConstructorOverload &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name: String!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var amount: Int!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 提供无参数的构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init()&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 提供带两个参数的构造器来完成构造过程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name: String, amount: Int)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.amount = amount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 通过无参数构造器创建ConstructorOverload实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var oc1 = ConstructorOverload()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 通过有参数构造器创建ConstructorOverload实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var oc2 = ConstructorOverload(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name:&amp;quot;HelloWorld&amp;quot;,amount:800000)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(&amp;quot;\(oc1.name)  \(oc1.amount)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(&amp;quot;\(oc2.name)  \(oc2.amount)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;构造器代理：&quot;&gt;&lt;a href=&quot;#构造器代理：&quot; class=&quot;headerlink&quot; title=&quot;构造器代理：&quot;&gt;&lt;/a&gt;构造器代理：&lt;/h2&gt;&lt;p&gt;在定义构造器时，通过self.init(实参)调用其他构造器来完成实例的部分构造过程*/&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;struct Apple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name: String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var color: String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var weight: Double!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(_ name: String , _ color:String)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.color = color&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 两个参数的构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name: String , color:String)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.init(name , color)  // 构造器代理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 为构造器显式指定外部形参名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(appleName n: String , appleColor c:String)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //		name = &amp;quot;临时值&amp;quot; // 这行代码将导致错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.init(n , c)  // 构造器代理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 调用构造器代理之后，即可通过self访问该实例的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println(&amp;quot;--执行显式指定外部形参名的构造器--\(self.name)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 定义三个参数的构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(name: String , color: String , weight: Double)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.init(name , color)  // 构造器代理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.weight = weight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var ap1 = Apple(&amp;quot;红富士&amp;quot; , &amp;quot;粉红色&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(&amp;quot;\(ap1.name)---&amp;gt;\(ap1.color)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var ap2 = Apple(appleName:&amp;quot;青苹果&amp;quot; , appleColor:&amp;quot;绿色&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(&amp;quot;\(ap2.name)---&amp;gt;\(ap2.color)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var ap3 = Apple(name:&amp;quot;美国苹果&amp;quot; , color:&amp;quot;红色&amp;quot; , weight:0.45)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;可能失败的构造器-1&quot;&gt;&lt;a href=&quot;#可能失败的构造器-1&quot; class=&quot;headerlink&quot; title=&quot;可能失败的构造器&quot;&gt;&lt;/a&gt;可能失败的构造器&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;struct Cat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let name: String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        init?(name: String) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 如果传入的name参数为空字符串，构造器失败，返回nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if name.isEmpty &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let c1 = Cat(name: &amp;quot;Kitty&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if c1 != nil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 创建c1的构造器是init?，因此程序必须对c1执行强制解析&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;quot;c1的name为：\(c1!.name)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let c2 = Cat(name: &amp;quot;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(c2 == nil) // 输出true，表明c2为nil&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;enum Season&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    case Spring, Summer, Autumn, Winter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 使用init!定义可能失败的构造器，则该构造器创建的实例可进行隐式解析&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init!(name: Character) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 根据传入的构造器参数选择相应的枚举成员&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        switch name &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case &amp;quot;S&amp;quot;,&amp;quot;s&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self = .Spring&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case &amp;quot;U&amp;quot;, &amp;quot;u&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self = .Summer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case &amp;quot;A&amp;quot;, &amp;quot;a&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self = .Autumn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        case &amp;quot;W&amp;quot;, &amp;quot;w&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self = .Winter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 如果传入其他参数，构造失败，返回nil。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let s1 = Season(name: &amp;quot;s&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if s1 != nil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;Season实例构造成功！&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let s2 = Season(name: &amp;quot;x&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(s2 == nil)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;Swift只为类提供一个无参数的构造器。&lt;/li&gt;
&lt;li&gt;Swift为结构体提供两个构造器：无参数的构造器和初始化所有实例存储属性的构造器。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;可选链&quot;&gt;&lt;a href=&quot;#可选链&quot; class=&quot;headerlink&quot; title=&quot;可选链&quot;&gt;&lt;/a&gt;可选链&lt;/h1&gt;&lt;h2 id=&quot;可选类型&quot;&gt;&lt;a href=&quot;#可选类型&quot; class=&quot;headerlink&quot; title=&quot;可选类型&quot;&gt;&lt;/a&gt;可选类
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift面向对象基础（中）</title>
    <link href="http://jackliu17.github.io/2016/03/12/Swift%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
    <id>http://jackliu17.github.io/2016/03/12/Swift面向对象基础（中）/</id>
    <published>2016-03-12T01:04:36.000Z</published>
    <updated>2016-03-12T11:25:37.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;存储属性和计算属性&quot;&gt;&lt;a href=&quot;#存储属性和计算属性&quot; class=&quot;headerlink&quot; title=&quot;存储属性和计算属性&quot;&gt;&lt;/a&gt;存储属性和计算属性&lt;/h1&gt;&lt;h2 id=&quot;存储属性&quot;&gt;&lt;a href=&quot;#存储属性&quot; class=&quot;headerlink&quot; title=&quot;存储属性&quot;&gt;&lt;/a&gt;存储属性&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;存储在类，结构体里的变量或者常量&lt;/li&gt;
&lt;li&gt;实例存储属性：单个实例的状态数据。类型存储属性：类，结构体，枚举&lt;/li&gt;
&lt;li&gt;所有的存储属性必须显式的指定初始值，在定义时或者构造器当中指定&lt;/li&gt;
&lt;li&gt;可选类型的存储属性可以不指定初始值&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;结构体中实例存储属性的规则&quot;&gt;&lt;a href=&quot;#结构体中实例存储属性的规则&quot; class=&quot;headerlink&quot; title=&quot;结构体中实例存储属性的规则&quot;&gt;&lt;/a&gt;结构体中实例存储属性的规则&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;struct LengthRange {
var start: Int
//定义常量存储属性，可以不指定初始值
let length:Int
}

var len = LengthRange(start:9, length:3)
//通过构造器参数完成实例存储属性的初始化
println(&amp;quot;len的起点为\(en.start),长度为\(en.length)&amp;quot;)


len.start = 2
len.length = 4 //这个会报错，因为是常量，常量是不能修改的
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;程序为所有的实例存储属性指定了初始值，且没有构造器，则系统会提供两个构造器：一个无参数的构造器和一个初始化所有实例存储属性的构造器。&lt;/li&gt;
&lt;li&gt;没有初始值和构造器，系统提供一个初始化所有实例存储属性的构造器。   &lt;/li&gt;
&lt;li&gt;有构造器，则程序必须为结构体中的所有存储属性提供初始值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;结构体常量与实例属性&quot;&gt;&lt;a href=&quot;#结构体常量与实例属性&quot; class=&quot;headerlink&quot; title=&quot;结构体常量与实例属性&quot;&gt;&lt;/a&gt;结构体常量与实例属性&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;struct LengthRange2{
var start: Int
var length:Int
}

let len2 = LengthRange(start:1, length:5)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;延迟存储属性&quot;&gt;&lt;a href=&quot;#延迟存储属性&quot; class=&quot;headerlink&quot; title=&quot;延迟存储属性&quot;&gt;&lt;/a&gt;延迟存储属性&lt;/h2&gt;&lt;p&gt;第一次被调用时才会被计算初始值的属性，用lazy修饰符&lt;/p&gt;
&lt;h2 id=&quot;计算属性&quot;&gt;&lt;a href=&quot;#计算属性&quot; class=&quot;headerlink&quot; title=&quot;计算属性&quot;&gt;&lt;/a&gt;计算属性&lt;/h2&gt;&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[修饰符]var计算属性名:属性类型{
get{
//get方法执行体，该方法一定要有返回值
}

set(形参名){
setter方法执行体，该方法一定不能有返回值
}

}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;例子1&quot;&gt;&lt;a href=&quot;#例子1&quot; class=&quot;headerlink&quot; title=&quot;例子1&quot;&gt;&lt;/a&gt;例子1&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;class User{
var first:String = &amp;quot;&amp;quot;
var last:String = &amp;quot;&amp;quot;

//定义计算属性
var fullName:String{

//定义计算属性的getter方法，该方法的返回值由first,last两个存储属性决定
gett{
   return first + &amp;quot;-&amp;quot; + last
}

//定义计算属性的setter方法
//该setter方法将负责改变该实例的first,last两个存储属性
set (newValue){
  var names = newValue.componentsSeparateByString(&amp;quot;-&amp;quot;)
  self.first = names[0]
  self.last = names [1]
}

}

init(first:String, last:String){
   self.first = first
   self.last = last
}

}


let s = User(first:&amp;quot;极客&amp;quot;，last:&amp;quot;Hello&amp;quot;)
println(s.fullName) //结果是：极客-Hello


s.fullName = &amp;quot;极客-学院&amp;quot;
println(s.first)  //outcome is 极客
println(s.last)   //结果是 学院
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;例子2-只读属性&quot;&gt;&lt;a href=&quot;#例子2-只读属性&quot; class=&quot;headerlink&quot; title=&quot;例子2 只读属性&quot;&gt;&lt;/a&gt;例子2 只读属性&lt;/h3&gt;&lt;p&gt;无需set部分，可以省略get和花括号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class User{
var first:String = &amp;quot;&amp;quot;
var last:String = &amp;quot;&amp;quot;

//定义计算属性
var fullName:String{

//定义计算属性的getter方法，该方法的返回值由first,last两个存储属性决定
   return first + &amp;quot;-&amp;quot; + last

}

init(first:String, last:String){
   self.first = first
   self.last = last
}

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;属性观察者&quot;&gt;&lt;a href=&quot;#属性观察者&quot; class=&quot;headerlink&quot; title=&quot;属性观察者&quot;&gt;&lt;/a&gt;属性观察者&lt;/h2&gt;&lt;h3 id=&quot;语法-1&quot;&gt;&lt;a href=&quot;#语法-1&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[修饰符]var 计算属性名：属性类型 = 初始值 {
  willSet (newValue){
  //属性即将被赋值之前自动调用的方法

  }

  didSet(oldValue){
  //属性被赋值完成之后自动调用的方法

  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：willSet和didSet后面的参数名都可以身略&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;除了延迟存储属性之外的所有存储属性（包括实例存储属性和类型存储属性）&lt;/li&gt;
&lt;li&gt;可通过重载方式为继承得到的属性（包括存储属性和计算属性）添加属性观察者。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;class Person {
  //定义存储属性
  var name: String = &amp;quot;&amp;quot;{
    willSet{
      if(countElements(newValue)&amp;gt;6)||(countElements(newValue)&amp;lt;2){
        println(&amp;quot;您设置的人名\(newValue)不符合要求，请重新设置！&amp;quot;)
      }else{
        println(&amp;quot;人名设置符合要求，设置成功&amp;quot;)
      }
    }

    didSet{
        println(&amp;quot;人名设置完成，被修改的原名为：\(oldValue)&amp;quot;)
    }
  }

  var age: Int = 0{

      willSet{

        if newValue&amp;gt;100 || newValue &amp;lt;0{

           println(&amp;quot;您设置的年龄\(newValue)不符合要求，请重新设置！&amp;quot;)

        }else{

           println(&amp;quot;年龄设置符合要求，设置成功&amp;quot;)

        }
      }

      didSet {

           println(&amp;quot;年龄设置完成，被修改的年龄为：\(oldValue)&amp;quot;)

      }
  }
}

var p = Person()
p.age = 999  //不成功的设置
p.age = 10 // 成功的设置
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Swift中的方法&quot;&gt;&lt;a href=&quot;#Swift中的方法&quot; class=&quot;headerlink&quot; title=&quot;Swift中的方法&quot;&gt;&lt;/a&gt;Swift中的方法&lt;/h1&gt;&lt;h2 id=&quot;方法的所属性&quot;&gt;&lt;a href=&quot;#方法的所属性&quot; class=&quot;headerlink&quot; title=&quot;方法的所属性&quot;&gt;&lt;/a&gt;方法的所属性&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;定义方法需要在类型（枚举，结构体，类）里下定义，不能独立定义&lt;/li&gt;
&lt;li&gt;方法要么属于该类型本身，要么是该类型的一个实例&lt;/li&gt;
&lt;li&gt;不能独立执行方法，执行方法必须使用类型或实例作为调用者&lt;/li&gt;
&lt;li&gt;枚举，结构体中方法使用static修饰，类中用class修饰，都属于类型方法，否则的话属于实例方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;将方法转换为函数&quot;&gt;&lt;a href=&quot;#将方法转换为函数&quot; class=&quot;headerlink&quot; title=&quot;将方法转换为函数&quot;&gt;&lt;/a&gt;将方法转换为函数&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class SomeClass {

func test() {
  println(&amp;quot;==test 方法==&amp;quot;)
}

class func bar(#msg:String) {
  println(&amp;quot;==bar类型方法==，传入的参数为:\(msg)&amp;quot;)
}
}

var sc = SomeClass()     //创建实例
var f1:()-&amp;gt;()=sc.test    //将sc的test方法分离成函数

var f2:(String) -&amp;gt; Void = SomeClass.bar    //将sc的bar方法分离成函数
f1()    //等价于sc.test()
f2(&amp;quot;极客&amp;quot;)  //等价于SomeClass.bar(msg:&amp;quot;Geek&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;方法的外部形参名&quot;&gt;&lt;a href=&quot;#方法的外部形参名&quot; class=&quot;headerlink&quot; title=&quot;方法的外部形参名&quot;&gt;&lt;/a&gt;方法的外部形参名&lt;/h2&gt;&lt;p&gt;默认除第一个参数外都添加了外部参数名，与局部参数名一样，如果不需要的话，则用_下划线的方式去掉&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Person {

   var name:String

   init(name:String){

     self.name = name

   }

   func eat (food:String, _drink:String, cigarette:String){

     println(&amp;quot;\(self.name)吃着\(food),喝着\(drink),抽着\(cigarette)&amp;quot;)

   }
}

var p = Person(name:&amp;quot;Tom&amp;quot;)
p.eat(&amp;quot;烤鸭&amp;quot;，“啤酒”，cigarette:&amp;quot;雪茄&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;值类型的可变方法&quot;&gt;&lt;a href=&quot;#值类型的可变方法&quot; class=&quot;headerlink&quot; title=&quot;值类型的可变方法&quot;&gt;&lt;/a&gt;值类型的可变方法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;struct JKRect {
  var x: Int
  var y: Int
  var width:Int
  var height:Int
  mutating func moveByX(x:Int,y:Int){
    self.x += x
    self.y += y
  }
}

var rect = JKRect(x:20, y:12, width:200, height:300)   //创建实例
rect.moveByX(100, y:90)   //调用mutating方法，该方法可以改变rect实例的存储属性
println(“rect矩形的左上角的x坐标为：\(rect.x),y坐标为:\(rect.y)”)
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;将mutating关键字放在func之前，即将该方法声明为可变方法&lt;/li&gt;
&lt;li&gt;常量类型的结构体，枚举是不可变的&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;属性和方法的统一&quot;&gt;&lt;a href=&quot;#属性和方法的统一&quot; class=&quot;headerlink&quot; title=&quot;属性和方法的统一&quot;&gt;&lt;/a&gt;属性和方法的统一&lt;/h1&gt;&lt;p&gt;使用函数类型定义存储属性，并将函数或者闭包作为该属性的初始值，这个属性就成了方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func factorial(n:Int) -&amp;gt; Int {
var result = 1
for i in 1...n {
   result *= i
}
return result 
}

struct SomeStruct {
var info:() -&amp;gt; Void = {
  println(&amp;quot;info方法&amp;quot;)
}

//将全局函数作为fact存储属性的初始值
static var fact:(Int) -&amp;gt; Int = factorial
}

var sc = SomeStruct()
//调用info方法
sc.info()  //outcome is info方法

//使用闭包对sc对象的info赋值，相当于重新定义sc的info方法
sc.info = {
  println(&amp;quot;另外一个闭包&amp;quot;)
}

sc.info()  //outcome is 另外一个闭包

var n = 6

//调用fact方法，执行的是阶乘 
println(&amp;quot;\(n)的阶乘是：\(SomeStruct.fact(6))&amp;quot;) //Outcome is 720

//使用闭包对SomeStruct的fact赋值，相当于重新定义SomeStruct的fact方法

SomeStruct.fact = {
  var result = 1
  for i in 1...$0 {
     result += i
  }
  return result
}

//再次调用fact方法，执行的是累加
println(&amp;quot;\(n)的累加的和是:\(SomeStruct.fact(6))&amp;quot;) //outcome is 22
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;下标&quot;&gt;&lt;a href=&quot;#下标&quot; class=&quot;headerlink&quot; title=&quot;下标&quot;&gt;&lt;/a&gt;下标&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;所有的Swift类型（枚举，类，结构体）都支持定义下标&lt;/li&gt;
&lt;li&gt;同一个类型可以定义多个下标&lt;/li&gt;
&lt;li&gt;通过下标的形参列表或者返回值类型来区分不同的下标&lt;/li&gt;
&lt;li&gt;同一类型中定义多个不同的下标被称为下标重载&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;下标的基本用法&quot;&gt;&lt;a href=&quot;#下标的基本用法&quot; class=&quot;headerlink&quot; title=&quot;下标的基本用法&quot;&gt;&lt;/a&gt;下标的基本用法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Subscripe(形参列表) -&amp;gt;下标返回值类型 {

get {
  //getter方法执行体，该方法必须有返回值
}

set(形参名){
  //setter方法执行体，该方法不能有返回值
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;下标语法格式说明&quot;&gt;&lt;a href=&quot;#下标语法格式说明&quot; class=&quot;headerlink&quot; title=&quot;下标语法格式说明&quot;&gt;&lt;/a&gt;下标语法格式说明&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;形参列表：与函数的形参列表的用法基本相同，但是不支持指定外部参数和默认值&lt;/li&gt;
&lt;li&gt;下标的返回值类型：可以是任何有效的类型&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;struct JKRect2{
  var x:Int
  var y:Int
  var width:Int
  var height:Int

  //定义下标，指定下标只接受一个Int类型的参数，下标的返回类型为Int

  subscript(index:Int) -&amp;gt;Int {

    get{
        switch(index){
        case 0:
           return self.x
        case 1:
           return self.y
        case 2:
           return self.width
        case 3:
           return self.height
        default:
           println(&amp;quot;不支持该索引值&amp;quot;)
           return 0
        }
    }

    set{
         switch(index){
         case 0:
            self.x = newValue
         case 1:
            self.y = newValue
         case 2:
            self.width = newValue
         case 3:
            self.height = newValue
         default:
            println(&amp;quot;不支持该索引值&amp;quot;)
         }
    }
  }
}

//创建实例
var rect2 = JKRect2(x:20,y:12,width:200,height:300)

//通过下标进行赋值
rect2[0] = 40
rect2[1] = 67

//通过下标访问rect的属性
println(&amp;quot;rect2矩形的左上角的x坐标为:\(rect2[0]),y坐标为:\(rect2[1])&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;存储属性和计算属性&quot;&gt;&lt;a href=&quot;#存储属性和计算属性&quot; class=&quot;headerlink&quot; title=&quot;存储属性和计算属性&quot;&gt;&lt;/a&gt;存储属性和计算属性&lt;/h1&gt;&lt;h2 id=&quot;存储属性&quot;&gt;&lt;a href=&quot;#存储属性&quot; class=&quot;headerli
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift面向对象基础(上)</title>
    <link href="http://jackliu17.github.io/2016/03/11/Swift%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80(%E4%B8%8A)/"/>
    <id>http://jackliu17.github.io/2016/03/11/Swift面向对象基础(上)/</id>
    <published>2016-03-11T07:06:33.000Z</published>
    <updated>2016-03-12T01:02:04.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;面向对象的特点&quot;&gt;&lt;a href=&quot;#面向对象的特点&quot; class=&quot;headerlink&quot; title=&quot;面向对象的特点&quot;&gt;&lt;/a&gt;面向对象的特点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;面向对象的核心：类和对象&lt;/li&gt;
&lt;li&gt;面向对象编程的三大特征：封装，继承，和多态&lt;/li&gt;
&lt;li&gt;Swift可以定义枚举，结构体，和类三种面向对象的类型&lt;/li&gt;
&lt;li&gt;支持定义存储属性，计算属性，方法，下标，构造器和嵌套类型&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;枚举&quot;&gt;&lt;a href=&quot;#枚举&quot; class=&quot;headerlink&quot; title=&quot;枚举&quot;&gt;&lt;/a&gt;枚举&lt;/h1&gt;&lt;h2 id=&quot;枚举定义&quot;&gt;&lt;a href=&quot;#枚举定义&quot; class=&quot;headerlink&quot; title=&quot;枚举定义&quot;&gt;&lt;/a&gt;枚举定义&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用于管理一组有限的值的集合&lt;/li&gt;
&lt;li&gt;支持计算属性&lt;/li&gt;
&lt;li&gt;支持实例方法和类方法&lt;/li&gt;
&lt;li&gt;支持定义构造器来完成初始化&lt;/li&gt;
&lt;li&gt;支持扩展和协议&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;枚举语法&quot;&gt;&lt;a href=&quot;#枚举语法&quot; class=&quot;headerlink&quot; title=&quot;枚举语法&quot;&gt;&lt;/a&gt;枚举语法&lt;/h2&gt;&lt;p&gt;enum 枚举名 {&lt;br&gt;  //使用case关键字列出所有枚举值&lt;br&gt;  //枚举的其他成员&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h2 id=&quot;定义枚举&quot;&gt;&lt;a href=&quot;#定义枚举&quot; class=&quot;headerlink&quot; title=&quot;定义枚举&quot;&gt;&lt;/a&gt;定义枚举&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//方法1
enum Season {
   case Spring
   case Summer
   case Fall
   case Winter
}

//方法2
enum Season2 {
   case Spring, Summer, Fall, Winter
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;使用枚举声明变量&quot;&gt;&lt;a href=&quot;#使用枚举声明变量&quot; class=&quot;headerlink&quot; title=&quot;使用枚举声明变量&quot;&gt;&lt;/a&gt;使用枚举声明变量&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var weather: Season
weather = .Summer
println(weather)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;枚举值和switch语句&quot;&gt;&lt;a href=&quot;#枚举值和switch语句&quot; class=&quot;headerlink&quot; title=&quot;枚举值和switch语句&quot;&gt;&lt;/a&gt;枚举值和switch语句&lt;/h2&gt;&lt;p&gt;switch中的case没有覆盖枚举的所有值，必须添加default语句&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var chooseDay = Season.Fall

switch(chooseDay){
case .Spring:
  println(&amp;quot;This is spring&amp;quot;)
case .Summer:
  println(&amp;quot;This is summer&amp;quot;)

default:
  println(&amp;quot;At home&amp;quot;)

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;原始值&quot;&gt;&lt;a href=&quot;#原始值&quot; class=&quot;headerlink&quot; title=&quot;原始值&quot;&gt;&lt;/a&gt;原始值&lt;/h2&gt;&lt;p&gt;enum 枚举名：原始值类型{&lt;br&gt;   case 枚举值 = 原始值&lt;br&gt;}&lt;/p&gt;
&lt;h3 id=&quot;整型的枚举&quot;&gt;&lt;a href=&quot;#整型的枚举&quot; class=&quot;headerlink&quot; title=&quot;整型的枚举&quot;&gt;&lt;/a&gt;整型的枚举&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;//可以自动推断，不用每个都赋予原始值
enum Weekday: Int{
  case Mon, Tur, Wen = 3, Thur, Fri, Sat , Sun

}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;字符串枚举&quot;&gt;&lt;a href=&quot;#字符串枚举&quot; class=&quot;headerlink&quot; title=&quot;字符串枚举&quot;&gt;&lt;/a&gt;字符串枚举&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;//必须每个都赋予原始值，因为不能自动推断
enum Season3: Character{
  case Spring = &amp;quot;春天&amp;quot;
  case Summer = &amp;quot;夏天&amp;quot;
  case Fall = &amp;quot;秋天&amp;quot;
  case Winter = &amp;quot;冬天&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;获取原始值&quot;&gt;&lt;a href=&quot;#获取原始值&quot; class=&quot;headerlink&quot; title=&quot;获取原始值&quot;&gt;&lt;/a&gt;获取原始值&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;println(Weekday.Fri.rawvalue)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;获取枚举值&quot;&gt;&lt;a href=&quot;#获取枚举值&quot; class=&quot;headerlink&quot; title=&quot;获取枚举值&quot;&gt;&lt;/a&gt;获取枚举值&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var mySeason = Season3(rawValue:&amp;quot;春天&amp;quot;)
if mySeason != nil {
  switch(mySeason!){ //不为空才能进行强制解析
  case .Spring:
    println(&amp;quot;春天不是读书天&amp;quot;)
  case .Summer:
    println(&amp;quot;夏天炎炎正好眠&amp;quot;)
  case .Fall , .Winter:
    println(&amp;quot;秋多蚊蝇冬日冷&amp;quot;)
  default:
    println(&amp;quot;读书只好等明年&amp;quot;)

  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;关联值&quot;&gt;&lt;a href=&quot;#关联值&quot; class=&quot;headerlink&quot; title=&quot;关联值&quot;&gt;&lt;/a&gt;关联值&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;enum Planet {
case Earth(weight: Double , name:String)
case Mars (density: Double, name: String, weight:Double)
case Venus(Double, String)
case Saturn
case Neptune
}

var p1 = Planet.Earth(weight:1.0, name:&amp;quot;地球&amp;quot;)
var p2 = Planet.Venus(0.815,&amp;quot;金星&amp;quot;)
var p3 = Planet.Mars(density:3.95, name:&amp;quot;火星&amp;quot;,weight:0.1)

switch (p3){
//将关联值绑定到变量或者常量来提取
case Planet.Earth(var weight , var name):
   println(&amp;quot;此行星的名字为:\(name),质量相当于\(weight)个地球&amp;quot;)

//将关联值都提取为常量或者变量，只将一个var或者let放在枚举成员之前
case let Planet.Mars(density:d, name:n, weight:w):
   println(&amp;quot;此行星的名字为:\(n),质量相当于\(w)个地球，密度为\(d)&amp;quot;)
default:
   break
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;类和结构体&quot;&gt;&lt;a href=&quot;#类和结构体&quot; class=&quot;headerlink&quot; title=&quot;类和结构体&quot;&gt;&lt;/a&gt;类和结构体&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;这两个非常相似&lt;/li&gt;
&lt;li&gt;主要区别在于结构体和枚举不支持继承，只有类才有继承&lt;/li&gt;
&lt;li&gt;结构体和枚举是值类型&lt;/li&gt;
&lt;li&gt;类是引用类型&lt;/li&gt;
&lt;li&gt;只有类的实例可以称为对象&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;h3 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[修饰符]class类名 {
零到多个构造器
零到多个属性
零到多个方法
零到多个下标
}
修饰符可以是private ,public, internal,final

class Person {
var name: String = &amp;quot;Jack&amp;quot;
var age: Int = 0
func say(content: String)
{
   println(content)
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;结构体&quot;&gt;&lt;a href=&quot;#结构体&quot; class=&quot;headerlink&quot; title=&quot;结构体&quot;&gt;&lt;/a&gt;结构体&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[修饰符]struct 结构体名 {

}
修饰符可以是private , public, internal

struct Dog{

var name: String
var age: Int
func run(){

println(&amp;quot;\(name)在奔跑&amp;quot;)
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;定义属性的语法&quot;&gt;&lt;a href=&quot;#定义属性的语法&quot; class=&quot;headerlink&quot; title=&quot;定义属性的语法&quot;&gt;&lt;/a&gt;定义属性的语法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[修饰符]var或者let 存储属性:类型名字 = 初始值
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;定义构造器语法&quot;&gt;&lt;a href=&quot;#定义构造器语法&quot; class=&quot;headerlink&quot; title=&quot;定义构造器语法&quot;&gt;&lt;/a&gt;定义构造器语法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[修饰符]init(形参列表){
//零到多条可执行语句组成的构造器执行体
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;定义方法的语法&quot;&gt;&lt;a href=&quot;#定义方法的语法&quot; class=&quot;headerlink&quot; title=&quot;定义方法的语法&quot;&gt;&lt;/a&gt;定义方法的语法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[修饰符]func 方法名(形参列表) -&amp;gt;返回值类型 {
//零到多条可执行语句
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;创建实例&quot;&gt;&lt;a href=&quot;#创建实例&quot; class=&quot;headerlink&quot; title=&quot;创建实例&quot;&gt;&lt;/a&gt;创建实例&lt;/h2&gt;&lt;h3 id=&quot;类-1&quot;&gt;&lt;a href=&quot;#类-1&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var p: Person
p = Person() //等价于 var p = Person()
println(p.name)
p.say(“Hello world”)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;结构体-1&quot;&gt;&lt;a href=&quot;#结构体-1&quot; class=&quot;headerlink&quot; title=&quot;结构体&quot;&gt;&lt;/a&gt;结构体&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var dog = Dog(name:&amp;quot;Wangcai&amp;quot;, age:2)
println(dog.name)
dog.run()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;值类型与引用类型&quot;&gt;&lt;a href=&quot;#值类型与引用类型&quot; class=&quot;headerlink&quot; title=&quot;值类型与引用类型&quot;&gt;&lt;/a&gt;值类型与引用类型&lt;/h2&gt;&lt;h3 id=&quot;引用类型&quot;&gt;&lt;a href=&quot;#引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型&quot;&gt;&lt;/a&gt;引用类型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var p2 =p
p2.name = &amp;quot;Rose&amp;quot;
println(p.name)
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;内存里的对象可以有多个引用，即多个引用变量指向同一个对象&lt;/li&gt;
&lt;li&gt;如果一个引用更改了，那对象里的值也会更改。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;值类型&quot;&gt;&lt;a href=&quot;#值类型&quot; class=&quot;headerlink&quot; title=&quot;值类型&quot;&gt;&lt;/a&gt;值类型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var dog2 = dog
dog2.name = &amp;quot;snoopy&amp;quot;
println(dog2.name)
println(dog.name)
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;值对象是要复制的&lt;/li&gt;
&lt;li&gt;每个值对象的更改，不会影响其他对象的更改&lt;/li&gt;
&lt;li&gt;因此枚举和结构体是没有继承的  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;引用类型的比较&quot;&gt;&lt;a href=&quot;#引用类型的比较&quot; class=&quot;headerlink&quot; title=&quot;引用类型的比较&quot;&gt;&lt;/a&gt;引用类型的比较&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;class User {
var name: String
var age: Int
init(name: String, age: Int){
  self.name = name
  self.age = age
}
}

var u1 = User(name:&amp;quot;Han&amp;quot;,age:32)
var U2 = User(name:&amp;quot;Han&amp;quot;,age:32)
//虽然传递的值是一样，但是是创建了两个对象

println(u1===u2) //u1与u2引用的不是同一对象,结果是false
println(u1!==u2) //结果是true

var u3 = u1
println(u3===u1) //结果是true
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;=== 这个不能用于值类型的判断&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;self关键字&quot;&gt;&lt;a href=&quot;#self关键字&quot; class=&quot;headerlink&quot; title=&quot;self关键字&quot;&gt;&lt;/a&gt;self关键字&lt;/h3&gt;&lt;h4 id=&quot;方法中的self代表该方法的调用者&quot;&gt;&lt;a href=&quot;#方法中的self代表该方法的调用者&quot; class=&quot;headerlink&quot; title=&quot;方法中的self代表该方法的调用者&quot;&gt;&lt;/a&gt;方法中的self代表该方法的调用者&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;class Dog {  
  func jump(){
    println(&amp;quot;正在执行jump方法&amp;quot;)
  }
  func run(){
  self.jump()
     println(&amp;quot;正在执行run方法&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;构造器中的self代表该构造器正在初始化的实例&quot;&gt;&lt;a href=&quot;#构造器中的self代表该构造器正在初始化的实例&quot; class=&quot;headerlink&quot; title=&quot;构造器中的self代表该构造器正在初始化的实例&quot;&gt;&lt;/a&gt;构造器中的self代表该构造器正在初始化的实例&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;class Person {
    var name: String = &amp;quot;&amp;quot;
    var age: Int = 2

    init(name:String, age:Int){
    self.name = name
    self.age = age
    }

    func info(){
    println(“我的名字是:\(name)年龄是:\(age)”)
    }
}

var person = Person(name:&amp;quot;Lily&amp;quot;,age:10)
person.info()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;类和结构体的选择&quot;&gt;&lt;a href=&quot;#类和结构体的选择&quot; class=&quot;headerlink&quot; title=&quot;类和结构体的选择&quot;&gt;&lt;/a&gt;类和结构体的选择&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;结构体的主要目的是用于封装少量相关的简单数据&lt;/li&gt;
&lt;li&gt;如果需要在传递参数或者赋值时自动复制副本，使用结构体&lt;/li&gt;
&lt;li&gt;明确该类型无须继承另一个已有的类或被其他类继承&lt;/li&gt;
&lt;li&gt;注意，大部分时候，程序应该自定义类而不是自定义结构体。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面向对象的特点&quot;&gt;&lt;a href=&quot;#面向对象的特点&quot; class=&quot;headerlink&quot; title=&quot;面向对象的特点&quot;&gt;&lt;/a&gt;面向对象的特点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;面向对象的核心：类和对象&lt;/li&gt;
&lt;li&gt;面向对象编程的三大特征：封装，继承，和多态&lt;
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift中的函数和闭包</title>
    <link href="http://jackliu17.github.io/2016/03/11/Swift%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E5%92%8C%E9%97%AD%E5%8C%85/"/>
    <id>http://jackliu17.github.io/2016/03/11/Swift中的函数和闭包/</id>
    <published>2016-03-11T01:38:16.000Z</published>
    <updated>2016-03-11T07:06:03.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;h2 id=&quot;定义和调用函数&quot;&gt;&lt;a href=&quot;#定义和调用函数&quot; class=&quot;headerlink&quot; title=&quot;定义和调用函数&quot;&gt;&lt;/a&gt;定义和调用函数&lt;/h2&gt;&lt;p&gt;fun 函数名（形参列表）-&amp;gt; 返回值类型 {&lt;br&gt;//可执行语句组成的函数&lt;br&gt;}&lt;/p&gt;
&lt;h3 id=&quot;两个参数&quot;&gt;&lt;a href=&quot;#两个参数&quot; class=&quot;headerlink&quot; title=&quot;两个参数&quot;&gt;&lt;/a&gt;两个参数&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func sayHello(personName:String)-&amp;gt; String {

  return &amp;quot;Hello ,&amp;quot; + personName + &amp;quot;!&amp;quot;
}

println(sayHello(&amp;quot;Anna&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;没有参数&quot;&gt;&lt;a href=&quot;#没有参数&quot; class=&quot;headerlink&quot; title=&quot;没有参数&quot;&gt;&lt;/a&gt;没有参数&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func sayHellloWorld() -&amp;gt; String{

return &amp;quot;Hello world!&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;函数形参和实参&quot;&gt;&lt;a href=&quot;#函数形参和实参&quot; class=&quot;headerlink&quot; title=&quot;函数形参和实参&quot;&gt;&lt;/a&gt;函数形参和实参&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func max(x:Int, y:Int)-&amp;gt;Int { //这里的xy就是形参

return x&amp;gt;y ? x:y  

}

println(max(3,5)) //这里的3，5是实参
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;局部参数&quot;&gt;&lt;a href=&quot;#局部参数&quot; class=&quot;headerlink&quot; title=&quot;局部参数&quot;&gt;&lt;/a&gt;局部参数&lt;/h3&gt;&lt;p&gt;width,height 不能在调用函数时使用，这是局部参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func area(width:Double, height:Double)-&amp;gt;Double{

return width * height     
}

println(4.5,3.4) //不能传入width, height
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;外部参数名&quot;&gt;&lt;a href=&quot;#外部参数名&quot; class=&quot;headerlink&quot; title=&quot;外部参数名&quot;&gt;&lt;/a&gt;外部参数名&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func area (宽 width:Double ,高 height:Double ) -&amp;gt;Double {

return width * height
}

println (area(宽:3.4,高:4.7)) //宽和高为外部函数名
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;以-代替外部参数名&quot;&gt;&lt;a href=&quot;#以-代替外部参数名&quot; class=&quot;headerlink&quot; title=&quot;以#代替外部参数名&quot;&gt;&lt;/a&gt;以#代替外部参数名&lt;/h3&gt;&lt;p&gt;如果外部参数名和局部参数一样的话，只需要在局部参数前加 #&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func area (#width:Double ,#height:Double ) -&amp;gt;Double {

return width * height
}

println (area(width:3.4,height:4.7)) //width和height为外部函数名
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;可变参数&quot;&gt;&lt;a href=&quot;#可变参数&quot; class=&quot;headerlink&quot; title=&quot;可变参数&quot;&gt;&lt;/a&gt;可变参数&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func sum(numbers:Int...)-&amp;gt;Int &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var total: Int = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for num in numbers &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   total += num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(total)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum(1,3,4,5)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;在参数类型后面添加…表示该参数可以接受多个参数值&lt;/li&gt;
&lt;li&gt;一个函数当中只有一个可变参数,并且位于列表的最后&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;默认参数&quot;&gt;&lt;a href=&quot;#默认参数&quot; class=&quot;headerlink&quot; title=&quot;默认参数&quot;&gt;&lt;/a&gt;默认参数&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; func sayHi(msg:String, name:String=&amp;quot;Lily&amp;quot;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; println (&amp;quot;\(name),\(msg)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sayHi(&amp;quot;Welcome to our city&amp;quot;) //目前只传入了一个参数，如果第二个参数没传入，就使用默认值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sayHi(&amp;quot;Welcome to our city&amp;quot;, name:&amp;quot;Tom&amp;quot;) //如果传入了，就使用传入的新值&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//忽略默认值的外部参数名，添加下划线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     func sayHi(msg:String, _name:String=&amp;quot;Lily&amp;quot;)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      println (&amp;quot;\(name),\(msg)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     sayHi(&amp;quot;Welcome to our city&amp;quot;,&amp;quot;Tom&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;带有默认值的参数是有外部参数名的&lt;/li&gt;
&lt;li&gt;添加下划线就可以忽略&lt;/li&gt;
&lt;li&gt;如果函数里有可变参数也有默认参数，可变参数放在最后面，默认参数出现在次后面&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;常量形参数和变量形参&quot;&gt;&lt;a href=&quot;#常量形参数和变量形参&quot; class=&quot;headerlink&quot; title=&quot;常量形参数和变量形参&quot;&gt;&lt;/a&gt;常量形参数和变量形参&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;//这里的形参是个变量，如果去掉var就是个常量
func factorial(var number:Int) -&amp;gt; Int{
var result:Int = 1
while number &amp;gt; 1 {
  result = result * number
  number--
}
return result
}
println(factorial(3))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;In-out形参&quot;&gt;&lt;a href=&quot;#In-out形参&quot; class=&quot;headerlink&quot; title=&quot;In-out形参&quot;&gt;&lt;/a&gt;In-out形参&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func swap (inout a:Int, inout b:Int){
let tmp = a
a = b
b = tmp
}

var a:Int = 1
var b:Int = 3
swap(&amp;amp;a,&amp;amp;b)
println(“交换之后结果为:a =\(a),b= \(b)”)
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;In-out参数就是强制传递变量的指针&lt;/li&gt;
&lt;li&gt;只能传入变量作为实参&lt;/li&gt;
&lt;li&gt;输入输出不能带有默认值&lt;/li&gt;
&lt;li&gt;如果你用关键字inout标记了一个参数，这个参数不能再用var或者let去标记&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;函数返回值&quot;&gt;&lt;a href=&quot;#函数返回值&quot; class=&quot;headerlink&quot; title=&quot;函数返回值&quot;&gt;&lt;/a&gt;函数返回值&lt;/h2&gt;&lt;h3 id=&quot;void&quot;&gt;&lt;a href=&quot;#void&quot; class=&quot;headerlink&quot; title=&quot;void&quot;&gt;&lt;/a&gt;void&lt;/h3&gt;&lt;p&gt;没有指定返回类型的函数总返回void,在swift中，void可以理解为空元组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func sayHi2(){
println(&amp;quot;welcome&amp;quot;)
}
sayHi2()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;多个返回值&quot;&gt;&lt;a href=&quot;#多个返回值&quot; class=&quot;headerlink&quot; title=&quot;多个返回值&quot;&gt;&lt;/a&gt;多个返回值&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func area(width:Double,height:Double)-&amp;gt;(Double,Double){
var s = width * height
var c = (width + height) * 2
return (s,c)
}
println(area(3.1, 3.4))
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;函数类型&quot;&gt;&lt;a href=&quot;#函数类型&quot; class=&quot;headerlink&quot; title=&quot;函数类型&quot;&gt;&lt;/a&gt;函数类型&lt;/h2&gt;&lt;h3 id=&quot;函数变量&quot;&gt;&lt;a href=&quot;#函数变量&quot; class=&quot;headerlink&quot; title=&quot;函数变量&quot;&gt;&lt;/a&gt;函数变量&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func addTwoInts(a:Int,b:Int)-&amp;gt;Int{

return a+b
}

func multiplyTwoInts(a:Int,b:Int)-&amp;gt;Int{

return a*b
}

var mathFunction:(Int,Int) -&amp;gt; Int = multiplyTwoInts
println(&amp;quot;Result:\(mathFunction(2,3))&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;函数作为参数&quot;&gt;&lt;a href=&quot;#函数作为参数&quot; class=&quot;headerlink&quot; title=&quot;函数作为参数&quot;&gt;&lt;/a&gt;函数作为参数&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func printMathResult(mathFunctioin:(Int,Int)-&amp;gt;Int,a:Int,b:Int){

println(&amp;quot;Result:\(mathFunction(a,b))&amp;quot;)
}

printMathResult(multiplyTwoInts,3,5)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;函数类型作为返回值类型&quot;&gt;&lt;a href=&quot;#函数类型作为返回值类型&quot; class=&quot;headerlink&quot; title=&quot;函数类型作为返回值类型&quot;&gt;&lt;/a&gt;函数类型作为返回值类型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;func squre(num:Int) -&amp;gt;Int{

return num * num
}

func cube(num:Int) -&amp;gt;Int{

return num * num * num
}

func getMathFunc (#type: String)-&amp;gt; (Int) -&amp;gt;Int {
switch (type){
   case &amp;quot;squre&amp;quot;:
   return squre
default:
   return cube
}
}

var mathFunc = getMathFunc(type:&amp;quot;other&amp;quot;)
println(mathFunc(5))
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;函数重载&quot;&gt;&lt;a href=&quot;#函数重载&quot; class=&quot;headerlink&quot; title=&quot;函数重载&quot;&gt;&lt;/a&gt;函数重载&lt;/h2&gt;&lt;p&gt;形参和返回值不一样的同名函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//1.
func test(){
println(&amp;quot;无参数的test()函数&amp;quot;)
}

//2.
func test (msg: String){
println(&amp;quot;重载的test()函数\(msg)&amp;quot;)
}

//3.
func test(msg: String) -&amp;gt; String {
println(&amp;quot;重载的test()函数\(msg),带返回值&amp;quot;)
return &amp;quot;test&amp;quot;
}

//4.
func test(#msg: String){
  println (&amp;quot;重载的test函数，外部参数为\(msg)&amp;quot;)
}

//调用1
test()

//调用4
var result:Void = test(msg:&amp;quot;Jike&amp;quot;)

//调用3
var result2: String = test(&amp;quot;Welcome , Geek&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;嵌套函数&quot;&gt;&lt;a href=&quot;#嵌套函数&quot; class=&quot;headerlink&quot; title=&quot;嵌套函数&quot;&gt;&lt;/a&gt;嵌套函数&lt;/h2&gt;&lt;p&gt;函数体内部所定义的函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func getMathFunc(#type: String) -&amp;gt; (Int) -&amp;gt;Int{

func squre (num:Int) -&amp;gt; Int{

return num * num
}

func cube (num:Int) -&amp;gt;Int{

return num * num * num
}

switch(type){

   case &amp;quot;squre&amp;quot;
   return squre
default:
   return cube
}

}

var mathFunc = getMathFunc (type:&amp;quot;squre&amp;quot;)
println(mathFunc(4)) //outcome is 16

var mathFunc2 = getMathFunc (type:&amp;quot;other&amp;quot;)
println(mathFunc(4)) //outcome is 64
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;闭包表达式&quot;&gt;&lt;a href=&quot;#闭包表达式&quot; class=&quot;headerlink&quot; title=&quot;闭包表达式&quot;&gt;&lt;/a&gt;闭包表达式&lt;/h1&gt;&lt;h2 id=&quot;闭包的写法&quot;&gt;&lt;a href=&quot;#闭包的写法&quot; class=&quot;headerlink&quot; title=&quot;闭包的写法&quot;&gt;&lt;/a&gt;闭包的写法&lt;/h2&gt;&lt;p&gt;{ （形参列表）-&amp;gt; 返回值类型 in&lt;br&gt;   可执行表达式&lt;br&gt;}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func getMathFunc(#type: String) -&amp;gt; (Int) -&amp;gt;Int{

func squre (num:Int) -&amp;gt; Int{

return num * num
}

func cube (num:Int) -&amp;gt;Int{

return num * num * num
}

switch(type){

   case &amp;quot;squre&amp;quot;
   return { (num: Int) -&amp;gt; Int in
      return num * num
   }
default:
   return { (num:Int) -&amp;gt; Int in
      return num * num * num

   }
}

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;闭包的应用&quot;&gt;&lt;a href=&quot;#闭包的应用&quot; class=&quot;headerlink&quot; title=&quot;闭包的应用&quot;&gt;&lt;/a&gt;闭包的应用&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var mathFunc = getMathFunc(type: &amp;quot;squre&amp;quot;)
println(mathFunc(5)) //outcome is 25
mathFunc = getMathFunc (type: &amp;quot;other&amp;quot;)
println(mathFunc(5)) //outcome is 125
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;利用上下文推断类型&quot;&gt;&lt;a href=&quot;#利用上下文推断类型&quot; class=&quot;headerlink&quot; title=&quot;利用上下文推断类型&quot;&gt;&lt;/a&gt;利用上下文推断类型&lt;/h2&gt;&lt;p&gt;Swift可以推断闭包的形参类型和返回值类型&lt;br&gt;函数和闭包是统一的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var squre:(Int) -&amp;gt; Int = {(num) in return num * num}
println(squre(3))   //outcome is 9

//因为可以推断，所以小括号也是可以省略的
var squre:(Int) -&amp;gt; Int = {num in return num * num}
println(squre(3))   //outcome is 9

//省略形参名，通过$0,$1...来引用第一个，第二个参数
var squre:(Int) -&amp;gt; Int = {$0 * $0}
println(squre(3))  //out come is 9

var result: Int = {

var result = 1
for i in 1...$1{
   result *= $0
}
return result
}(4,3)
println(result) //outcome is 64
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;尾随闭包&quot;&gt;&lt;a href=&quot;#尾随闭包&quot; class=&quot;headerlink&quot; title=&quot;尾随闭包&quot;&gt;&lt;/a&gt;尾随闭包&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;func someFunction(num:Int, fn:(Int) -&amp;gt;()){

}

someFunctioin (20,{})

//使用尾随闭包调用函数的格式，将小括号提前
someFunction(20){}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;捕获上下文中的变量或者常量&quot;&gt;&lt;a href=&quot;#捕获上下文中的变量或者常量&quot; class=&quot;headerlink&quot; title=&quot;捕获上下文中的变量或者常量&quot;&gt;&lt;/a&gt;捕获上下文中的变量或者常量&lt;/h2&gt;&lt;p&gt;闭包可以访问或者修改其所在上下文中的变量或常量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func makeArr(ele:String) -&amp;gt; () -&amp;gt; [String]{

//创建一个不包含任何元素的数组
var arr: [String] = []
func addElement() -&amp;gt;[String]{

//向arr数组中添加一个元素
arr.append(ele)

return arr
}

return addElement
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;h2 id=&quot;定义和调用函数&quot;&gt;&lt;a href=&quot;#定义和调用函数&quot; class=&quot;headerlink&quot; title=&quot;定义和调用函数&quot;&gt;&lt;/
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift中的字符串和集合</title>
    <link href="http://jackliu17.github.io/2016/03/10/Swift%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E9%9B%86%E5%90%88/"/>
    <id>http://jackliu17.github.io/2016/03/10/Swift中的字符串和集合/</id>
    <published>2016-03-10T08:26:25.000Z</published>
    <updated>2016-03-11T01:37:50.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;p&gt;Swift中的字符串是结构体，而NSString中的字符串是Class&lt;/p&gt;
&lt;h2 id=&quot;字符类型及表现形式&quot;&gt;&lt;a href=&quot;#字符类型及表现形式&quot; class=&quot;headerlink&quot; title=&quot;字符类型及表现形式&quot;&gt;&lt;/a&gt;字符类型及表现形式&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var s:Character = &amp;quot;美&amp;quot;
var quote1 = &amp;quot;\&amp;apos;&amp;quot;
var quote2 = &amp;quot;\u{22}&amp;quot;
println(&amp;quot;quote1的值为:\(quote1),quote2的值为:\(quote2)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;单个字符来指定字符常量，如“A”，“9”&lt;/li&gt;
&lt;li&gt;转义字符表示特殊字符常量，如”\n”,”\t”&lt;/li&gt;
&lt;li&gt;使用\u{n}的Unicode形式，n代表一个1~8位的十六进制&lt;/li&gt;
&lt;li&gt;必须用双引号包起来&lt;/li&gt;
&lt;li&gt;Swift中的每一个字符代表了一个可扩展字母集&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;字符串的创建&quot;&gt;&lt;a href=&quot;#字符串的创建&quot; class=&quot;headerlink&quot; title=&quot;字符串的创建&quot;&gt;&lt;/a&gt;字符串的创建&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//创建方法1：直接赋值
var str1 = &amp;quot;Jike&amp;quot;
//创建方法2：构造函数
var str2 = String()

//创建多个重复字符的字符串
var str3 = String(count:4,repeatedValue:Character(&amp;quot;a&amp;quot;))
var strRep = String(count:4,repeatedValue:UnicodeScalar(&amp;quot;xxxxx&amp;quot;)) //使用unicode
println(strRep)

//判断字符串是否为空
println(str3.isEmpty)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;字符串的拼接&quot;&gt;&lt;a href=&quot;#字符串的拼接&quot; class=&quot;headerlink&quot; title=&quot;字符串的拼接&quot;&gt;&lt;/a&gt;字符串的拼接&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//拼接方式1.
var str4 = str1 + &amp;quot;College&amp;quot;
str1 += &amp;quot;Hello&amp;quot;
println(str4)

//拼接方式2.
let char:Character = &amp;quot;!&amp;quot;
str1.append(char)
println(str1)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;字符串的字符数量&quot;&gt;&lt;a href=&quot;#字符串的字符数量&quot; class=&quot;headerlink&quot; title=&quot;字符串的字符数量&quot;&gt;&lt;/a&gt;字符串的字符数量&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;println(&amp;quot;str3 has \(countElements(str3)) characters&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;通过调用全局countElement函数，并将字符串作为参数进行传递，可以获取该字符串的字符数量&lt;/li&gt;
&lt;li&gt;Swift中的Unicode16Count函数所获得的值，才是和NSString中的length一样&lt;/li&gt;
&lt;li&gt;Swift中的字符串是否可以修改仅通过定义的是变量还是常量来决定&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;字符串比较&quot;&gt;&lt;a href=&quot;#字符串比较&quot; class=&quot;headerlink&quot; title=&quot;字符串比较&quot;&gt;&lt;/a&gt;字符串比较&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let quotation = &amp;quot;We are the same&amp;quot;
let sameQuotation = &amp;quot;We are the same&amp;quot;
if quotation == sameQuotation {
println(&amp;quot;These are the same&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;检查字符串是否有特定的前缀后缀&quot;&gt;&lt;a href=&quot;#检查字符串是否有特定的前缀后缀&quot; class=&quot;headerlink&quot; title=&quot;检查字符串是否有特定的前缀后缀&quot;&gt;&lt;/a&gt;检查字符串是否有特定的前缀后缀&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var food = [&amp;quot;Fruits:apple&amp;quot;,
&amp;quot;Fruits : orange&amp;quot;,
&amp;quot;Fruits : banana&amp;quot;,
&amp;quot;Vegetables: tomato&amp;quot;,
&amp;quot;Vegetables: potato&amp;quot;]

for fry in food{
if fru.hasPrefix(&amp;quot;Fruits&amp;quot;){
   println(fru)
}

if fru.hasSuffix(&amp;quot;o&amp;quot;){
   println(fru)
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Swift中的数组&quot;&gt;&lt;a href=&quot;#Swift中的数组&quot; class=&quot;headerlink&quot; title=&quot;Swift中的数组&quot;&gt;&lt;/a&gt;Swift中的数组&lt;/h1&gt;&lt;h2 id=&quot;数组的创建&quot;&gt;&lt;a href=&quot;#数组的创建&quot; class=&quot;headerlink&quot; title=&quot;数组的创建&quot;&gt;&lt;/a&gt;数组的创建&lt;/h2&gt;&lt;h3 id=&quot;方式1&quot;&gt;&lt;a href=&quot;#方式1&quot; class=&quot;headerlink&quot; title=&quot;方式1.&quot;&gt;&lt;/a&gt;方式1.&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var myArr = Array&amp;lt;String&amp;gt;()  
var num = Array&amp;lt;Int&amp;gt;(count:3,repeatedValue:1)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;方式2&quot;&gt;&lt;a href=&quot;#方式2&quot; class=&quot;headerlink&quot; title=&quot;方式2.&quot;&gt;&lt;/a&gt;方式2.&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var someInts = [Int]()
var arr:[Int]=[1,2,3]
var threeDoubles = [Double](count:3, repeatedValue:0.0)
var food = [&amp;quot;apple&amp;quot;,&amp;quot;orange&amp;quot;,&amp;quot;bnana&amp;quot;]
println(food[3])
println(food.count)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;AnyObject-and-Any&quot;&gt;&lt;a href=&quot;#AnyObject-and-Any&quot; class=&quot;headerlink&quot; title=&quot;AnyObject and Any&quot;&gt;&lt;/a&gt;AnyObject and Any&lt;/h3&gt;&lt;p&gt;Swift中有两种特殊的object:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Any:表示任何数据类型&lt;/li&gt;
&lt;li&gt;AnyObject:表示任何对象&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//因为数组里的数据不一样，这里的数组是AnyObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var shoppingList = [&amp;quot;Eggs&amp;quot;,123,true] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for item in shoppingList &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      println(item)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for fruit in food&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fruit = &amp;quot;good&amp;quot; //error, fruit默认是let类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;数组的可变性&quot;&gt;&lt;a href=&quot;#数组的可变性&quot; class=&quot;headerlink&quot; title=&quot;数组的可变性&quot;&gt;&lt;/a&gt;数组的可变性&lt;/h2&gt;&lt;h3 id=&quot;添加&quot;&gt;&lt;a href=&quot;#添加&quot; class=&quot;headerlink&quot; title=&quot;添加&quot;&gt;&lt;/a&gt;添加&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;//1. 用append()在数组尾部添加
food.append(&amp;quot;Vegetables:mushroom&amp;quot;)

//2. 通过加法添加数组元素
food += [&amp;quot;pineapple&amp;quot;,&amp;quot;pity&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;替换&quot;&gt;&lt;a href=&quot;#替换&quot; class=&quot;headerlink&quot; title=&quot;替换&quot;&gt;&lt;/a&gt;替换&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;food[0...2] = [&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;]
//从第一个到第三个元素进行替换，但只有两个元素，第三个将被删除，被“没有”所替换
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;插入&quot;&gt;&lt;a href=&quot;#插入&quot; class=&quot;headerlink&quot; title=&quot;插入&quot;&gt;&lt;/a&gt;插入&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;food.insert(&amp;quot;Meat&amp;quot;,atIndex:0)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;删除某一项&quot;&gt;&lt;a href=&quot;#删除某一项&quot; class=&quot;headerlink&quot; title=&quot;删除某一项&quot;&gt;&lt;/a&gt;删除某一项&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;food.removeAtIndex(0)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;删除最后一项&quot;&gt;&lt;a href=&quot;#删除最后一项&quot; class=&quot;headerlink&quot; title=&quot;删除最后一项&quot;&gt;&lt;/a&gt;删除最后一项&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;food.removeLast()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;删除所有&quot;&gt;&lt;a href=&quot;#删除所有&quot; class=&quot;headerlink&quot; title=&quot;删除所有&quot;&gt;&lt;/a&gt;删除所有&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;food.removeAll(keepCapacity:false)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;字典&quot;&gt;&lt;a href=&quot;#字典&quot; class=&quot;headerlink&quot; title=&quot;字典&quot;&gt;&lt;/a&gt;字典&lt;/h1&gt;&lt;h2 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//Dictionary&amp;lt;KeyType,valueType&amp;gt;
var dic1: Dictionary&amp;lt;String,String&amp;gt;

//[KeyType:valueType]
var scores:[String:Int]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;创建&quot;&gt;&lt;a href=&quot;#创建&quot; class=&quot;headerlink&quot; title=&quot;创建&quot;&gt;&lt;/a&gt;创建&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;dic1 = Dictionary&amp;lt;String,String&amp;gt;()
scores = Dictionary&amp;lt;String,Int&amp;gt;(minimumCapacity;5)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;空字典&quot;&gt;&lt;a href=&quot;#空字典&quot; class=&quot;headerlink&quot; title=&quot;空字典&quot;&gt;&lt;/a&gt;空字典&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var emptyDic:[String:Double] = [:] 
println(emptyDic.isEmpty)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;字典的使用&quot;&gt;&lt;a href=&quot;#字典的使用&quot; class=&quot;headerlink&quot; title=&quot;字典的使用&quot;&gt;&lt;/a&gt;字典的使用&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//这种的声明是不严谨的，因为值的类型都不是一样的，系统会推断它是NSObject类型
var person = [&amp;quot;age&amp;quot;:18,&amp;quot;name&amp;quot;:&amp;quot;Tom&amp;quot;,&amp;quot;身高&amp;quot;:178]

//这样会报错，因为是将NSObject转为int
var height:Int? = person[&amp;quot;身高&amp;quot;]  
if height != nil {
   println(height!)
}

//以下才正确
var person = [&amp;quot;age&amp;quot;:18,&amp;quot;name&amp;quot;:&amp;quot;Tom&amp;quot;,&amp;quot;身高&amp;quot;:&amp;quot;178&amp;quot;]

var height:String? = person[&amp;quot;身高&amp;quot;]  
if height != nil {
   println(height!)
}

println(person[&amp;quot;age&amp;quot;])

//不存才的key，返回为nil
println(person[&amp;quot;weight&amp;quot;])

//对该值重新赋值
person[&amp;quot;name&amp;quot;] = &amp;quot;Jack&amp;quot;

//对不存在的key设置value,字典将会添加k-v对
person[&amp;quot;weight&amp;quot;] = 90
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;数组是有序的，字典是无序的&lt;/li&gt;
&lt;li&gt;通过常量或者变量决定字典是否可变&lt;/li&gt;
&lt;li&gt;如果没有显示数据类型声明，字典就会根据值进行推断&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;字典的替换&quot;&gt;&lt;a href=&quot;#字典的替换&quot; class=&quot;headerlink&quot; title=&quot;字典的替换&quot;&gt;&lt;/a&gt;字典的替换&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;该方法返回更新值之前的原值&lt;/li&gt;
&lt;li&gt;键不存在对应值的时候设置值&lt;/li&gt;
&lt;li&gt;键存在时更新已存在的值&lt;/li&gt;
&lt;li&gt;键不存在时，不发生替换，不返回任何东西&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;if let oldName = person.updateValue(&amp;quot;Lucky&amp;quot;,forKey:&amp;quot;name&amp;quot;){
   println(&amp;quot;原来的值是:\(oldName)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;字典的遍历&quot;&gt;&lt;a href=&quot;#字典的遍历&quot; class=&quot;headerlink&quot; title=&quot;字典的遍历&quot;&gt;&lt;/a&gt;字典的遍历&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//使用元组
for (key,value) in person{
 println(&amp;quot;\(key):\(value)&amp;quot;)
} 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;字典的删除&quot;&gt;&lt;a href=&quot;#字典的删除&quot; class=&quot;headerlink&quot; title=&quot;字典的删除&quot;&gt;&lt;/a&gt;字典的删除&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//移除单个值
person.removeValueForKey(&amp;quot;name&amp;quot;)

//移除所有值
person.removeAll(keepCapacity:false)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;字典键和值的取出&quot;&gt;&lt;a href=&quot;#字典键和值的取出&quot; class=&quot;headerlink&quot; title=&quot;字典键和值的取出&quot;&gt;&lt;/a&gt;字典键和值的取出&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let keysArr = [String](person.keys)
let valueArr = [String](person.values)
println(valuesArr)
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;p&gt;Swift中的字符串是结构体，而NSString中的字符串是Class&lt;/p&gt;
&lt;h2 id=&quot;字符类型及表现形式&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift语言基础</title>
    <link href="http://jackliu17.github.io/2016/03/10/Swift%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <id>http://jackliu17.github.io/2016/03/10/Swift语言基础/</id>
    <published>2016-03-10T05:22:51.000Z</published>
    <updated>2016-04-11T08:45:28.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/swift%20basic.png&quot; alt=&quot;swift basic&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;常量和变量&quot;&gt;&lt;a href=&quot;#常量和变量&quot; class=&quot;headerlink&quot; title=&quot;常量和变量&quot;&gt;&lt;/a&gt;常量和变量&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;var str = &amp;quot;Hello&amp;quot;  
var name = &amp;quot;Lucky&amp;quot;    
var age: Int  
var string: String = &amp;quot;smile&amp;quot;  
var a = 20, b:String, c = &amp;quot;Swift&amp;quot;  
print(&amp;quot;Her name is \(name)&amp;quot;)   //作为占位符&amp;quot;\&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;变量var ,常量let    &lt;/li&gt;
&lt;li&gt;标识符必须以字符(包括Unicode字符)，下划线_，美元符$开头，但不能以数字开头，不可以包含空格，不能使用关键字，其长度没有限制&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h1&gt;&lt;h2 id=&quot;整型：用Int就可以了。其实还有Int16-Int32&quot;&gt;&lt;a href=&quot;#整型：用Int就可以了。其实还有Int16-Int32&quot; class=&quot;headerlink&quot; title=&quot;整型：用Int就可以了。其实还有Int16,Int32&quot;&gt;&lt;/a&gt;整型：用Int就可以了。其实还有Int16,Int32&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;let oneMillion = 1_000_000 //可以增加下划线作为分隔符
print(oneMillion)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;整型之间转换必须是显式转换&quot;&gt;&lt;a href=&quot;#整型之间转换必须是显式转换&quot; class=&quot;headerlink&quot; title=&quot;整型之间转换必须是显式转换&quot;&gt;&lt;/a&gt;整型之间转换必须是显式转换&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var book1: Int16 = 100
var book2: Int32 = 30
var totalPrice = Int32(book1) + book2 //必须先转换，否则会报错
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;正无穷-负无穷-非数&quot;&gt;&lt;a href=&quot;#正无穷-负无穷-非数&quot; class=&quot;headerlink&quot; title=&quot;正无穷,负无穷,非数&quot;&gt;&lt;/a&gt;正无穷,负无穷,非数&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var w = 4.0 / 0.0   //正无穷
var w = - 4.0 / 0.0 //负无穷
var f = 0.0 / 0.0   //非数
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;浮点运算&quot;&gt;&lt;a href=&quot;#浮点运算&quot; class=&quot;headerlink&quot; title=&quot;浮点运算&quot;&gt;&lt;/a&gt;浮点运算&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var width: Float = 2.1
var height: Double = 3.9
var area1 = width * Float(height) //必须先转换，否则会报错

//在Swift2.0 版本中貌似整数不转换也可以哦
var area2 = Int(width) * 4 //必须先转换，否则会报错
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;类型别名&quot;&gt;&lt;a href=&quot;#类型别名&quot; class=&quot;headerlink&quot; title=&quot;类型别名&quot;&gt;&lt;/a&gt;类型别名&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;typealias Age = UInt16
let myAge:Age = 10
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;元组&quot;&gt;&lt;a href=&quot;#元组&quot; class=&quot;headerlink&quot; title=&quot;元组&quot;&gt;&lt;/a&gt;元组&lt;/h2&gt;&lt;h3 id=&quot;感悟：就是一个变量里面有很多不同类型的值&quot;&gt;&lt;a href=&quot;#感悟：就是一个变量里面有很多不同类型的值&quot; class=&quot;headerlink&quot; title=&quot;感悟：就是一个变量里面有很多不同类型的值&quot;&gt;&lt;/a&gt;感悟：就是一个变量里面有很多不同类型的值&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;//赋值方式1.---- 直接赋值
var score = (140,140,&amp;quot;Good&amp;quot;)

//赋值方式2.----- 先申明类型。赋值时必须为所有的成员变量赋值
var health : (Int , Int , String)
health = (182 , 78 , &amp;quot;Good&amp;quot;)

print (&amp;quot;health元组的值为:\(health)&amp;quot;)  //打印元组所有
print (&amp;quot;health元组中身高的值为:\(health.1)&amp;quot;) //打印元组中第二个值

//赋值方式3.----- 通过key-value赋值，顺序可以调换
var score2 = (math:140, English:140, Assessment:&amp;quot;A&amp;quot;)
var score3 :(math:Int, English:Int, Assessment:String)
score3 = (English:140, math:145, Assessment:&amp;quot;A&amp;quot;)
print(&amp;quot;score3 中数学的成绩是: \(score3.math)&amp;quot;)

//元组中的嵌套---------------------------------------
var test:(Int,(Int,String))
test = (10,(100,&amp;quot;Swift&amp;quot;))
print(&amp;quot;test元组中第二个元素的第一个元素为：\(test.1.0)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;可选类型&quot;&gt;&lt;a href=&quot;#可选类型&quot; class=&quot;headerlink&quot; title=&quot;可选类型&quot;&gt;&lt;/a&gt;可选类型&lt;/h2&gt;&lt;p&gt;任何已知类型后面紧跟?即可代表可选类型如Int?。用来表示值缺失的情况&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var str2 = &amp;quot;HelloGeek&amp;quot;
//var num: Int = Int(str2) //这样会报错，因为字符串不能转为整数类型
var num: Int? = Int(str2)  //加个？变成可选类型，这样就可以，表示该值可以缺失
print(num) //在swift里，nil是个值，表示值缺失，但在OC里，nil是个空指针
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;字符串转为整形的版本差异&quot;&gt;&lt;a href=&quot;#字符串转为整形的版本差异&quot; class=&quot;headerlink&quot; title=&quot;字符串转为整形的版本差异&quot;&gt;&lt;/a&gt;字符串转为整形的版本差异&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Swift 1.x
let myString: String = &amp;quot;256&amp;quot;
let myInt: Int? = myString.toInt()

Swift 2.x
let myString: String = &amp;quot;256&amp;quot;
let myInt: Int? = Int(myString)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;强制解析&quot;&gt;&lt;a href=&quot;#强制解析&quot; class=&quot;headerlink&quot; title=&quot;强制解析&quot;&gt;&lt;/a&gt;强制解析&lt;/h2&gt;&lt;p&gt;在变量或者常量后面添加!注意：必须可选类型的变量和常量确实有值的时候才能解析成功&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var num1: Int? = 10
var num2: Int? = 20

if num1 != nil &amp;amp;&amp;amp; num2 != nil{
let sum = num1! + num2! //获得可选类型的值
}else{
print(&amp;quot;num1或者num2为nil,不能强制解析&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;可选绑定&quot;&gt;&lt;a href=&quot;#可选绑定&quot; class=&quot;headerlink&quot; title=&quot;可选绑定&quot;&gt;&lt;/a&gt;可选绑定&lt;/h2&gt;&lt;p&gt;可以用在if和while语句中来对可选类型的值进行判断并把值赋给一个常量或者变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var str3: String! = &amp;quot;Swift&amp;quot;
if var tmp = str3 {  //这就是可选绑定，将可选变量赋值给另一个变量或者常量
print(&amp;quot;str3 的值为: \(tmp)&amp;quot;)
}else{
print(&amp;quot;str3 的值为nil,不能解析&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;隐式解析可选类型&quot;&gt;&lt;a href=&quot;#隐式解析可选类型&quot; class=&quot;headerlink&quot; title=&quot;隐式解析可选类型&quot;&gt;&lt;/a&gt;隐式解析可选类型&lt;/h2&gt;&lt;p&gt;在已有类型后面添加！如Int!适用于被赋值后不会重新变为nil的变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var possibleStr: String! = &amp;quot;jikexueyuan&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h1&gt;&lt;h2 id=&quot;swift赋值&quot;&gt;&lt;a href=&quot;#swift赋值&quot; class=&quot;headerlink&quot; title=&quot;swift赋值&quot;&gt;&lt;/a&gt;swift赋值&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var a: Int  //该表达式没有值
var b = a = 20  //不支持连续赋值
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;求余运算&quot;&gt;&lt;a href=&quot;#求余运算&quot; class=&quot;headerlink&quot; title=&quot;求余运算&quot;&gt;&lt;/a&gt;求余运算&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var g = 5.2 (结果正负取决于被除数的正负)
var h = 3.1
var mod = g % h
print(mod)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;自增自减&quot;&gt;&lt;a href=&quot;#自增自减&quot; class=&quot;headerlink&quot; title=&quot;自增自减&quot;&gt;&lt;/a&gt;自增自减&lt;/h2&gt;&lt;p&gt;Swift 3中将会取消 ++ 运算符&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//结果是11，先执行运算，然后a再自加1
var a = 5
var b = a++ + 6
print(b) 

//结果是12，先自身加1，再执行运算
var a = 5
var b = ++a + 6
print(b)  
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;溢出运算符-amp-amp-amp-amp-amp-执行的是位运算&quot;&gt;&lt;a href=&quot;#溢出运算符-amp-amp-amp-amp-amp-执行的是位运算&quot; class=&quot;headerlink&quot; title=&quot;溢出运算符 &amp;amp;+ &amp;amp;- &amp;amp;* &amp;amp;/ &amp;amp;% 执行的是位运算&quot;&gt;&lt;/a&gt;溢出运算符 &amp;amp;+ &amp;amp;- &amp;amp;* &amp;amp;/ &amp;amp;% 执行的是位运算&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var willUnderflow = UInt8.min //最小值是0
willUnderflow = willUnderflow &amp;amp;-1 //下溢
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;位运算符&quot;&gt;&lt;a href=&quot;#位运算符&quot; class=&quot;headerlink&quot; title=&quot;位运算符&quot;&gt;&lt;/a&gt;位运算符&lt;/h2&gt;&lt;p&gt;&amp;amp; 按位与&lt;br&gt;|  或&lt;br&gt;^  异或&lt;br&gt;~  取反&lt;br&gt;&amp;lt;&amp;lt; 左位移&lt;br&gt;右位移 &amp;gt;&amp;gt;   &lt;/p&gt;
&lt;h2 id=&quot;扩展后的赋值运算符&quot;&gt;&lt;a href=&quot;#扩展后的赋值运算符&quot; class=&quot;headerlink&quot; title=&quot;扩展后的赋值运算符&quot;&gt;&lt;/a&gt;扩展后的赋值运算符&lt;/h2&gt;&lt;p&gt;-=&lt;br&gt;*=&lt;br&gt;/=&lt;br&gt;&amp;amp;=&lt;br&gt;|=&lt;br&gt;运算符 “+= ” 对于 x+=y 等价于 x = x+y    &lt;/p&gt;
&lt;h2 id=&quot;区间运算符&quot;&gt;&lt;a href=&quot;#区间运算符&quot; class=&quot;headerlink&quot; title=&quot;区间运算符&quot;&gt;&lt;/a&gt;区间运算符&lt;/h2&gt;&lt;p&gt;a..&amp;lt;b (包含a,但不包含b)&lt;br&gt;a…b（包含a,也包含b）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for a in 0..&amp;lt;10&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for a in 0...10&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;比较运算符，结果为BOOL值&quot;&gt;&lt;a href=&quot;#比较运算符，结果为BOOL值&quot; class=&quot;headerlink&quot; title=&quot;比较运算符，结果为BOOL值&quot;&gt;&lt;/a&gt;比较运算符，结果为BOOL值&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var c= a === b //只有a和b指向的类型实例相同时，c为true
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;=== 特征相等运算符  &lt;/li&gt;
&lt;li&gt;!== 特征不等运算符  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;逻辑运算符&quot;&gt;&lt;a href=&quot;#逻辑运算符&quot; class=&quot;headerlink&quot; title=&quot;逻辑运算符&quot;&gt;&lt;/a&gt;逻辑运算符&lt;/h2&gt;&lt;p&gt;&amp;amp;&amp;amp; 与&lt;br&gt;|| 或&lt;br&gt;!  非&lt;/p&gt;
&lt;h2 id=&quot;三目运算符&quot;&gt;&lt;a href=&quot;#三目运算符&quot; class=&quot;headerlink&quot; title=&quot;三目运算符&quot;&gt;&lt;/a&gt;三目运算符&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var a = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var b = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var str = a &amp;gt; b ? &amp;quot;a大于b&amp;quot;:&amp;quot;a小于b&amp;quot; //如果条件成立就执行?后的，否则就执行:后的&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;空合并运算符-a-b&quot;&gt;&lt;a href=&quot;#空合并运算符-a-b&quot; class=&quot;headerlink&quot; title=&quot;空合并运算符 a??b&quot;&gt;&lt;/a&gt;空合并运算符 a??b&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;a是可选类型，将对可选类型a进行空判断，如果a包含一个值就进行解封&lt;/li&gt;
&lt;li&gt;否则就返回一个默认值b  &lt;/li&gt;
&lt;li&gt;默认值b的类型必须要和a存储值的类型保持一致  &lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let words = &amp;quot;hello&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var say: String? &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var content = say ?? words&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(content)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;流程控制&quot;&gt;&lt;a href=&quot;#流程控制&quot; class=&quot;headerlink&quot; title=&quot;流程控制&quot;&gt;&lt;/a&gt;流程控制&lt;/h1&gt;&lt;h2 id=&quot;分支结构&quot;&gt;&lt;a href=&quot;#分支结构&quot; class=&quot;headerlink&quot; title=&quot;分支结构&quot;&gt;&lt;/a&gt;分支结构&lt;/h2&gt;&lt;h3 id=&quot;if…else…&quot;&gt;&lt;a href=&quot;#if…else…&quot; class=&quot;headerlink&quot; title=&quot;if…else…&quot;&gt;&lt;/a&gt;if…else…&lt;/h3&gt;&lt;p&gt;语句的条件执行体必须放在花括号中&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var age = 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if age &amp;gt; 20 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  print(“年龄大于20岁”)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  print(&amp;quot;年龄小于20岁&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Switch&quot;&gt;&lt;a href=&quot;#Switch&quot; class=&quot;headerlink&quot; title=&quot;Switch&quot;&gt;&lt;/a&gt;Switch&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;任意一个case不需要break,执行完一条会自动退出  &lt;/li&gt;
&lt;li&gt;每一个case块至少包含一条执行语句语句&lt;/li&gt;
&lt;li&gt;case标签后可以有多个值，用逗号隔开&lt;/li&gt;
&lt;li&gt;case块后的条件还可以是一个范围或者元组，支持值绑定&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let score = &amp;quot;B&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch score &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case &amp;quot;A&amp;quot;,&amp;quot;a&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;Good&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case &amp;quot;B&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;LG&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case &amp;quot;C&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;TW4&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case &amp;quot;D&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;Good&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case &amp;quot;E&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;Good&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;error&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用fallthrough语句贯穿&quot;&gt;&lt;a href=&quot;#使用fallthrough语句贯穿&quot; class=&quot;headerlink&quot; title=&quot;使用fallthrough语句贯穿&quot;&gt;&lt;/a&gt;使用fallthrough语句贯穿&lt;/h3&gt;&lt;p&gt;执行完一条语句后，不要退出，再继续执行下一条&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var num = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var desc = &amp;quot;\(num)是&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch num &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case 2, 3, 5, 7 :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     desc += &amp;quot;质数，而且还是&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 fallthrough&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     desc += &amp;quot;整数&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(desc) //结果是“5是质数，而且还是整数”&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;case后的条件为元组&quot;&gt;&lt;a href=&quot;#case后的条件为元组&quot; class=&quot;headerlink&quot; title=&quot;case后的条件为元组&quot;&gt;&lt;/a&gt;case后的条件为元组&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var point = (x:5 , y:2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch point &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case (0,0):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;(0,0)位于原点&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case (_,0):   //用 &amp;quot;_&amp;quot; 表示可以忽略这个数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;(\(point.0),0)位于x轴上&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case (0...Int.max as ClosedInterval, 0...Int.max as ClosedInterval):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;(\(point.0),\(point.1))位于第一象限&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    break&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;值绑定&quot;&gt;&lt;a href=&quot;#值绑定&quot; class=&quot;headerlink&quot; title=&quot;值绑定&quot;&gt;&lt;/a&gt;值绑定&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var point = (x:1 , y:1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch point &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case (0,0):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   print(&amp;quot;(0,0)位于原点&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case (var a, 0)://y坐标为0，进入该case块，并将元组的x成员绑定到临时变量a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   print(&amp;quot;该点位于x轴上，x值为:\(a)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case var (x,y) where x&amp;gt;0 &amp;amp;&amp;amp; y&amp;gt;0:  //条件值绑定&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   print(&amp;quot;(\(x),\(y))位于第一象限&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   break&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;循环结构&quot;&gt;&lt;a href=&quot;#循环结构&quot; class=&quot;headerlink&quot; title=&quot;循环结构&quot;&gt;&lt;/a&gt;循环结构&lt;/h2&gt;&lt;h3 id=&quot;for-loop&quot;&gt;&lt;a href=&quot;#for-loop&quot; class=&quot;headerlink&quot; title=&quot;for loop&quot;&gt;&lt;/a&gt;for loop&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for index in 1...5 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;\(index) times 5 is \(index * 5)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let base = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let power = 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var answer = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for _ in 1...power &amp;#123; //下划线符号_替代循环中的变量，能够忽略具体的值，并且不提供循环遍历时对值的访问&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  answer *= base&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;标签：&quot;&gt;&lt;a href=&quot;#标签：&quot; class=&quot;headerlink&quot; title=&quot;标签：&quot;&gt;&lt;/a&gt;标签：&lt;/h3&gt;&lt;p&gt;紧跟冒号的标识符，只有放在循环语句或者switch语句之前才有作用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;outer: for i in 0...5 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //内层循环&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for j in 0...3&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;i的值为:\(i),j的值为\(j)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if j==1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    break outer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;break结束循环，开始执行循环之后的代码&lt;/li&gt;
&lt;li&gt;continue 忽略本次循环的剩下语句，执行下一次循环，但不终止循环&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xrh1x.com1.z0.glb.clouddn.com/swift%20basic.png&quot; alt=&quot;swift basic&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;常量和变量&quot;&gt;&lt;a href=&quot;#常量和变量&quot; class=&quot;headerli
    
    </summary>
    
      <category term="IT" scheme="http://jackliu17.github.io/categories/IT/"/>
    
    
      <category term="iOS" scheme="http://jackliu17.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="http://jackliu17.github.io/tags/swift/"/>
    
  </entry>
  
</feed>
